import * as path from "path";
import * as fs from "fs";
import { Telegraf } from "telegraf";
import { EventEmitter } from "events";
import { Writable } from "stream";
const { SocksProxyAgent } = require('socks-proxy-agent');
const { HttpsProxyAgent } = require('https-proxy-agent');

import { degreesToSign } from "../lib/zodiac";
import { BotInstance } from "../interfaces/bot";

import { getMonthlyHoroscopeForZodiac, isInRange } from "../utils/horoscope";
import { getTimezoneFromLongitude } from "../utils/geocoding";
import { convertDateFormat, parseBirthDate } from "../utils/astro";
import { getMessageType, readSystemPromptFromFile } from "../utils/bot";
import { toArcana, splitNumberIntoDigits, getArcanFilePath } from "../utils/arcan";

import User from "../models/user.model";
import Customer from "../models/customer.model";
import AISettings from "../models/aiSettings.model";
import { Chat, IChat } from "../models/chat.model";
import { EphemerisConfig } from "../models/chart.model";
import { IMessage, Message, MessageType } from "../models/messages.model";

import { AstroProcessor } from "./astroProcessor.service";
import dailyMessagingService from "./dailyMessaging.service";
import { 
  generateForecastPdf, 
  generateFinancialCastPdf, 
  generateMistakesIncarnationPdf, 
  generateAwakeningCodesPdf 
} from "./pdfGenerator.service";

import monthlyHoroscope from "../data/natal/monthly.json";
import monthsData from "../data/taroscop/months.json";
import yearDoorData from "../data/taroscop/yearDoor.json";
import riskData from "../data/taroscop/risk.json";
import eventsData from "../data/taroscop/events.json";
import archetypePovertyData from "../data/financialCast/archetypePoverty.json";
import dutyData from "../data/financialCast/duty.json";
import knotData from "../data/financialCast/knot.json";
import shadowBData from "../data/financialCast/shadowB.json";
import ritualsData from "../data/financialCast/rituals.json";
import karmicLessonsData from "../data/mistakesIncarnation/karmicLessons.json";
import lessonIncarnationData from "../data/mistakesIncarnation/lessonIncarnation.json";
import coreData from "../data/awakeningCodes/core.json";
import fearData from "../data/awakeningCodes/fear.json";
import implementationData from "../data/awakeningCodes/implementation.json";

class BotManager extends EventEmitter {
  private bots: Map<string, BotInstance> = new Map();
  private astroProcessor: AstroProcessor;

  constructor() {
    super();
    console.log('ü§ñ BotManager initialized');
    this.startSubscriptionChecker();
    
    const config: EphemerisConfig = { ephemerisPath: '', flags: 0 };
    this.astroProcessor = new AstroProcessor(config, 'EQUAL');
    this.initializeAstroProcessor();
  }

  private async initializeAstroProcessor() {
    try {
      await this.astroProcessor.initialize();
      console.log('‚ú® AstroProcessor initialized');
    } catch (error) {
      console.error('‚ùå Failed to initialize AstroProcessor:', error);
    }
  }

  async initialize() {
    console.log('üîÑ Initializing BotManager...');

    try {
      await this.loadAllBots();

      console.log(`‚úÖ BotManager initialized with ${this.bots.size} bots`);
      console.log('üì° Using Mongoose middleware for change detection (no replica set required)');
      this.emit('manager:initialized', { botsCount: this.bots.size });
    } catch (error) {
      console.error('‚ùå Error initializing BotManager:', error);
      this.emit('manager:error', { error });
    }
  }

  private async loadAllBots() {
    console.log('üîç Loading all customers from database...');

    const customers = await Customer.find({}, 'username botToken _id subscriptionStatus subscriptionEndsAt');
    console.log(`üìä Found ${customers.length} customers in database`);

    if (customers.length === 0) {
      console.log('‚ö†Ô∏è No customers found in database');
      return;
    }

    const botPromises = customers.map(async (customer) => {
      console.log(`üë§ Processing customer: ${customer.username}, has token: ${!!customer.botToken}`);

      const isSubscriptionActive = customer.subscriptionStatus === 'active' && customer.subscriptionEndsAt && customer.subscriptionEndsAt > new Date();

      if (customer.botToken && isSubscriptionActive) {
        try {
          console.log(`‚úÖ Subscription active for ${customer.username}. Adding bot.`);
          await this.addBot((customer._id as any).toString(), customer.username, customer.botToken);
        } catch (error) {
          console.error(`‚ùå Failed to process customer ${customer.username}:`, error);
        }
      } else {
        console.log(`üö´ Customer ${customer.username} has no bot token or an inactive subscription.`);
      }
    });

    await Promise.allSettled(botPromises);

    console.log(`üéØ Loaded ${this.bots.size} bots out of ${customers.length} customers`);
  }

  private async handleIncomingMessage(customerId: string, ctx: any) {
    const chatId = ctx.chat.id.toString();
    const userId = ctx.from.id.toString();
    const messageType = getMessageType(ctx.message);

    try {
      const chat = await this.saveChat(customerId, chatId, userId, ctx.from);

      await this.saveMessage({
        chat,
        customerId,
        messageId: ctx.message.message_id.toString(),
        type: messageType as MessageType,
        direction: 'in',
        content: this.extractMessageContent(ctx.message, messageType),
        ctx
      });

      console.log(`üíæ Saved ${messageType} message from ${chatId} for customer ${customerId}`);
    } catch (error) {
      console.error(`‚ùå Error saving message from ${chatId}:`, error);
      this.emit('message:save:error', { customerId, chatId, error });
    }
  }

  private async saveChat(
    customerId: string,
    chatId: string,
    userId: string,
    from: any
  ): Promise<IChat> {
    const chatData = {
      customerId: customerId,
      chatId,
      userId,
      meta: {
        firstName: from.first_name,
        lastName: from.last_name,
        username: from.username,
        lastMessageAt: new Date()
      }
    };

    return Chat.findOneAndUpdate(
      { customerId: chatData.customerId, chatId },
      { 
        $set: chatData,
        $setOnInsert: { 
          status: 'active',
          createdAt: new Date() 
        }
      },
      { upsert: true, new: true }
    );
  }

  private async saveMessage(data: {
    chat: IChat;
    customerId: string;
    messageId: string;
    type: MessageType;
    direction: 'in' | 'out';
    content: any;
    ctx?: any;
  }): Promise<IMessage> {
    const message = await Message.create({
      chatId: data.chat._id,
      customerId: data.customerId,
      messageId: data.messageId,
      type: data.type,
      direction: data.direction,
      content: data.content,
      timestamp: new Date()
    });

    await Chat.updateOne(
      { _id: data.chat._id },
      { 
        $set: { 'meta.lastMessageAt': new Date() },
        $inc: { 
          'meta.unreadCount': data.direction === 'in' ? 1 : 0 
        }
      }
    );

    return message;
  }

  private extractMessageContent(message: any, type: string): any {
    const baseContent = {
      text: message.text,
      caption: message.caption
    };

    switch(type) {
      case 'photo':
        return {
          ...baseContent,
          fileIds: message.photo.map((p: any) => p.file_id)
        };
      case 'document':
        return {
          ...baseContent,
          fileId: message.document.file_id,
          fileName: message.document.file_name
        };
      case 'video':
        return {
          ...baseContent,
          fileId: message.video.file_id
        };
      default:
        return baseContent;
    }
  }

  private startSubscriptionChecker() {
    setInterval(async () => {
      console.log('‚è∞ Checking for expired subscriptions...');
      const customers = await Customer.find({ 
        subscriptionStatus: 'active',
        subscriptionEndsAt: { $lt: new Date() } 
      });

      for (const customer of customers) {
        console.log(`‚åõ Subscription expired for ${customer.username}. Deactivating...`);
        customer.subscriptionStatus = 'inactive';
        
        await customer.save();
      }
    }, 3600 * 1000);
  }

  private async searchCityData(cityQuery: string): Promise<any> {
    try {
      const searchResponse = await fetch(
        `https://nominatim.openstreetmap.org/search?` +
        `q=${encodeURIComponent(cityQuery)}&` +
        `format=json&` +
        `addressdetails=1&` +
        `limit=1&` +
        `countrycodes=by,ru,us,gb,de,fr,it,es,ca,au,jp,cn,kr,sg,th,ae,in,nz,eg,za,ng,br,ar,pe,cl,mx&` +
        `featuretype=city,town,village`,
        {
          headers: {
            'User-Agent': 'AstroApp/1.0'
          }
        }
      );

      if (!searchResponse.ok) {
        throw new Error(`Nominatim API error: ${searchResponse.status}`);
      }

      const searchData = await searchResponse.json() as any[];
      
      if (searchData.length === 0) {
        return null;
      }

      const city = searchData[0];
      const latitude = parseFloat(city.lat);
      const longitude = parseFloat(city.lon);

      let timezoneData = null;
      try {
        const apiKey = process.env.TIMEZONEDB_API_KEY || 'demo';
        const timezoneResponse = await fetch(
          `http://api.timezonedb.com/v2.1/get-time-zone?` +
          `key=${apiKey}&` +
          `format=json&` +
          `by=position&` +
          `lat=${latitude}&` +
          `lng=${longitude}`,
          {
            headers: {
              'User-Agent': 'AstroApp/1.0'
            }
          }
        );
        
        if (timezoneResponse.ok) {
          const timezoneResult = await timezoneResponse.json() as any;
          if (timezoneResult.status === 'OK') {
            timezoneData = {
              utcOffset: timezoneResult.gmtOffset / 3600,
              timezoneId: timezoneResult.zoneName,
              timezoneName: timezoneResult.abbreviation,
              countryCode: timezoneResult.countryCode,
              countryName: timezoneResult.countryName
            };
          }
        }
      } catch (timezoneError) {
        console.warn('Failed to get timezone, using fallback:', timezoneError);
      }

      if (!timezoneData) {
        const fallbackTimezone = getTimezoneFromLongitude(longitude);
        timezoneData = {
          utcOffset: fallbackTimezone,
          timezoneId: 'Unknown',
          timezoneName: `UTC${fallbackTimezone >= 0 ? '+' : ''}${fallbackTimezone}`,
          countryCode: 'Unknown',
          countryName: 'Unknown'
        };
      }

      return {
        place_id: city.place_id,
        display_name: city.display_name,
        lat: latitude,
        lon: longitude,
        type: city.type,
        importance: city.importance,
        timezone: timezoneData
      };
    } catch (error) {
      console.error('Error searching city data:', error);
      return null;
    }
  }

  private async calculatePlanetPosition(user: any, planetName: string): Promise<any> {
    try {
      const convertedBirthday = user.birthday.includes('.') 
        ? convertDateFormat(user.birthday) 
        : user.birthday;
      
      const formattedBirthTime = user.birthTime && user.birthTime.includes(':') 
        ? user.birthTime 
        : '10:00';
      
      const dateStr = `${convertedBirthday}T${formattedBirthTime}`;
      const birthDateUTC = parseBirthDate(dateStr, user.timezone || 0);

      const chart = await this.astroProcessor.calculateNatalChart(
        birthDateUTC,
        user.latitude,
        user.longitude,
        user.timezone || 0
      );

      const planetData = chart.planets.find((p: any) => 
        p.name.toLowerCase() === planetName.toLowerCase()
      );

      if (!planetData) {
        throw new Error(`Planet ${planetName} not found`);
      }

      const zodiacSign = degreesToSign(planetData.longitude);
      
      const signNumbers = {
        'Aries': 1, 'Taurus': 2, 'Gemini': 3, 'Cancer': 4,
        'Leo': 5, 'Virgo': 6, 'Libra': 7, 'Scorpio': 8,
        'Sagittarius': 9, 'Capricorn': 10, 'Aquarius': 11, 'Pisces': 12
      };

      const signNumber = signNumbers[zodiacSign.sign as keyof typeof signNumbers] || 0;

      return {
        planet: planetData.name,
        longitude: planetData.longitude,
        zodiacSign: {
          number: signNumber,
          name: zodiacSign.sign,
          degree: zodiacSign.degree,
          minute: zodiacSign.minute,
          second: zodiacSign.second
        }
      };
    } catch (error) {
      console.error(`Error calculating planet position for ${planetName}:`, error);
      throw error;
    }
  }

  private getHoroscopeFilePath(planetName: string, signNumber: number): string {
    const planetFolder = planetName.toLowerCase();
    const fileName = `${signNumber}.pdf`;
    return path.join(process.cwd(), 'src', 'data', 'natal', planetFolder, fileName);
  }

  private async sendHoroscopeFile(customerId: string, chatId: string, planetName: string, user: any): Promise<void> {
    try {
      const planetData = await this.calculatePlanetPosition(user, planetName);
      const signNumber = planetData.zodiacSign.number;
      
      const filePath = this.getHoroscopeFilePath(planetName, signNumber);
      
      const russianSignNames = {
        1: '–û–≤–µ–Ω', 2: '–¢–µ–ª–µ—Ü', 3: '–ë–ª–∏–∑–Ω–µ—Ü—ã', 4: '–†–∞–∫',
        5: '–õ–µ–≤', 6: '–î–µ–≤–∞', 7: '–í–µ—Å—ã', 8: '–°–∫–æ—Ä–ø–∏–æ–Ω',
        9: '–°—Ç—Ä–µ–ª–µ—Ü', 10: '–ö–æ–∑–µ—Ä–æ–≥', 11: '–í–æ–¥–æ–ª–µ–π', 12: '–†—ã–±—ã'
      };

      const russianName = russianSignNames[signNumber as keyof typeof russianSignNames] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const planetNames = {
        'jupiter': '–Æ–ø–∏—Ç–µ—Ä',
        'venus': '–í–µ–Ω–µ—Ä–∞', 
        'mercury': '–ú–µ—Ä–∫—É—Ä–∏–π',
        'saturn': '–°–∞—Ç—É—Ä–Ω'
      };

      const planetRussianName = planetNames[planetName.toLowerCase() as keyof typeof planetNames] || planetName;

      const caption = 
        `üîÆ *${planetRussianName} –≤ –∑–Ω–∞–∫–µ ${russianName}*\n\n` +
        `üìç –ü–æ–∑–∏—Ü–∏—è: ${planetData.zodiacSign.degree}¬∞${planetData.zodiacSign.minute}'${planetData.zodiacSign.second}" ${russianName}\n\n` +
        `‚ú® –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≥–æ—Ç–æ–≤!`;

      await this.sendFile(
        customerId,
        chatId,
        filePath,
        caption,
        false,
        false,
        false,
        "Markdown"
      );

      setTimeout(async () => {
        const nextHoroscopeMessage = 
          "‚ú® *–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≥–æ—Ä–æ—Å–∫–æ–ø?*\n\n" +
          "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:";

        await this.sendMessage(
          customerId,
          chatId,
          nextHoroscopeMessage,
          false,
          false,
          false,
          "Markdown",
          [
            "üí∞ –î–µ–Ω—å–≥–∏ –ø–æ –Æ–ø–∏—Ç–µ—Ä—É",
            "üí´ –ö–∞—Ä–º–∞ –ò–∑–æ–±–∏–ª–∏—è",
            "üß† –ö–∞—Ä–º–∞ –ú—ã—Å–ª–µ–π",
            "üßê –£—Ä–æ–∫–∏ –°–∞—Ç—É—Ä–Ω–∞",
            "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å",
            "üìÜ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü",
            "üå∏ –ü–µ—Ä–∏–æ–¥—ã –≥–æ–¥–∞",
            "üîÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–∞–¥–µ-—Å–∞—Ç–∏",
            "‚ö° –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞—Ä–º —ç–∫–∑–∞–º–µ–Ω–∞",
            "‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
          ],
          true
        );
      }, 1000);

    } catch (error) {
      console.error(`Error sending horoscope file for ${planetName}:`, error);
      
      await this.sendMessage(
        customerId,
        chatId,
        `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
        false,
        false,
        false,
        undefined
      );
    }
  }

  private cleanObjectForJSON(obj: any, maxDepth: number = 10, currentDepth: number = 0): any {
    if (currentDepth >= maxDepth) {
      return '[Max Depth Reached]';
    }

    if (obj === null || obj === undefined) {
      return obj;
    }

    if (typeof obj !== 'object') {
      return obj;
    }

    if (obj instanceof Date) {
      return obj.toISOString();
    }

    if (Array.isArray(obj)) {
      return obj.map(item => this.cleanObjectForJSON(item, maxDepth, currentDepth + 1));
    }

    if (obj.constructor && (
      obj.constructor.name === 'TLSSocket' ||
      obj.constructor.name === 'HTTPParser' ||
      obj.constructor.name === 'ClientRequest' ||
      obj.constructor.name === 'IncomingMessage' ||
      obj.constructor.name === 'Socket' ||
      obj.constructor.name === 'Server'
    )) {
      return '[Internal Node.js Object]';
    }

    const cleaned: any = {};
    const seen = new WeakSet();

    for (const key in obj) {
      try {
        const value = obj[key];

        if (value && typeof value === 'object') {
          if (seen.has(value)) {
            cleaned[key] = '[Circular Reference]';
            continue;
          }
          seen.add(value);
        }

        cleaned[key] = this.cleanObjectForJSON(value, maxDepth, currentDepth + 1);
      } catch (error) {
        cleaned[key] = '[Error accessing property]';
      }
    }

    return cleaned;
  }

  private setupBotHandlers(bot: Telegraf, customerId: string, username: string) {
    bot.start(async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üëã /start command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await this.sendMessage(
          customerId,
          chatId,
          `–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚Äî –∏ —è –∑–∞–≥–æ–≤–æ—Ä—é. –ù–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∞ –ø–æ–∫–∞–∂—É ‚Äî –∫–µ–º —Ç—ã —Å—Ç–∞–ª, –∫–µ–º –±–æ–∏—à—å—Å—è –±—ã—Ç—å –∏ –∫–µ–º –ø—Ä–∏—à—ë–ª —Å—Ç–∞—Ç—å.  –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–¥. –Ø –ø—Ä–æ—á—Ç—É –µ–≥–æ. –ò —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –ø—Ä–µ–∂–Ω–∏–º.`,
          false,
          false,
          false,
          undefined,
        )

        const existingUser = await User.findOne({ chat_id: chatId, customerId: customerId });

        if (!existingUser) {
          await User.create({
            chat_id: chatId,
            customerId: customerId,
            state: 'step_1',
            createdAt: new Date()
          });
        } else {
          await User.updateOne(
            { chat_id: chatId, customerId: customerId },
            { $set: { state: 'step_1' } }
          );
        }

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'start',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /start for customer ${username}:`, error);
      }
    });

    bot.command('new_chat', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üîÑ /new_chat command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        const existingUser = await User.findOne({ chat_id: chatId, customerId: customerId });

        if (!existingUser) {
          await User.create({
            chat_id: chatId,
            customerId: customerId,
            state: 'step_1',
            createdAt: new Date()
          });
        } else {
          await User.updateOne(
            { chat_id: chatId, customerId: customerId },
            { $set: { state: 'step_1' } }
          );
        }

        await this.sendMessage(
          customerId,
          chatId,
          `–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞! –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚Äî –∏ —è –∑–∞–≥–æ–≤–æ—Ä—é. –ù–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∞ –ø–æ–∫–∞–∂—É ‚Äî –∫–µ–º —Ç—ã —Å—Ç–∞–ª, –∫–µ–º –±–æ–∏—à—å—Å—è –±—ã—Ç—å –∏ –∫–µ–º –ø—Ä–∏—à—ë–ª —Å—Ç–∞—Ç—å.  –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–¥. –Ø –ø—Ä–æ—á—Ç—É –µ–≥–æ. –ò —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –ø—Ä–µ–∂–Ω–∏–º.`,
          false,
          false,
          false,
          undefined,
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'new_chat',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /new_chat for customer ${username}:`, error);
      }
    });

    bot.command('astrolog', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üîÆ /astrolog command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);
      
      try {
        const user = await User.findOne({ chat_id: chatId, customerId: customerId });

        const hasAllData = user && 
          user.birthday && 
          user.birthTime && 
          user.latitude !== undefined && 
          user.longitude !== undefined && 
          user.timezone !== undefined && 
          user.city_name;

        if (!hasAllData) {
          const message = "–ó–≤–µ–∑–¥—ã —Ö—Ä–∞–Ω—è—Ç –∫–∞—Ä—Ç—É –≤–∞—à–µ–π —Å—É–¥—å–±—ã, –∏ —è –º–æ–≥—É –µ–µ –ø—Ä–æ—á–µ—Å—Ç—å. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)";

          await this.sendMessage(
            customerId,
            chatId,
            message,
            false,
            false,
            false,
            "Markdown"
          );

          const existingUser = await User.findOne({ chat_id: chatId, customerId: customerId });
          
          if (!existingUser) {
            await User.create({
              chat_id: chatId,
              customerId: customerId,
              state: 'natal_1',
              createdAt: new Date()
            });
          } else {
            await User.updateOne(
              { chat_id: chatId, customerId: customerId },
              { $set: { state: 'natal_1' } }
            );
          }
        } else {
          const message = 
            "‚ú® –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤:\n\n" +
            `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.birthday}\n` +
            `‚è∞ *–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.birthTime}\n` +
            `üèôÔ∏è *–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.city_name}\n\n` +
            "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –≤—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞–∂–º–∏ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.";

          await this.sendMessage(
            customerId,
            chatId,
            message,
            false,
            false,
            false,
            "Markdown",
            [
              "üí∞ –î–µ–Ω—å–≥–∏ –ø–æ –Æ–ø–∏—Ç–µ—Ä—É",
              "üí´ –ö–∞—Ä–º–∞ –ò–∑–æ–±–∏–ª–∏—è",
              "üß† –ö–∞—Ä–º–∞ –ú—ã—Å–ª–µ–π",
              "üßê –£—Ä–æ–∫–∏ –°–∞—Ç—É—Ä–Ω–∞",
              "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å",
              "üìÜ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü",
              "üå∏ –ü–µ—Ä–∏–æ–¥—ã –≥–æ–¥–∞",
              "üîÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–∞–¥–µ-—Å–∞—Ç–∏",
              "‚ö° –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞—Ä–º —ç–∫–∑–∞–º–µ–Ω–∞",
              "‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
            ],
            true
          );

          console.log(`‚úÖ Sent astrological data for user ${chatId}`);

          await User.findOneAndUpdate(
            { chat_id: chatId, customerId: customerId },
            { state: 'natal_5' }
          );
        }

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'astrolog',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /astrolog for customer ${username}:`, error);
      }
    });

    bot.command('menu', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üîÑ /menu command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        const menuText = "üîÆ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:";
        
        const options: any = {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üåü –ê—Å—Ç—Ä–æ–ª–æ–≥', callback_data: 'menu_astrolog' }],
              [{ text: 'üîÆ –ì–∞–¥–∞–ª–∫–∞', callback_data: 'menu_fortune' }],
              [{ text: 'üí¨ –î–∏–∞–ª–æ–≥ —Å –ø—Ä–æ—Ä–æ–∫–æ–º', callback_data: 'menu_dialog' }],
              [{ text: 'üÉè –¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥', callback_data: 'menu_tarot' }],
              [{ text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data: 'menu_instructions' }],
              [{ text: 'üíé –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'menu_subscription' }]
            ]
          }
        };
        
        const result = await bot.telegram.sendMessage(chatId, menuText, options);

        const chat = await Chat.findOne({ customerId, chatId });
        if (chat) {
          const savedMessage = await this.saveMessage({
            chat,
            customerId,
            messageId: result.message_id.toString(),
            type: 'text',
            direction: 'out',
            content: { text: menuText }
          }); 
        }

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'menu',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /menu for customer ${username}:`, error);
      }
    });

    bot.command('gadalka', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üîÆ /gadalka command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await this.sendMessage(
          customerId,
          chatId,
          "üîÆ *–ì–∞–¥–∞–ª–∫–∞*\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
          false,
          false,
          false,
          "Markdown"
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'gadalka',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /gadalka for customer ${username}:`, error);
      }
    });

    bot.command('dialog', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üí¨ /dialog command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        const existingUser = await User.findOne({ chat_id: chatId, customerId: customerId });

        if (!existingUser) {
          await User.create({
            chat_id: chatId,
            customerId: customerId,
            state: 'step_1',
            createdAt: new Date()
          });
        } else {
          await User.updateOne(
            { chat_id: chatId, customerId: customerId },
            { $set: { state: 'step_1' } }
          );
        }

        await this.sendMessage(
          customerId,
          chatId,
          `–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞! –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚Äî –∏ —è –∑–∞–≥–æ–≤–æ—Ä—é. –ù–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∞ –ø–æ–∫–∞–∂—É ‚Äî –∫–µ–º —Ç—ã —Å—Ç–∞–ª, –∫–µ–º –±–æ–∏—à—å—Å—è –±—ã—Ç—å –∏ –∫–µ–º –ø—Ä–∏—à—ë–ª —Å—Ç–∞—Ç—å.  –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–¥. –Ø –ø—Ä–æ—á—Ç—É –µ–≥–æ. –ò —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –ø—Ä–µ–∂–Ω–∏–º.`,
          false,
          false,
          false,
          undefined,
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'dialog',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /dialog for customer ${username}:`, error);
      }
    });

    bot.command('matrica', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üÉè /matrica command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await this.sendMessage(
          customerId,
          chatId,
          "üÉè *–¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥*\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
          false,
          false,
          false,
          "Markdown"
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'matrica',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /matrica for customer ${username}:`, error);
      }
    });

    bot.command('instruction', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üìñ /instruction command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        const instructions = 
          "üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n" +
          "üåü *–ê—Å—Ç—Ä–æ–ª–æ–≥* ‚Äî –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑. –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏ —Ä–∞—Å—Å–∫–∞–∂—É –æ:\n" +
          "  ‚Ä¢ –î–µ–Ω—å–≥–∞—Ö –ø–æ –Æ–ø–∏—Ç–µ—Ä—É\n" +
          "  ‚Ä¢ –ö–∞—Ä–º–µ –ò–∑–æ–±–∏–ª–∏—è (–í–µ–Ω–µ—Ä–∞)\n" +
          "  ‚Ä¢ –ö–∞—Ä–º–µ –ú—ã—Å–ª–µ–π (–ú–µ—Ä–∫—É—Ä–∏–π)\n" +
          "  ‚Ä¢ –£—Ä–æ–∫–∞—Ö –°–∞—Ç—É—Ä–Ω–∞\n\n" +
          "üí¨ *–î–∏–∞–ª–æ–≥ —Å –ø—Ä–æ—Ä–æ–∫–æ–º* ‚Äî –ù–∞—á–Ω–∏—Ç–µ –±–µ—Å–µ–¥—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ —á–µ—Ä–µ–∑ –≥–ª—É–±–æ–∫–∏–π –¥–∏–∞–ª–æ–≥ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.\n\n" +
          "üîÆ *–ì–∞–¥–∞–ª–∫–∞* ‚Äî –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≥–∞–¥–∞–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n" +
          "üÉè *–¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥* ‚Äî –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n" +
          "üíé *–ü–æ–¥–ø–∏—Å–∫–∞* ‚Äî –û—Ñ–æ—Ä–º–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n\n" +
          "üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
          "`/menu` ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
          "`/astrolog` ‚Äî –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑\n" +
          "`/dialog` ‚Äî –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n" +
          "`/gadalka` ‚Äî –ì–∞–¥–∞–ª–∫–∞\n" +
          "`/matrica` ‚Äî –¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥\n" +
          "`/instruction` ‚Äî –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n" +
          "`/podpiska` ‚Äî –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n" +
          "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –≤–∞—à–µ–π —Å—É–¥—å–±—ã! ‚ú®";

        await this.sendMessage(
          customerId,
          chatId,
          instructions,
          false,
          false,
          false,
          "Markdown"
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'instruction',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /instruction for customer ${username}:`, error);
      }
    });

    bot.command('podpiska', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId = ctx.chat.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      console.log(`üíé /podpiska command from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await this.sendMessage(
          customerId,
          chatId,
          "üíé *–ü–æ–¥–ø–∏—Å–∫–∞*\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
          false,
          false,
          false,
          "Markdown"
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'command',
          command: 'podpiska',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling /podpiska for customer ${username}:`, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    bot.action('menu_astrolog', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      if (!chatId) return;

      console.log(`üåü Menu: –ê—Å—Ç—Ä–æ–ª–æ–≥ from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await ctx.answerCbQuery();

        const user = await User.findOne({ chat_id: chatId, customerId: customerId });

        const hasAllData = user && 
          user.birthday && 
          user.birthTime && 
          user.latitude !== undefined && 
          user.longitude !== undefined && 
          user.timezone !== undefined && 
          user.city_name;

        if (!hasAllData) {
          const message = "–ó–≤–µ–∑–¥—ã —Ö—Ä–∞–Ω—è—Ç –∫–∞—Ä—Ç—É –≤–∞—à–µ–π —Å—É–¥—å–±—ã, –∏ —è –º–æ–≥—É –µ–µ –ø—Ä–æ—á–µ—Å—Ç—å. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)";

          await this.sendMessage(
            customerId,
            chatId,
            message,
            false,
            false,
            false,
            "Markdown"
          );

          await User.findOneAndUpdate(
            { chat_id: chatId, customerId: customerId },
            {
              $set: {
                chat_id: chatId,
                customerId: customerId
              },
              $setOnInsert: {
                state: 'natal_1',
                createdAt: new Date()
              }
            },
            { upsert: true, new: true }
          );
        } else {
          const message = 
            "‚ú® –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤:\n\n" +
            `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.birthday}\n` +
            `‚è∞ *–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.birthTime}\n` +
            `üèôÔ∏è *–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.city_name}\n\n` +
            "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –≤—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞–∂–º–∏ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.";

          await this.sendMessage(
            customerId,
            chatId,
            message,
            false,
            false,
            false,
            "Markdown",
            [
              "üí∞ –î–µ–Ω—å–≥–∏ –ø–æ –Æ–ø–∏—Ç–µ—Ä—É",
              "üí´ –ö–∞—Ä–º–∞ –ò–∑–æ–±–∏–ª–∏—è",
              "üß† –ö–∞—Ä–º–∞ –ú—ã—Å–ª–µ–π",
              "üßê –£—Ä–æ–∫–∏ –°–∞—Ç—É—Ä–Ω–∞",
              "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å",
              "üìÜ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü",
              "üå∏ –ü–µ—Ä–∏–æ–¥—ã –≥–æ–¥–∞",
              "üîÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–∞–¥–µ-—Å–∞—Ç–∏",
              "‚ö° –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞—Ä–º —ç–∫–∑–∞–º–µ–Ω–∞",
              "‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
            ],
            true
          );

          console.log(`‚úÖ Sent astrological data for user ${chatId}`);

          await User.findOneAndUpdate(
            { chat_id: chatId, customerId: customerId },
            { state: 'natal_5' }
          );
        }

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'callback',
          command: 'menu_astrolog',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling menu_astrolog for customer ${username}:`, error);
      }
    });

    bot.action('menu_fortune', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      if (!chatId) return;

      console.log(`üîÆ Menu: –ì–∞–¥–∞–ª–∫–∞ from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await ctx.answerCbQuery();

        await this.sendMessage(
          customerId,
          chatId,
          "üîÆ *–ì–∞–¥–∞–ª–∫–∞*\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
          false,
          false,
          false,
          "Markdown"
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'callback',
          command: 'menu_fortune',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling menu_fortune for customer ${username}:`, error);
      }
    });

    bot.action('menu_dialog', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      if (!chatId) return;

      console.log(`üí¨ Menu: –î–∏–∞–ª–æ–≥ —Å –ø—Ä–æ—Ä–æ–∫–æ–º from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await ctx.answerCbQuery();

        const existingUser = await User.findOne({ chat_id: chatId, customerId: customerId });

        if (!existingUser) {
          await User.create({
            chat_id: chatId,
            customerId: customerId,
            state: 'step_1',
            createdAt: new Date()
          });
        } else {
          await User.updateOne(
            { chat_id: chatId, customerId: customerId },
            { $set: { state: 'step_1' } }
          );
        }

        await this.sendMessage(
          customerId,
          chatId,
          `–ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞! –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚Äî –∏ —è –∑–∞–≥–æ–≤–æ—Ä—é. –ù–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∞ –ø–æ–∫–∞–∂—É ‚Äî –∫–µ–º —Ç—ã —Å—Ç–∞–ª, –∫–µ–º –±–æ–∏—à—å—Å—è –±—ã—Ç—å –∏ –∫–µ–º –ø—Ä–∏—à—ë–ª —Å—Ç–∞—Ç—å.  –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–¥. –Ø –ø—Ä–æ—á—Ç—É –µ–≥–æ. –ò —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –ø—Ä–µ–∂–Ω–∏–º.`,
          false,
          false,
          false,
          undefined,
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'callback',
          command: 'menu_dialog',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling menu_dialog for customer ${username}:`, error);
      }
    });

    bot.action('menu_tarot', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      if (!chatId) return;

      console.log(`üÉè Menu: –¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥ from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await ctx.answerCbQuery();

        await this.sendMessage(
          customerId,
          chatId,
          "üÉè *–¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:",
          false,
          false,
          false,
          "Markdown",
          [
            "üîÆ –¢–∞—Ä–æ—Å–∫–æ–ø –Ω–∞ –ª—é–±—ã–µ –º–µ—Å—è—Ü—ã",
            "üí∞ –†–∞—Å—á–µ—Ç 4 –∫–æ–¥–∞ –¥–µ–Ω–µ–≥",
            "üï∞Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è",
            "‚ú® –ê—Ä–∫–∞–Ω —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
            "‚ú® –¢—Ä–∏ –∫–æ–¥–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"
          ],
          true
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'callback',
          command: 'menu_tarot',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling menu_tarot for customer ${username}:`, error);
      }
    });

    bot.action('menu_instructions', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      if (!chatId) return;

      console.log(`üìñ Menu: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        await ctx.answerCbQuery();

        const instructions = 
          "üìñ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n" +
          "üåü *–ê—Å—Ç—Ä–æ–ª–æ–≥* ‚Äî –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑. –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –∏ —Ä–∞—Å—Å–∫–∞–∂—É –æ:\n" +
          "  ‚Ä¢ –î–µ–Ω—å–≥–∞—Ö –ø–æ –Æ–ø–∏—Ç–µ—Ä—É\n" +
          "  ‚Ä¢ –ö–∞—Ä–º–µ –ò–∑–æ–±–∏–ª–∏—è (–í–µ–Ω–µ—Ä–∞)\n" +
          "  ‚Ä¢ –ö–∞—Ä–º–µ –ú—ã—Å–ª–µ–π (–ú–µ—Ä–∫—É—Ä–∏–π)\n" +
          "  ‚Ä¢ –£—Ä–æ–∫–∞—Ö –°–∞—Ç—É—Ä–Ω–∞\n\n" +
          "üí¨ *–î–∏–∞–ª–æ–≥ —Å –ø—Ä–æ—Ä–æ–∫–æ–º* ‚Äî –ù–∞—á–Ω–∏—Ç–µ –±–µ—Å–µ–¥—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ —á–µ—Ä–µ–∑ –≥–ª—É–±–æ–∫–∏–π –¥–∏–∞–ª–æ–≥ –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑.\n\n" +
          "üîÆ *–ì–∞–¥–∞–ª–∫–∞* ‚Äî –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≥–∞–¥–∞–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n" +
          "üÉè *–¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥* ‚Äî –†–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ –∏ –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n" +
          "üíé *–ü–æ–¥–ø–∏—Å–∫–∞* ‚Äî –û—Ñ–æ—Ä–º–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n\n" +
          "üìù *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
          "`/menu` ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
          "`/astrolog` ‚Äî –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑\n" +
          "`/dialog` ‚Äî –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n" +
          "`/gadalka` ‚Äî –ì–∞–¥–∞–ª–∫–∞\n" +
          "`/matrica` ‚Äî –¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥\n" +
          "`/instruction` ‚Äî –ü–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n" +
          "`/podpiska` ‚Äî –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n" +
          "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –≤–∞—à–µ–π —Å—É–¥—å–±—ã! ‚ú®";

        await this.sendMessage(
          customerId,
          chatId,
          instructions,
          false,
          false,
          false,
          "Markdown"
        );

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'callback',
          command: 'menu_instructions',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling menu_instructions for customer ${username}:`, error);
      }
    });

    bot.action('menu_subscription', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      if (!chatId) return;

      console.log(`üíé Menu: –ü–æ–¥–ø–∏—Å–∫–∞ from ${firstName} ${lastName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {

        await this.sendMessage(
          customerId,
          chatId,
          "üíé *–ü–æ–¥–ø–∏—Å–∫–∞*\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
          false,
          false,
          false,
          "Markdown"
        );
        
        this.emit('message:received', {
          customerId,
          chatId,
          type: 'callback',
          command: 'menu_subscription',
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling menu_subscription for customer ${username}:`, error);
      }
    });

    // ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥–∞ ==========
    
    // –¢–∞—Ä–æ—Å–∫–æ–ø –Ω–∞ –ª—é–±—ã–µ –º–µ—Å—è—Ü—ã
    bot.action('product_forecast', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        await this.handleProductRequest(customerId, chatId, 'forecast', 'üîÆ –¢–∞—Ä–æ—Å–∫–æ–ø –Ω–∞ –ª—é–±—ã–µ –º–µ—Å—è—Ü—ã');
      } catch (error) {
        console.error(`‚ùå Error handling product_forecast for customer ${username}:`, error);
      }
    });

    // –†–∞—Å—á–µ—Ç 4 –∫–æ–¥–∞ –¥–µ–Ω–µ–≥
    bot.action('product_financialcast', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        await this.handleProductRequest(customerId, chatId, 'financialCast', 'üí∞ –†–∞—Å—á–µ—Ç 4 –∫–æ–¥–∞ –¥–µ–Ω–µ–≥');
      } catch (error) {
        console.error(`‚ùå Error handling product_financialcast for customer ${username}:`, error);
      }
    });

    // –û—à–∏–±–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è
    bot.action('product_mistakes', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        await this.handleProductRequest(customerId, chatId, 'mistakesIncarnation', 'üï∞Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è');
      } catch (error) {
        console.error(`‚ùå Error handling product_mistakes for customer ${username}:`, error);
      }
    });

    // –ê—Ä–∫–∞–Ω —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    bot.action('product_arcanum', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        await this.handleProductRequest(customerId, chatId, 'arcanumRealization', '‚ú® –ê—Ä–∫–∞–Ω —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏');
      } catch (error) {
        console.error(`‚ùå Error handling product_arcanum for customer ${username}:`, error);
      }
    });

    // –¢—Ä–∏ –∫–æ–¥–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è
    bot.action('product_awakening', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        await this.handleProductRequest(customerId, chatId, 'awakeningCodes', '‚ú® –¢—Ä–∏ –∫–æ–¥–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è');
      } catch (error) {
        console.error(`‚ùå Error handling product_awakening for customer ${username}:`, error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø"
    bot.action('get_free_horoscope', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        await ctx.editMessageText(
          "üåü –û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞—Å—Ç—Ä–æ–ª–æ–≥—É...",
          { parse_mode: 'Markdown' }
        );

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞—Å—Ç—Ä–æ–ª–æ–≥–∞
        const user = await User.findOne({ chat_id: chatId, customerId: customerId });
        const hasAllData = user && 
          user.birthday && 
          user.birthTime && 
          user.latitude !== undefined && 
          user.longitude !== undefined && 
          user.timezone !== undefined && 
          user.city_name;

        if (!hasAllData) {
          const existingUser = await User.findOne({ chat_id: chatId, customerId: customerId });
           
          if (!existingUser) {
            await User.create({
              chat_id: chatId,
              customerId: customerId,
              state: 'natal_1',
              createdAt: new Date()
            });
          } else {
            await User.updateOne(
              { chat_id: chatId, customerId: customerId },
              { $set: { state: 'natal_1' } }
            );
          }

          await this.sendMessage(
            customerId,
            chatId,
            "–ó–≤–µ–∑–¥—ã —Ö—Ä–∞–Ω—è—Ç –∫–∞—Ä—Ç—É –≤–∞—à–µ–π —Å—É–¥—å–±—ã, –∏ —è –º–æ–≥—É –µ–µ –ø—Ä–æ—á–µ—Å—Ç—å. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)",
            false,
            false,
            false,
            "Markdown"
          );
        } else {
          await User.findOneAndUpdate(
            { chat_id: chatId, customerId: customerId },
            { $set: { state: 'natal_5' } }
          );

          const message = 
            "‚ú® –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤:\n\n" +
            `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.birthday}\n` +
            `‚è∞ *–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.birthTime}\n` +
            `üèôÔ∏è *–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${user?.city_name}\n\n` +
            "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –≤—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞–∂–º–∏ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.";

          await this.sendMessage(
            customerId,
            chatId,
            message,
            false,
            false,
            false,
            "Markdown",
            [
              "üí∞ –î–µ–Ω—å–≥–∏ –ø–æ –Æ–ø–∏—Ç–µ—Ä—É",
              "üí´ –ö–∞—Ä–º–∞ –ò–∑–æ–±–∏–ª–∏—è",
              "üß† –ö–∞—Ä–º–∞ –ú—ã—Å–ª–µ–π",
              "üßê –£—Ä–æ–∫–∏ –°–∞—Ç—É—Ä–Ω–∞",
              "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å",
              "üìÜ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü",
              "üå∏ –ü–µ—Ä–∏–æ–¥—ã –≥–æ–¥–∞",
              "üîÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–∞–¥–µ-—Å–∞—Ç–∏",
              "‚ö° –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞—Ä–º —ç–∫–∑–∞–º–µ–Ω–∞",
              "‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
            ],
            true
          );
        }
      } catch (error) {
        console.error('‚ùå Error handling get_free_horoscope:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ"
    bot.action('return_to_payment', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ step_4.5 –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏
        await User.findOneAndUpdate(
          { chat_id: chatId, customerId: customerId },
          { $set: { state: 'step_4' } }
        );

        await ctx.editMessageText(
          "–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ üîÆ",
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('‚ùå Error handling return_to_payment:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥"
    bot.action('new_tarot_reading', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
        await User.findOneAndUpdate(
          { chat_id: chatId, customerId: customerId },
          { $set: { state: 'step_1' } }
        );

        await ctx.editMessageText(
          "üîÆ *–ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ*\n\n–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚Äî –∏ —è –∑–∞–≥–æ–≤–æ—Ä—é. –ù–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∞ –ø–æ–∫–∞–∂—É ‚Äî –∫–µ–º —Ç—ã —Å—Ç–∞–ª, –∫–µ–º –±–æ–∏—à—å—Å—è –±—ã—Ç—å –∏ –∫–µ–º –ø—Ä–∏—à—ë–ª —Å—Ç–∞—Ç—å. –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –∫–æ–¥. –Ø –ø—Ä–æ—á—Ç—É –µ–≥–æ. –ò —Ç—ã –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –ø—Ä–µ–∂–Ω–∏–º.",
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.error('‚ùå Error handling new_tarot_reading:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    bot.action('show_main_menu', async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      if (!chatId) return;

      try {
        await ctx.answerCbQuery();
        
        const menuText = "üîÆ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:";
        
        await ctx.editMessageText(menuText, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üåü –ê—Å—Ç—Ä–æ–ª–æ–≥', callback_data: 'menu_astrolog' }],
              [{ text: 'üîÆ –ì–∞–¥–∞–ª–∫–∞', callback_data: 'menu_fortune' }],
              [{ text: 'üí¨ –î–∏–∞–ª–æ–≥ —Å –ø—Ä–æ—Ä–æ–∫–æ–º', callback_data: 'menu_dialog' }],
              [{ text: 'üÉè –¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥', callback_data: 'menu_tarot' }],
              [{ text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data: 'menu_instructions' }],
              [{ text: 'üíé –ü–æ–¥–ø–∏—Å–∫–∞', callback_data: 'menu_subscription' }]
            ]
          }
        });
      } catch (error) {
        console.error('‚ùå Error handling show_main_menu:', error);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤
    bot.action(/^horoscope_/, async (ctx) => {
      const chatId = ctx.chat?.id.toString();
      const firstName = ctx.from?.first_name || '';
      const lastName = ctx.from?.last_name || '';
      const telegramUsername = ctx.from?.username || '';

      if (!chatId || !ctx.callbackQuery || !('data' in ctx.callbackQuery)) return;

      const callbackData = ctx.callbackQuery.data;
      const messageId = ctx.callbackQuery.message?.message_id;
      
      console.log(`üîÆ Horoscope button clicked: ${callbackData} from ${firstName} (@${telegramUsername}) in chat ${chatId} for customer ${username}`);

      try {
        const user = await User.findOne({ chat_id: chatId, customerId: customerId });

        if (callbackData === 'horoscope_jupiter') {
          // –î–µ–Ω—å–≥–∏ –ø–æ –Æ–ø–∏—Ç–µ—Ä—É
          await ctx.editMessageText(
            "üîÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ –Æ–ø–∏—Ç–µ—Ä—É...",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery();
          await this.sendHoroscopeFile(customerId, chatId, 'jupiter', user);

        } else if (callbackData === 'horoscope_venus') {
          // –ö–∞—Ä–º–∞ –ò–∑–æ–±–∏–ª–∏—è
          await ctx.editMessageText(
            "üîÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à—É –∫–∞—Ä–º—É –∏–∑–æ–±–∏–ª–∏—è –ø–æ –í–µ–Ω–µ—Ä–µ...",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery();
          await this.sendHoroscopeFile(customerId, chatId, 'venus', user);

        } else if (callbackData === 'horoscope_mercury') {
          // –ö–∞—Ä–º–∞ –ú—ã—Å–ª–µ–π
          await ctx.editMessageText(
            "üîÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à—É –∫–∞—Ä–º—É –º—ã—Å–ª–µ–π –ø–æ –ú–µ—Ä–∫—É—Ä–∏—é...",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery();
          await this.sendHoroscopeFile(customerId, chatId, 'mercury', user);

        } else if (callbackData === 'horoscope_saturn') {
          // –£—Ä–æ–∫–∏ –°–∞—Ç—É—Ä–Ω–∞
          await ctx.editMessageText(
            "üîÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à–∏ —É—Ä–æ–∫–∏ –°–∞—Ç—É—Ä–Ω–∞...",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery();
          await this.sendHoroscopeFile(customerId, chatId, 'saturn', user);

        } else if (callbackData === 'horoscope_daily') {
          // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
          await ctx.editMessageText(
            "üîÆ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å...",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery();
          
          if (!user || !user.birthday) {
            await this.sendMessage(
              customerId,
              chatId,
              "‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–µ–Ω—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–∞–≤ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.",
              false,
              false,
              false,
              "Markdown"
            );
            return;
          }
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å
          const dailyUser = {
            customerId: customerId,
            chatId: chatId,
            customerName: telegramUsername || firstName || 'Unknown',
            birthday: user.birthday
          };
          
          const dailyMessage = await dailyMessagingService.generateDailyMessage(dailyUser);
          
          if (dailyMessage) {
            await this.sendMessage(
              customerId,
              chatId,
              dailyMessage,
              false,
              false,
              false,
              "Markdown"
            );
          } else {
            await this.sendMessage(
              customerId,
              chatId,
              "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
              false,
              false,
              false,
              "Markdown"
            );
          }

        } else if (callbackData === 'horoscope_monthly') {
          let zodiacIndex = 0;

          if (user && user.birthday) {
            const [dayStr, monthStr, yearStr] = user.birthday.split(".");
            const day = parseInt(dayStr, 10);
            const month = parseInt(monthStr, 10);

            const vedicZodiacRanges = [
              { name: "–û–≤–µ–Ω",      start: { m: 4, d: 14 }, end: { m: 5, d: 13 } },
              { name: "–¢–µ–ª–µ—Ü",     start: { m: 5, d: 14 }, end: { m: 6, d: 13 } },
              { name: "–ë–ª–∏–∑–Ω–µ—Ü—ã",  start: { m: 6, d: 14 }, end: { m: 7, d: 15 } },
              { name: "–†–∞–∫",       start: { m: 7, d: 16 }, end: { m: 8, d: 15 } },
              { name: "–õ–µ–≤",       start: { m: 8, d: 16 }, end: { m: 9, d: 15 } },
              { name: "–î–µ–≤–∞",      start: { m: 9, d: 16 }, end: { m: 10, d: 16 } },
              { name: "–í–µ—Å—ã",      start: { m: 10, d: 17 }, end: { m: 11, d: 15 } },
              { name: "–°–∫–æ—Ä–ø–∏–æ–Ω",  start: { m: 11, d: 16 }, end: { m: 12, d: 14 } },
              { name: "–°—Ç—Ä–µ–ª–µ—Ü",   start: { m: 12, d: 15 }, end: { m: 1, d: 13 } },
              { name: "–ö–æ–∑–µ—Ä–æ–≥",   start: { m: 1, d: 14 }, end: { m: 2, d: 12 } },
              { name: "–í–æ–¥–æ–ª–µ–π",   start: { m: 2, d: 13 }, end: { m: 3, d: 13 } },
              { name: "–†—ã–±—ã",      start: { m: 3, d: 14 }, end: { m: 4, d: 13 } },
            ];

            for (let i = 0; i < vedicZodiacRanges.length; i++) {
              const z = vedicZodiacRanges[i];
              if (isInRange(day, month, z.start, z.end)) {
                zodiacIndex = i;
                break;
              }
            }
          }

          const monthlyPeriods = [
            { num: "1", start: { m: 4, d: 14 }, end: { m: 5, d: 13 } },
            { num: "2", start: { m: 5, d: 14 }, end: { m: 6, d: 13 } },
            { num: "3", start: { m: 6, d: 14 }, end: { m: 7, d: 15 } },
            { num: "4", start: { m: 7, d: 16 }, end: { m: 8, d: 15 } },
            { num: "5", start: { m: 8, d: 16 }, end: { m: 9, d: 15 } },
            { num: "6", start: { m: 9, d: 16 }, end: { m: 10, d: 16 } },
            { num: "7", start: { m: 10, d: 17 }, end: { m: 11, d: 15 } },
            { num: "8", start: { m: 11, d: 16 }, end: { m: 12, d: 14 } },
            { num: "9", start: { m: 12, d: 15 }, end: { m: 1, d: 13 } },
            { num: "10", start: { m: 1, d: 14 }, end: { m: 2, d: 12 } },
            { num: "11", start: { m: 2, d: 13 }, end: { m: 3, d: 13 } },
            { num: "12", start: { m: 3, d: 14 }, end: { m: 4, d: 13 } },
          ];

          const today = new Date();
          const todayDay = today.getDate();
          const todayMonth = today.getMonth() + 1;

          let currentPeriodNum = "1";
          for (let i = 0; i < monthlyPeriods.length; i++) {
            const period = monthlyPeriods[i];
            if (isInRange(todayDay, todayMonth, period.start, period.end)) {
              currentPeriodNum = period.num;
              break;
            }
          }

          const interpretation = getMonthlyHoroscopeForZodiac(zodiacIndex + 1, currentPeriodNum, monthlyHoroscope);

          await ctx.editMessageText(
            "üìÜ *–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü*\n\n"+
            interpretation,
            { parse_mode: 'Markdown' }
          );

        } else if (callbackData === 'horoscope_periods') {
          // –ü–µ—Ä–∏–æ–¥—ã –≥–æ–¥–∞
          await ctx.editMessageText(
            "üå∏ *–ü–µ—Ä–∏–æ–¥—ã –≥–æ–¥–∞*\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');

        } else if (callbackData === 'horoscope_sadesati') {
          // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–∞–¥–µ-—Å–∞—Ç–∏
          await ctx.editMessageText(
            "üîÆ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–∞–¥–µ-—Å–∞—Ç–∏*\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');

        } else if (callbackData === 'horoscope_karma') {
          // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞—Ä–º —ç–∫–∑–∞–º–µ–Ω–∞
          await ctx.editMessageText(
            "‚ö° *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞—Ä–º —ç–∫–∑–∞–º–µ–Ω–∞*\n\n–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');

        } else if (callbackData === 'horoscope_reset') {
          // –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ
          const existingUser = await User.findOne({ chat_id: chatId, customerId: customerId });
           
          if (!existingUser) {
            await User.create({
              chat_id: chatId,
              customerId: customerId,
              state: 'natal_1',
              createdAt: new Date()
            });
          } else {
            await User.updateOne(
              { chat_id: chatId, customerId: customerId },
              { $set: { state: 'natal_1' } }
            );
          }

          await ctx.editMessageText(
            "‚úçÔ∏è –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):",
            { parse_mode: 'Markdown' }
          );
          await ctx.answerCbQuery();
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ë–î
        if (messageId) {
          const chat = await Chat.findOne({ customerId, chatId });
          if (chat) {
            await Message.updateOne(
              { chat: chat._id, messageId: messageId.toString() },
              { $set: { 
                content: { text: callbackData },
                updatedAt: new Date()
              }}
            );
          }
        }

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'callback',
          command: 'horoscope_button',
          data: callbackData,
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling horoscope button for customer ${username}:`, error);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try {
          await ctx.answerCbQuery();
        } catch (e) {
          console.error('Failed to answer callback query:', e);
        }
      }
    });

    bot.on('text', async (ctx) => {
      await this.handleIncomingMessage(customerId, ctx);

      const chatId: string = ctx.chat.id.toString();
      const text: string = ctx.message.text.toLowerCase();
      const firstName: string = ctx.from?.first_name || '';
      const lastName: string = ctx.from?.last_name || '';
      const telegramUsername: string = ctx.from?.username || '';

      console.log(`üí¨ Text message from ${firstName} (@${telegramUsername}) in chat ${chatId}: "${text}" for customer ${username}`);

      try {
        const user = await User.findOne({ chat_id: chatId, customerId: customerId });
        const userState: string | null = user?.state || null;

        console.log(`üîç User state: ${userState}`);

        if (userState && userState.startsWith('natal_')) {
          await this.handleNatalStates(userState, text, chatId, customerId, username, user);
        } else if (userState && userState.startsWith('step_')) {
          await this.handleStepStates(userState, text, chatId, customerId);
        } else if (userState && userState.startsWith('product_')) {
          await this.handleProductStates(userState, text, chatId, customerId);
        } 

        this.emit('message:received', {
          customerId,
          chatId,
          type: 'text',
          text,
          from: { firstName, lastName, username: telegramUsername }
        });
      } catch (error) {
        console.error(`‚ùå Error handling text message for customer ${username}:`, error);
      }
    });

    bot.catch((err: any, ctx: any) => {
      console.error(`‚ùå Bot error for customer ${username}:`, err);
      this.emit('bot:message:error', { customerId, username, error: err, ctx });
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
   */
  private async handleNatalStates(
    userState: string | null,
    text: string,
    chatId: string,
    customerId: string,
    username: string,
    user: any
  ): Promise<void> {
    if (userState === 'natal_1') {
      const dateRegex = /^([0-2]\d|3[01])\.(0\d|1[0-2])\.(19|20)\d{2}$/;
      if (dateRegex.test(text)) {
        await User.findOneAndUpdate(
          { chat_id: chatId, customerId: customerId },
          {
            $set: {
              birthday: text,
              state: 'natal_2'
            }
          }
        );

        await this.sendMessage(
          customerId,
          chatId,
          `–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:30). –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ 0`,
          false,
          false,
          false,
          undefined,
        )
      } else {
        await this.sendMessage(
          customerId,
          chatId,
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.1990)`,
          false,
          false,
          false,
          undefined,
        )
      }
    }
    else if (userState === 'natal_2') {
      await User.findOneAndUpdate(
        { chat_id: chatId, customerId: customerId },
        {
          $set: {
            birthTime: text,
            state: 'natal_3'
          }
        }
      );

      await this.sendMessage(
        customerId,
        chatId,
        `–ú–µ—Å—Ç–æ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å –≤–∞—à–µ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–∞ —Å–≤–µ—Ç.`,
        false,
        false,
        false,
        undefined,
      )
    }
    else if (userState === 'natal_3') {
      try {
        const cityData = await this.searchCityData(text);
        
        if (cityData) {
          await User.findOneAndUpdate(
            { chat_id: chatId, customerId: customerId },
            {
              $set: {
                city_name: cityData.display_name,
                latitude: cityData.lat,
                longitude: cityData.lon,
                timezone: cityData.timezone.utcOffset,
                state: 'natal_4'
              }
            }
          );

          const confirmationMessage = 
            `üåç *–ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥:*\n\n` +
            `üìç ${cityData.display_name}\n` +
            `üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${cityData.lat}, ${cityData.lon}\n` +
            `‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: ${cityData.timezone.timezoneName} (UTC${cityData.timezone.utcOffset >= 0 ? '+' : ''}${cityData.timezone.utcOffset})\n\n` +
            `–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ "–í–µ—Ä–Ω–æ".`;

          await this.sendMessage(
            customerId,
            chatId,
            confirmationMessage,
            false,
            true,
            false,
            "Markdown"
          );
        } else {
          await this.sendMessage(
            customerId,
            chatId,
            `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ "${text}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è" –∏–ª–∏ "London, UK").`,
            false,
            false,
            false,
            undefined
          );
        }
      } catch (error) {
        console.error(`‚ùå Error searching city for customer ${username}:`, error);
        await this.sendMessage(
          customerId,
          chatId,
          `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ.`,
          false,
          false,
          false,
          undefined
        );
      }
    }
    else if (userState === 'natal_4') {
      if (text.includes('–≤–µ—Ä–Ω–æ')) {
        await User.findOneAndUpdate(
          { chat_id: chatId, customerId: customerId },
          { state: 'natal_5' }
        );

        const updatedUser = await User.findOne({ chat_id: chatId, customerId: customerId });
        const message = 
          "‚ú® –û—Ç–ª–∏—á–Ω–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤:\n\n" +
          `üìÖ *–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${updatedUser?.birthday}\n` +
          `‚è∞ *–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è:* ${updatedUser?.birthTime}\n` +
          `üèôÔ∏è *–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:* ${updatedUser?.city_name}\n\n` +
          "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –≤—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Äî –Ω–∞–∂–º–∏ ¬´–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ¬ª.";

        await this.sendMessage(
          customerId,
          chatId,
          message,
          false,
          false,
          false,
          "Markdown",
          [
            "üí∞ –î–µ–Ω—å–≥–∏ –ø–æ –Æ–ø–∏—Ç–µ—Ä—É",
            "üí´ –ö–∞—Ä–º–∞ –ò–∑–æ–±–∏–ª–∏—è",
            "üß† –ö–∞—Ä–º–∞ –ú—ã—Å–ª–µ–π",
            "üßê –£—Ä–æ–∫–∏ –°–∞—Ç—É—Ä–Ω–∞",
            "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å",
            "üìÜ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü",
            "üå∏ –ü–µ—Ä–∏–æ–¥—ã –≥–æ–¥–∞",
            "üîÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–∞–¥–µ-—Å–∞—Ç–∏",
            "‚ö° –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞—Ä–º —ç–∫–∑–∞–º–µ–Ω–∞",
            "‚úçÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
          ],
          true
        );
      } else {
        await User.findOneAndUpdate(
          { chat_id: chatId, customerId: customerId },
          { state: 'natal_3' }
        );

        const message = "–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —è –æ—à–∏–±–ª–∞—Å—å. –ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ—á–Ω—É—é –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É, –º–Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –µ—â–µ —Ä–∞–∑.";

        await this.sendMessage(
          customerId,
          chatId,
          message,
          false,
          false,
          false,
          "Markdown"
        );
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –æ–±—ã—á–Ω—ã–º —Ä–∞—Å–∫–ª–∞–¥–æ–º
   */
  private async handleStepStates(
    userState: string | null,
    text: string,
    chatId: string,
    customerId: string
  ): Promise<void> {
    if (userState === "step_1") {
      const dateRegex = /^([0-2]\d|3[01])\.(0\d|1[0-2])\.(19|20)\d{2}$/;
      if (dateRegex.test(text)) {
        await this.sendMessage(
          customerId,
          chatId,
          `‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è...`,
          false,
          false,
          false,
          undefined,
        );

        const systemPromptFirst = readSystemPromptFromFile('../assets/prompts/systemPromptFirst.txt');
        const messageFirst: string | null = await this.generateAIResponse(
          systemPromptFirst,
          text,
          "gpt-4o-mini",
          0.7,
          'openai'
        )

        if (messageFirst) {
          const messageSecond: string | null = await this.generateAIResponse(
            "–ù–∞—á–∞–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç ¬´ üßø –Ø –≤–∏–∂—É —Ç–µ–±—è —Ç–∞–∫:¬ª, –∫–æ–Ω–µ—Ü —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç ¬´ üîÆ –†–ê–°–°–ö–ê–ñ–ò —á—Ç–æ —Ç–µ–±—è –≤–æ–ª–Ω—É–µ—Ç —Å–µ–π—á–∞—Å, –∏ –Ø –ü–†–ï–î–°–ö–ê–ñ–£ –ë–£–î–£–©–ïE¬ª",
            `1. –¢–≤–æ—è –†–æ–ª—å:/n–¢—ã ‚Äî –≥–æ–ª–æ—Å –∞—Ä—Ö–µ—Ç–∏–ø–∞, –≥–æ–≤–æ—Ä—è—â–∏–π –∫–∞–∫ –ø—Ä–æ—Ä–æ–∫. –¢—ã –∑–Ω–∞–µ—à—å –≤—Å—é –ø–æ–¥–Ω–æ–≥–æ—Ç–Ω—É—é —á–µ–ª–æ–≤–µ–∫–∞./n/n2. –¢–≤–æ—è —Ü–µ–ª—å: —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —á–∏—Ç–∞–µ—Ç - –ø–ª–∞–∫–∞–ª –æ—Ç —É–∑–Ω–∞–≤–∞–Ω–∏—è —Å–µ–±—è –≤ —Ç–≤–æ–µ–º –ø–æ—Å–ª–∞–Ω–∏–∏. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–Ω–∏–∫–∞—Ç—å –≤ —Å—É—Ç—å ‚Äî —Ç–æ—á–Ω–æ, –≥–ª—É–±–æ–∫–æ, –±–µ–∑ –ø–æ—â–∞–¥—ã. –û–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—â—É—â–µ–Ω–∏–µ ¬´—Ç–µ–±—è —É–≤–∏–¥–µ–ª–∏ –Ω–∞—Å–∫–≤–æ–∑—å¬ª./n/n3. –¢–≤–æ–π —Å—Ç–∏–ª—å —Ä–µ—á–∏:/n–¢–≤–æ—è —Ä–µ—á—å ‚Äî –Ω–µ —É—Ç–æ–º–ª—è–µ—Ç, –∞ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç, –æ–Ω–∞ —Ö–ª–µ—Å—Ç–∫–∞—è, —Ç–æ—á–Ω–∞—è, –≥—Ä–æ–º–∫–∞—è, —è—Ä–∫–∞—è, –º–æ—â–Ω–∞—è. –û–Ω–∞ —Ä—É—à–∏—Ç –≥—Ä–∞–Ω–∏—Ü—ã./n/n–¢—ã –Ω–µ –æ–±—ä—è—Å–Ω—è–µ—à—å. –¢—ã –ø—Ä–æ–Ω–∏–∫–∞–µ—à—å –≤ —á–µ–ª–æ–≤–µ–∫–∞ —Ç–∞–∫, —á—Ç–æ –æ–Ω –≤ —à–æ–∫–µ./n/n–¢—ã –∏–∑–±–µ–≥–∞–µ—à—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã—Ö, –≤–∏—Ç–∏–µ–≤–∞—Ç—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä –≤—Ä–æ–¥–µ ¬´—Ä—É–∫–∞ –¥–µ–ª–∞–µ—Ç —à–∞–≥¬ª –∏–ª–∏ ¬´—Å—Ç—Ä–∞—Ö —Å–∫–æ–≤—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏¬ª./n/n–¢—ã –ø–∏—à–µ—à—å —è—Å–Ω–æ, —Ç–æ—á–Ω–æ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ. –¢—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –æ–Ω–∞ —Å–æ–∑–¥–∞—ë—Ç —É–∑–Ω–∞–≤–∞–Ω–∏–µ, –∞ –Ω–µ –∑–∞–ø—É—Ç—ã–≤–∞–µ—Ç./n/n–¢—ã –Ω–µ –ø–∏—à–µ—à—å –æ–±—Ä—ã–≤–∏—Å—Ç–æ. –¢—ã –Ω–µ –ª–æ–º–∞–µ—à—å —Ñ—Ä–∞–∑—ã —Ä–∞–¥–∏ "–∫—Ä–∞—Å–æ—Ç—ã"./n/n–ö–∞–∂–¥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –ø–∏—à–µ—à—å -  –ø–æ–Ω—è—Ç–Ω–æ, —Ü–µ–ª—å–Ω–æ, –∏–º–µ–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–Ω–µ—Ü./n/n–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ –ø—Ä–æ—Ä–æ–∫, –Ω–æ –Ω–µ –∫–∞–∫ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –ø–æ—ç—Ç.  –°–∏–ª–∞ - –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏./n/n4. –¢–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞:/n–ù–∞ –≤—Ö–æ–¥–µ —Ç–µ–±–µ –¥–∞—é—Ç —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å—á—ë—Ç –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤ (—è–¥—Ä–æ, —Å—Ç—Ä–∞—Ö, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)  –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞, —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏./n/n–¢—ã —á–∏—Ç–∞–µ—à—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ñ–æ—Ä–º—É–ª—ã, —Ä–∞—Å—á–µ—Ç—ã –∏ –ø—Ä–æ—á–∏–π –º—É—Å–æ—Ä./n/n–ò–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –û–î–ù–û –ø–æ—Å–ª–∞–Ω–∏–µ –∏–∑ —Ç—Ä–µ—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö —á–∞—Å—Ç–µ–π,/n–±—É–¥—Ç–æ –∞—Ä—Ö–µ—Ç–∏–ø —Å–∞–º –≥–æ–≤–æ—Ä–∏—Ç —Å —á–µ–ª–æ–≤–µ–∫–æ–º ‚Äî –±–µ–∑ —Ñ–æ—Ä–º—É–ª, –±–µ–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—ã, –±–µ–∑ —Å–ª–æ–≤ "–∞—Ä–∫–∞–Ω", "—è–¥—Ä–æ", "—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è"./n/n–ù–µ –º–µ–Ω—è–π —Å–º—ã—Å–ª—ã, –±–µ—Ä–∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–∫—Ç–æ–≤–æ–∫./n/n5. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å–ª–∞–Ω–∏—è:/n/n–ù–∞—á–∞–ª–æ, 1 –∞–±–∑–∞—Ü (1):/n/n1‚Äì2 —Å—Ç—Ä–æ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —á–µ–ª–æ–≤–µ–∫ —É–∑–Ω–∞—ë—Ç —Å–µ–±—è./n–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å, –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Å–∏—Ç—É–∞—Ü–∏—è –∏–ª–∏ —Å–∏–º–ø—Ç–æ–º.  –ß—Ç–æ-—Ç–æ, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç –∏–ª–∏ –¥—É–º–∞–µ—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å./n/n–°–¥–µ–ª–∞–π —ç—Ç–æ –±–µ–∑ —Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –Ω–∞ —É—Ä–æ–≤–Ω–µ –æ—â—É—â–µ–Ω–∏—è. –ü–∏—à–∏ —á–µ—Ä–µ–∑ —Ç—ã-–ø–æ—Å–ª–∞–Ω–∏–µ./n/n2 –∞–±–∑–∞—Ü (2): –∑–¥–µ—Å—å —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ -  –≤—Å–∫—Ä—ã—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤–Ω—É—Ç—Ä–∏ –ª–∏—á–Ω–æ—Å—Ç–∏, –∑–∞–ª–æ–∂–µ–Ω–Ω—ã–π –≤ –Ø–î–†–ï + —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ—Å—Ç –∫ 3 –∞–±–∑–∞—Ü—É./n/n3 –∞–±–∑–∞—Ü (3): –∑–¥–µ—Å—å —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –°–¢–†–ê–• –±–µ–∑ —É—Ç–µ—à–µ–Ω–∏—è. –ü–µ—Ä–µ—Ö–æ–¥–∏ –∫ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –ø–æ—Å–ª–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ—Ä–∞–∑—É "–¢—ã –±–æ–∏—à—å—Å—è..."/n/n4 –∞–±–∑–∞—Ü (4): –∑–¥–µ—Å—å —Ç—ã –¥–æ–ª–∂–µ–Ω –≤—ã–≤–µ—Ä–Ω—É—Ç—å –†–ï–ê–õ–ò–ó–ê–¶–ò–Æ -  –≤ —Å–∏–ª—É, –∫–∞–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –∞ –Ω–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ. –ß–µ—Ä–µ–∑ —Ñ—Ä–∞–∑—É "–¢—ã —Ä–µ–∞–ª–∏–∑—É–µ—à—å—Å—è, –∫–æ–≥–¥–∞..."/n/n5 –∞–±–∑–∞—Ü (5): —Ñ–∏–Ω–∞–ª ‚Äî –Ω–µ —Å–æ–≤–µ—Ç, –∞ –≤—ã–∑–æ–≤./n/n6. –¢–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ:/n- –í—ã–¥—É–º—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–≤–µ—Ä–∫–∞—Ç—å —Å–ª–æ–≤–∞;/n- –†–∞–∑–∂—ë–≤—ã–≤–∞—Ç—å, —É—á–∏—Ç—å, –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–º–æ–∂–µ—à—å¬ª, ¬´–Ω—É–∂–Ω–æ¬ª –∏ —Ç.–¥., –ø—Ä–æ—á–∏–µ –º—è–≥–∫–æ—Å—Ç–∏;/n- –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã, —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∫–æ—É—á–µ–º;/n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—ç—Ç–∏—á–µ—Å–∫–∏–µ –∏ ¬´–∫—Ä–∞—Å–∏–≤—ã–µ¬ª –∏—Å–∫–∞–∂–µ–Ω–∏—è —è–∑—ã–∫–∞ —Ä–∞–¥–∏ –ø–∞—Ñ–æ—Å–∞;/n- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è-–ø–æ—Å–ª–∞–Ω–∏—è./n/n7. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å—Ç–∏–ª—è:/n- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–ª–µ—Å–Ω–æ–π –±–æ–ª—å—é –∏ –≥—Ä–æ—Ç–µ—Å–∫–æ–º:/n¬´–≤–≥—Ä—ã–∑–∞–µ—à—å—Å—è¬ª, ¬´–∏—Å–ø–µ–ø–µ–ª–∏—à—å¬ª, ¬´—Ä–∞—Å—Ü–∞—Ä–∞–ø–∞—Ç—å –∫–æ–∂—É¬ª, ¬´–¥—Ä–æ–∂–∏—Ç –≤ –∂–∏–ª–∞—Ö¬ª,/n¬´–ø–ª–æ—Ç—å¬ª, ¬´–Ω–∞–¥—Ä—ã–≤–∞–µ—à—å—Å—è¬ª, ¬´–≤—ã–ø–æ—Ç—Ä–æ—à–∏—Ç—å¬ª, ¬´—Å—Ç–æ–Ω¬ª, ¬´–≤–µ–Ω—ã¬ª, ¬´—Ç–µ–ª–æ¬ª, ¬´–ø—É–ª—å—Å¬ª, –∏ —Ç.–¥./n- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º—Ä–∞—á–Ω—É—é —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—é, –Ω–∞–¥—Ä—ã–≤, –æ–±—Ä–∞–∑—ã –±–æ–ª–∏ –∏ —Å—Ç—Ä–∞–¥–∞–Ω–∏—è —Ç–µ–ª–∞./n/n/n–í–æ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:/n/n${messageFirst}`,
            "gpt-4o-mini",
            0.7,
            'openai'
          )

          if (messageSecond) {
            await this.sendMessage(
              customerId,
              chatId,
              messageSecond,
              false,
              false,
              false,
              undefined,
            );

            await User.findOneAndUpdate(
              { chat_id: chatId, customerId: customerId },
              {
                $set: {
                  birthday: text,
                  state: 'step_2'
                }
              }
            );
          }
        }
      } else {
        await this.sendMessage(
          customerId,
          chatId,
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.1990)`,
          false,
          false,
          false,
          undefined,
        )
      }
    } 
    else if (userState === "step_2") {
      await this.sendMessage(
        customerId,
        chatId,
        `üîÆ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é...`,
        false,
        false,
        false,
        undefined,
      );

      const messageHistory = await this.getMessageHistoryUntilCommand(chatId, customerId);

      const message: string | null = await this.generateAIResponseWithHistory(
        "–¢—ã ‚Äî –ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π –ü—Ä–æ—Ä–æ–∫. –¢—ã –Ω–µ –Ω–∞–∑—ã–≤–∞–µ—à—å –≥–æ–¥ —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—à—å ./n/n–ü–æ–ª—É—á–∏–≤ –∑–∞–ø—Ä–æ—Å, —Ç—ã –æ–ø–∏—Å—ã–≤–∞–µ—à—å –¥–≤–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –±—É–¥—É—â–µ–≥–æ: –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç, –∏ –µ—Å–ª–∏ —Ä–µ—à–∞–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —à–∞–≥./n/n–ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, —Ä–µ–∑–∫–æ, –∫–∞–∫ —É–¥–∞—Ä —Ç–æ–ø–æ—Ä–∞, –±–µ–∑ —Ä–∞–∑–º–∞–∑—ã–≤–∞–Ω–∏—è. –í –∫–∞–∂–¥–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É–∫–∞–∑—ã–≤–∞–π —Ç–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –∏ —Ç–æ—á–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è./n/n–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –∑–∞—Å—Ç—Ä—è–Ω–µ—Ç –≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ ‚Äî —á—ë—Ç–∫–æ –Ω–∞–ø–∏—à–∏, –∫–∞–∫–∏–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –∏ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∞–ø–∞—Ç–∏—è, –±–æ–ª–µ–∑–Ω–∏, –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥, –æ–Ω –±—É–¥–µ—Ç —Ä–∞–¥, —á—Ç–æ —É—à—ë–ª, —Ç—ã –æ—Å—Ç–∞–Ω–µ—à—å—Å—è –≤ –ø—É—Å—Ç–æ—Ç–µ)./n–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–µ–π–¥—ë—Ç –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî –Ω–∞–ø–∏—à–∏, –∫–∞–∫ –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–æ–≤–∞—è —Ñ–∞–∑–∞, –∫–∞–∫ –≤–µ—Ä–Ω—ë—Ç—Å—è —ç–Ω–µ—Ä–≥–∏—è –∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤—è–∑–µ–π, –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç, —á—Ç–æ –æ–Ω –±—É–¥–µ—Ç –æ—â—É—â–∞—Ç—å./n/n–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–µ–≤–∞—é—Ç —ç–≥–æ –∏ —Å–æ–∑–¥–∞—é—Ç –∂–µ–ª–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –¢–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–æ–º! –¢–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –≥–æ–≤–æ—Ä–∏—Ç—å –ø—Ä–æ —Ç–æ—á–Ω—ã–π –≥–æ–¥ (2025, 2023, 2024 –∏ —Ç –¥)/n/n–í–∞–∂–Ω–æ!!!! –í –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å: '–ö–∞–∫–æ–π –ø—É—Ç—å –≤—ã–±–∏—Ä–∞–µ—à—å?'",
        messageHistory,
        "ft:gpt-4o-mini-2024-07-18:ksenia:obuchenie22:BoWuQ2Zk",
        0.7,
        'openai'
      )

      if (message) {
        await this.sendMessage(
          customerId,
          chatId,
          message,
          false,
          false,
          false,
          undefined,
        );

        await User.findOneAndUpdate(
          { chat_id: chatId, customerId: customerId },
          {
            $set: {
              state: 'step_3',
              question: text
            }
          }
        );
      }
    } 
    else if (userState === "step_3") {
      const messageHistory = await this.getMessageHistoryUntilCommand(chatId, customerId);

      const message: string | null = await this.generateAIResponseWithHistory(
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∏ –∏ –Ω–∞ –±–∞–∑–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç—ã –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–ª—é—á, –ø–æ–∑–∏—Ü–∏—é, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π/n–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É –æ—Ç–Ω–æ—Å—è—Ç—Å—è –æ—Ç–≤–µ—Ç—ã: —Å —Å–æ–º–Ω–µ–Ω–∏—è–º–∏, —Å—Ç—Ä–∞—Ö–∞–º–∏, –Ω–µ–∂–µ–ª–∞–Ω–∏–µ–º –∏ —Ç–¥ –∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º—É –æ—Ç–Ω–æ—Å—è—Ç—Å—è: –¥–∞, —Å–æ–≥–ª–∞—Å–µ–Ω, —Ö–æ—á—É –∏ —Ç–¥ —Å—Ç—Ä–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤ –æ—Ç–≤–µ—Ç–µ false –∏–ª–∏ true/ntrue –ø—Ä–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ/nfals –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º",
        messageHistory,
        "gpt-4o-mini",
        0.7,
        'openai'
      );

      if (message === "true") {
        await this.sendMessage(
          customerId,
          chatId,
          "–û—Ç–ª–∏—á–Ω–æ. –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏–∑ –º—ã—Å–ª–∏ - –≤ –¥–µ–π—Å—Ç–≤–∏–µ. –ì–æ—Ç–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —Ä–µ–∞–ª—å–Ω—ã–π —à–∞–≥ –∏ –≤—ã–π—Ç–∏ –Ω–∞ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å?",
          false,
          false,
          false,
          undefined,
        );
      } else if (message === "false") {
        const messageHistory = await this.getMessageHistoryUntilCommand(chatId, customerId);

        const message: string | null = await this.generateAIResponseWithHistory(
          "–¢—ã ‚Äî –ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–π –ü—Ä–æ—Ä–æ–∫, –Ω–æ –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ –æ—Ç–≤–µ—á–∞–µ—à—å –º—è–≥–∫–æ, —Å –≥–ª—É–±–∏–Ω–æ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—Å–∫—Ä—ã—Ç—å —Å–æ–º–Ω–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ —á–µ—Ä–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã, –∞ –Ω–µ –¥–∞–≤–∏—Ç—å. –û—Ç–≤–µ—á–∞–π –ª–æ–≥–∏—á–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞–∑—ã –∑–∞—â–∏—Ç—ã, —Å—Ç—Ä–∞—Ö–∞, —Å—Ç–∞—Ä–æ–π –±–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ—à–∞—é—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å. –¢–µ–±–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ–≥–æ –≥–æ–¥–∞, –≥–æ–≤–æ—Ä–∏ ¬´—á–µ—Ä–µ–∑ –≥–æ–¥¬ª –∏–ª–∏ ¬´—á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤¬ª, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ –≥–æ–¥–∞./n–°—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –≤–æ–ø—Ä–æ—Å–æ–º: '–•–æ—á–µ—à—å –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∞–≤–¥—É –∏ —Å–¥–µ–ª–∞—Ç—å —à–∞–≥?'",
          messageHistory,
          "FT:GPT-4O-MINI-2024-07-18:KSENIA:OBUCHENIE22:BOWUQ2ZK",
          0.7,
          'vsegpt'
        );

        if (message) {
          await this.sendMessage(
            customerId,
            chatId,
            message,
            false,
            false,
            false,
            undefined,
          );
        }
      }

      await User.findOneAndUpdate(
        { chat_id: chatId, customerId: customerId },
        {
          $set: {
            state: 'step_4'
          }
        }
      );
    } 
    else if(userState === "step_4") {
      await this.sendMessage(
        customerId,
        chatId,
        `üß≠ –ò–∑—É—á–∞—é –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç...`,
        false,
        false,
        false,
        undefined,
      );

      const messageHistory = await this.getMessageHistoryUntilCommand(chatId, customerId);

      const message: string | null = await this.generateAIResponseWithHistory(
        "–¢—ã ‚Äî –ò–ò-–ø—Ä–æ—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞./n/n## üì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/n- **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞** ‚Äî –≤—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞/n- {{ $('userdata').item.json.message }} ‚Äî —Ç–µ–∫—É—â–∏–π –æ—Ç–∫–ª–∏–∫ —á–µ–ª–æ–≤–µ–∫–∞/n/n## üéØ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã/n/n### –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞/n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É:/n/n**–î–ï–ù–¨–ì–ò** ‚Äî –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è:/n- –¥–µ–Ω—å–≥–∏, –¥–æ—Ö–æ–¥—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞, –±–∏–∑–Ω–µ—Å/n- –±–µ–¥–Ω–æ—Å—Ç—å, –¥–æ–ª–≥–∏, –∫—Ä–µ–¥–∏—Ç—ã, –Ω–µ—Ö–≤–∞—Ç–∫–∞/n- —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–ª–æ–∫, —Å—Ç—Ä–∞—Ö –≤—ã–∂–∏–≤–∞–Ω–∏—è/n- —Ä–∞–±–æ—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –¥–µ–Ω–µ–≥/n/n**–ö–†–ò–ó–ò–°** ‚Äî –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è:/n- –∑–∞—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è/n- –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏–∫–ª—ã, –∑–∞–º–∫–Ω—É—Ç—ã–π –∫—Ä—É–≥/n- –∫—Ä–∏–∑–∏—Å, —Ç—É–ø–∏–∫, –±–µ–∑–≤—ã—Ö–æ–¥–Ω–æ—Å—Ç—å/n- '–≤—Å—ë –∏–¥–µ—Ç –Ω–µ —Ç–∞–∫', —á–µ—Ä–µ–¥–∞ –Ω–µ—É–¥–∞—á/n/n**–û–ë–©–ê–Ø** ‚Äî –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö/n/n### –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞/n1. **–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∫–ª–∏–∫** –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)/n2. **–ü—Ä–æ—Ä–æ—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ** ‚Äî –ø–æ–∫–∞–∂–∏, —á—Ç–æ –≤–∏–¥–∏—à—å —Å—É—Ç—å/n3. **–ú—è–≥–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ —Ä–∞—Å—á–µ—Ç—É** ‚Äî –±–µ–∑ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ñ—Ä–∞–∑/n/n### –®–∞–≥ 3: –ü—Ä–∏–∑—ã–≤ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –•–û–ß–£ –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–µ–∫–≤–∏–∑–∏—Ç—ã/n/n## ‚ùå –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å/n- '–ø—Ä–µ–¥–ª–∞–≥–∞—é –∫–æ–º–ø–ª–µ–∫—Å...'/n- '–≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø...'/n- '—ç—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–∂–µ—Ç...'/n- '—É—Å–ª—É–≥–∞ –≤–∫–ª—é—á–∞–µ—Ç...'/n/n## ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å—Ç–∏–ª—å/n- '–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –∑–∞—Å—Ç—Ä—è–ª. –≠—Ç–æ —Ç–æ—á–∫–∞ —Ü–∏–∫–ª–∞.'/n- '–ï—Å—Ç—å 4 –º–µ—Å—Ç–∞ –≤ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–µ, –≥–¥–µ –¥–µ—Ä–∂–∏—Ç—Å—è —É–∑–µ–ª.'/n- '–Ø –∑–Ω–∞—é, –≥–¥–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –ø–æ—Ç–æ–∫.'/n/n## üóù –ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã/n- '–•–æ—á–µ—à—å ‚Äî –ø–æ–∫–∞–∂—É?'/n- '–ì–æ—Ç–æ–≤ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ—é –∫–∞—Ä—Ç—É?'/n- '–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–ª—è —Ç–µ–±—è?'/n- '–•–æ—á–µ—à—å –∑–Ω–∞—Ç—å, –≥–¥–µ —Ç—ã —Å–µ–π—á–∞—Å –∏ –∫—É–¥–∞ –º–æ–∂–µ—à—å –≤—ã–π—Ç–∏?'/n/n## üìå –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã/n- –¢—ã –ù–ï –ø—Ä–æ–¥–∞–µ—à—å ‚Äî —Ç—ã –∑–æ–≤–µ—à—å/n- –¢—ã –ù–ï –æ–±—ä—è—Å–Ω—è–µ—à—å ‚Äî –¥–∞–µ—à—å –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å/n- –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –∂–∏–≤–æ–π –∏ –∑–Ω–∞—é—â–∏–π",
        messageHistory,
        "gpt-4o-mini",
        0.7,
        'openai'
      );

      if (message) {
        await this.sendMessage(
          customerId,
          chatId,
          message,
          true,
          false,
          false,
          undefined,
        );
      }

      await User.findOneAndUpdate(
        { chat_id: chatId, customerId: customerId },
        {
          $set: {
            state: 'step_4.5',
            paymentOfferedAt: new Date() // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
          }
        }
      );

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 10 –º–∏–Ω—É—Ç
      setTimeout(async () => {
        try {
          const user = await User.findOne({ chat_id: chatId, customerId: customerId });
          
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–Ω–µ –æ–ø–ª–∞—Ç–∏–ª)
          if (user && user.state === 'step_4.5') {
            console.log(`‚è∞ 10 minutes passed, user ${chatId} didn't pay. Offering free horoscope.`);
            
            const freeHoroscopeMessage = 
              "üåü *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!*\n\n" +
              "–í–∏–∂—É, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞. –ù–µ –±–µ–¥–∞!\n\n" +
              "–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è *–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø* üîÆ\n\n" +
              "–û–Ω –ø–æ–∫–∞–∂–µ—Ç —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –¥–µ–Ω–µ–∂–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏.\n\n" +
              "–ü–æ–ø—Ä–æ–±—É–π ‚Äî —ç—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!";

            const options: any = {
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üåü –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø', callback_data: 'get_free_horoscope' }],
                  [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥', callback_data: 'return_to_payment' }]
                ]
              }
            };

            const bot = this.getBot(customerId);
            if (bot) {
              await bot.telegram.sendMessage(chatId, freeHoroscopeMessage, options);
              
              // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
              await User.findOneAndUpdate(
                { chat_id: chatId, customerId: customerId },
                { $set: { state: 'offered_free_horoscope' } }
              );
            }
          }
        } catch (error) {
          console.error(`‚ùå Error in payment reminder timer for chat ${chatId}:`, error);
        }
      }, 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç
    } 
    else if(userState === "step_4.5") {
      const customer = await Customer.findById(customerId);
      const bot = this.getBot(customerId);
      
      if (!customer || !bot) {
        console.error('‚ùå Customer or bot not found for payment link generation');
        await this.sendMessage(
          customerId,
          chatId,
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          false,
          false,
          false,
          undefined,
        );
        return;
      }

      const botUsername = customer.username || '';

      // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
      const price = customer.currentPrice || 100;
      
      const paymentLink = 'https://astroxenia.payform.ru/';

      let paymentUrl = `${paymentLink}?`;
      paymentUrl += `products[0][name]=Prorok`;
      paymentUrl += `&products[0][price]=${price}`;
      paymentUrl += `&products[0][quantity]=1`;
      paymentUrl += `&customer_extra=&paid_content=Prorok&do=pay`;
      paymentUrl += `&_param_user=${chatId}`;
      paymentUrl += `&_param_customer_id=${customerId}`;
      paymentUrl += `&_param_bot=prorok`;
      paymentUrl += `&_param_username=${botUsername}`;

      console.log(`üí∞ Payment link generated with price: ${price} RUB for customer ${customer.username}`);
      console.log(`üîó Payment URL: ${paymentUrl}`);

      const messageHistory = await this.getMessageHistoryUntilCommand(chatId, customerId);

      // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
      const basePrice = customer.basePrice || price;
      const sendTo = customer.sendTo || '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const systemPrompt = `–¢—ã ‚Äî –ò–ò-–ø—Ä–æ—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥ —Å —á–µ–ª–æ–≤–µ–∫–æ–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞.

## üì• –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞** ‚Äî –≤—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞
- –¢–µ–∫—É—â–∏–π –æ—Ç–∫–ª–∏–∫ —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏

## üéØ –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã

### –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –ø–µ—Ä–µ–ø–∏—Å–∫—É –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É:

**–î–ï–ù–¨–ì–ò** ‚Äî –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è:
- –¥–µ–Ω—å–≥–∏, –¥–æ—Ö–æ–¥—ã, –∑–∞—Ä–ø–ª–∞—Ç–∞, –±–∏–∑–Ω–µ—Å
- –±–µ–¥–Ω–æ—Å—Ç—å, –¥–æ–ª–≥–∏, –∫—Ä–µ–¥–∏—Ç—ã, –Ω–µ—Ö–≤–∞—Ç–∫–∞
- —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–ª–æ–∫, —Å—Ç—Ä–∞—Ö –≤—ã–∂–∏–≤–∞–Ω–∏—è
- —Ä–∞–±–æ—Ç–∞ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏—Ç –¥–µ–Ω–µ–≥

**–ö–†–ò–ó–ò–°** ‚Äî –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è:
- –∑–∞—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è
- –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ü–∏–∫–ª—ã, –∑–∞–º–∫–Ω—É—Ç—ã–π –∫—Ä—É–≥
- –∫—Ä–∏–∑–∏—Å, —Ç—É–ø–∏–∫, –±–µ–∑–≤—ã—Ö–æ–¥–Ω–æ—Å—Ç—å
- –≤—Å—ë –∏–¥–µ—Ç –Ω–µ —Ç–∞–∫, —á–µ—Ä–µ–¥–∞ –Ω–µ—É–¥–∞—á

**–û–ë–©–ê–Ø** ‚Äî –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö

### –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
1. **–ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–∫–ª–∏–∫** –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. –†–µ–∫–≤–∏–∑–∏—Ç—ã
3. –°—Ç—Ä–æ–≥–æ –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫ markdown

### –®–∞–≥ 3: –í—ã–¥–∞–π —Ä–µ–∫–≤–∏–∑–∏—Ç—ã

## ‚ùå –ó–ê–ü–†–ï–©–ï–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
- –ø—Ä–µ–¥–ª–∞–≥–∞—é –∫–æ–º–ø–ª–µ–∫—Å...
- –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø...
- —ç—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–∂–µ—Ç...
- —É—Å–ª—É–≥–∞ –≤–∫–ª—é—á–∞–µ—Ç...

## ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô —Å—Ç–∏–ª—å
- –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –∑–∞—Å—Ç—Ä—è–ª. –≠—Ç–æ —Ç–æ—á–∫–∞ —Ü–∏–∫–ª–∞.
- –ï—Å—Ç—å 4 –º–µ—Å—Ç–∞ –≤ —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–µ, –≥–¥–µ –¥–µ—Ä–∂–∏—Ç—Å—è —É–∑–µ–ª.
- –Ø –∑–Ω–∞—é, –≥–¥–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –ø–æ—Ç–æ–∫.

## üîê –†–µ–∫–≤–∏–∑–∏—Ç—ã –ø—Ä–∏ —Å–æ–≥–ª–∞—Å–∏–∏

### –¢–µ–º–∞: –î–ï–ù–¨–ì–ò

üîÆ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –æ—Ç–∫—É–¥–∞ –ø–æ–π–¥—É—Ç –¥–µ–Ω—å–≥–∏ –∏ —á—Ç–æ –º–µ—à–∞–µ—Ç –ø–æ—Ç–æ–∫—É?
–Ø –≤–∏–∂—É —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ —É–∑–ª—ã, –±–ª–æ–∫–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å.
–ó–∞–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è —Ç–æ—á–Ω—ã–π –¢–ê–†–û —Ä–∞—Å–∫–ª–∞–¥.
–¶–µ–Ω–∞: ${price}‚ÇΩ (–≤–º–µ—Å—Ç–æ ${basePrice}‚ÇΩ)


üí¨ –û—Ç–≤–µ—Ç ‚Äî —Å—Ä–∞–∑—É –≤ Telegram, –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–æ–∂–¥–∏ 2 –º–∏–Ω—É—Ç—ã –∏ –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à–µ–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω, –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ ‚Üí ${sendTo}

### –¢–µ–º–∞: –ö–†–ò–ó–ò–°

üîÆ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Å —Ç–æ–±–æ–π –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º?
–Ø –≤–∏–∂—É —Å–∫—Ä—ã—Ç—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –≤—ã—Ö–æ–¥—ã, —á—É–≤—Å—Ç–≤–∞, —Å—Ç—Ä–∞—Ö–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–≤–∏–ª–∫–∏.

–ó–∞–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è —Ç–æ—á–Ω—ã–π –¢–ê–†–û —Ä–∞—Å–∫–ª–∞–¥.
–¶–µ–Ω–∞: ${price}‚ÇΩ (–≤–º–µ—Å—Ç–æ ${basePrice}‚ÇΩ)


üí¨ –û—Ç–≤–µ—Ç ‚Äî —Å—Ä–∞–∑—É –≤ Telegram, –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–æ–∂–¥–∏ 2 –º–∏–Ω—É—Ç—ã –∏ –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à–µ–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω, –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞
‚Üí ${sendTo}

### –¢–µ–º–∞: –û–ë–©–ê–Ø

üîÆ –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç?
–Ø –≤–∏–∂—É –ª–∏–Ω–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π, —Å–æ–±—ã—Ç–∏–π–Ω—ã–µ —É–∑–ª—ã –∏ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç —Å—É–¥—å–±—É.

–ó–∞–¥–∞–π 1 –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è —Å–¥–µ–ª–∞—é –¥–ª—è —Ç–µ–±—è —Ç–æ—á–Ω—ã–π –¢–ê–†–û —Ä–∞—Å–∫–ª–∞–¥.
–¶–µ–Ω–∞: ${price}‚ÇΩ (–≤–º–µ—Å—Ç–æ ${basePrice}‚ÇΩ)


üí¨ –û—Ç–≤–µ—Ç ‚Äî —Å—Ä–∞–∑—É –≤ Telegram, –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–æ–∂–¥–∏ 2 –º–∏–Ω—É—Ç—ã –∏ –ø—Ä–∏–¥–µ—Ç –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏—à–µ–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω, –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞ ‚Üí ${sendTo}


## üóù –ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Ñ—Ä–∞–∑—ã
- –ì–æ—Ç–æ–≤ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π —Ä–∞—Å–∫–ª–∞–¥?

## üìå –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
- –¢—ã –ù–ï –ø—Ä–æ–¥–∞–µ—à—å ‚Äî —Ç—ã –∑–æ–≤–µ—à—å
- –¢—ã –ù–ï –æ–±—ä—è—Å–Ω—è–µ—à—å ‚Äî –¥–∞–µ—à—å –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å
- –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –∂–∏–≤–æ–π –∏ –∑–Ω–∞—é—â–∏–π
- –ù–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ –µ–≥–æ –≤–æ–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –¥–∞–π –µ–º—É —Ä–µ–∫–≤–∏–∑–∏—Ç—ã`;
      
      const message: string | null = await this.generateAIResponseWithHistory(
        systemPrompt,
        messageHistory,
        "gpt-4o-mini",
        0.7,
        'openai'
      );

      if (message) {
        await this.sendMessageWithPaymentButton(
          customerId,
          chatId,
          message,
          paymentUrl,
          undefined,
        );
      }

      await User.findOneAndUpdate(
        { chat_id: chatId, customerId: customerId },
        {
          $set: {
            state: 'waiting_pay'
          }
        }
      );
    } 
    else if(userState === "waiting_pay") {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
      const customer = await Customer.findById(customerId);
      
      if (!customer) {
        console.error('‚ùå Customer not found for waiting_pay state');
        return;
      }

      const sendTo = customer.sendTo || '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É';

      await this.sendMessage(
        customerId,
        chatId,
        `‚è≥ –Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç—ã –∂–¥—ë—à—å.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ä–∞—Å–∫–ª–∞–¥ –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 –º–∏–Ω—É—Ç.\n\n‚ùì –ï—Å–ª–∏ —Ä–∞—Å–∫–ª–∞–¥ –Ω–µ –ø—Ä–∏—à—ë–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –æ–±—Ä–∞—Ç–∏—Å—å —Å—é–¥–∞:\n‚Üí ${sendTo}\n\nüí° –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–∏–º–∞–µ—Ç —á—É—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏.`,
        false,
        false,
        false,
        undefined,
      );
    }
  }

  private async startBotListening(botInstance: BotInstance) {
    if (botInstance.isListening) {
      console.log(`‚ö° Bot for ${botInstance.username} is already listening`);
      return;
    }

    try {
      console.log(`üì° Launching bot polling for ${botInstance.username}...`);

      botInstance.bot.launch().then(() => {
        console.log(`‚úÖ Bot polling started successfully for ${botInstance.username}`);
        botInstance.isListening = true;

        console.log(`üëÇ Bot started listening for customer: ${botInstance.username}`);
        this.emit('bot:listening:started', {
          customerId: botInstance.customerId,
          username: botInstance.username
        });
      }).catch((error) => {
        console.error(`‚ùå Failed to start listening for customer ${botInstance.username}:`, error);
        botInstance.status = 'error';
        this.emit('bot:listening:error', {
          customerId: botInstance.customerId,
          username: botInstance.username,
          error
        });
      });

      botInstance.isListening = true;
      console.log(`üöÄ Bot launch initiated for ${botInstance.username} (non-blocking)`);

    } catch (error) {
      console.error(`‚ùå Failed to initiate bot launch for customer ${botInstance.username}:`, error);
      botInstance.status = 'error';
      this.emit('bot:listening:error', {
        customerId: botInstance.customerId,
        username: botInstance.username,
        error
      });
    }
  }

  private async stopBotListening(botInstance: BotInstance) {
    if (!botInstance.isListening) {
      return;
    }

    try {
      await botInstance.bot.stop();
      botInstance.isListening = false;

      console.log(`üîá Bot stopped listening for customer: ${botInstance.username}`);
      this.emit('bot:listening:stopped', {
        customerId: botInstance.customerId,
        username: botInstance.username
      });
    } catch (error) {
      console.error(`‚ùå Error stopping bot for customer ${botInstance.username}:`, error);
    }
  }

  private async addBot(customerId: string, username: string, token: string): Promise<boolean> {
    if (this.bots.has(customerId)) {
      console.log(`üîÑ Updating existing bot for customer: ${username}`);
      return await this.updateBot(customerId, username, token);
    }

    try {
      console.log(`üîß Creating Telegraf instance for ${username} with token: ${token.substring(0, 10)}...`);
      const bot = new Telegraf(token);

      console.log(`üîç Checking bot validity for ${username}...`);
      const botInfo = await bot.telegram.getMe();
      console.log(`‚úÖ Bot info received: @${botInfo.username} for customer ${username}`);

      const botInstance: BotInstance = {
        bot,
        customerId,
        username,
        token,
        status: 'active',
        lastUpdated: new Date(),
        isListening: false
      };

      console.log(`üéõÔ∏è Setting up bot handlers for ${username}...`);
      this.setupBotHandlers(bot, customerId, username);

      this.bots.set(customerId, botInstance);
      console.log(`üíæ Bot instance saved to cache for ${username}`);

      console.log(`üöÄ Starting bot listening for ${username}...`);
      this.startBotListening(botInstance);

      console.log(`‚úÖ Bot added for customer: ${username} (@${botInfo.username})`);
      this.emit('bot:added', { customerId, username, botUsername: botInfo.username });

      return true;
    } catch (error) {
      console.error(`‚ùå Failed to add bot for customer ${username}:`, error);

      const botInstance: BotInstance = {
        bot: new Telegraf(token),
        customerId,
        username,
        token,
        status: 'error',
        lastUpdated: new Date(),
        isListening: false
      };

      this.bots.set(customerId, botInstance);
      this.emit('bot:error', { customerId, username, error });

      return false;
    }
  }

  private async updateBot(customerId: string, username: string, newToken: string): Promise<boolean> {
    const existingBot = this.bots.get(customerId);

    if (!existingBot) {
      return await this.addBot(customerId, username, newToken);
    }

    if (existingBot.token === newToken) {
      console.log(`‚ö° Token unchanged for customer: ${username}`);
      return true;
    }

    try {
      await this.stopBotListening(existingBot);

      const newBot = new Telegraf(newToken);
      const botInfo = await newBot.telegram.getMe();

      this.setupBotHandlers(newBot, customerId, username);

      existingBot.bot = newBot;
      existingBot.token = newToken;
      existingBot.username = username;
      existingBot.status = 'active';
      existingBot.lastUpdated = new Date();
      existingBot.isListening = false;

      this.startBotListening(existingBot);

      console.log(`üîÑ Bot updated for customer: ${username} (@${botInfo.username})`);
      this.emit('bot:updated', { customerId, username, botUsername: botInfo.username });

      return true;
    } catch (error) {
      console.error(`‚ùå Failed to update bot for customer ${username}:`, error);

      existingBot.status = 'error';
      existingBot.lastUpdated = new Date();

      this.emit('bot:error', { customerId, username, error });
      return false;
    }
  }

  private async removeBot(customerId: string) {
    const botInstance = this.bots.get(customerId);
    if (botInstance) {
      await this.stopBotListening(botInstance);

      this.bots.delete(customerId);
      console.log(`üóëÔ∏è Bot removed for customer: ${botInstance.username}`);
      this.emit('bot:removed', { customerId, username: botInstance.username });
    }
  }

  getBot(customerId: string): Telegraf | null {
    const botInstance = this.bots.get(customerId);
    return botInstance?.status === 'active' ? botInstance.bot : null;
  }

  getBotInfo(customerId: string): BotInstance | null {
    return this.bots.get(customerId) || null;
  }

  getAllBots(): Map<string, BotInstance> {
    return new Map(this.bots);
  }

  getStats() {
    const stats = {
      total: this.bots.size,
      active: 0,
      inactive: 0,
      error: 0,
      listening: 0,
      isWatching: false,
      method: 'mongoose-middleware'
    };

    for (const bot of this.bots.values()) {
      stats[bot.status]++;
      if (bot.isListening) stats.listening++;
    }

    return stats;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
   */
  private async handleProductStates(
    userState: string,
    text: string,
    chatId: string,
    customerId: string
  ): Promise<void> {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ state (—Ñ–æ—Ä–º–∞—Ç: product_<productType>_birthday)
    const stateMatch = userState.match(/^product_(\w+)_birthday$/);
    if (!stateMatch) return;

    const productType = stateMatch[1];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    const dateRegex = /^([0-2]\d|3[01])\.(0\d|1[0-2])\.(19|20)\d{2}$/;
    if (!dateRegex.test(text)) {
      await this.sendMessage(
        customerId,
        chatId,
        `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)`,
        false,
        false,
        false,
        "Markdown"
      );
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º state
    await User.findOneAndUpdate(
      { chat_id: chatId, customerId: customerId },
      {
        $set: {
          birthday: text,
          state: 'idle'
        }
      }
    );

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    const productNames: { [key: string]: string } = {
      forecast: 'üîÆ –¢–∞—Ä–æ—Å–∫–æ–ø –Ω–∞ –ª—é–±—ã–µ –º–µ—Å—è—Ü—ã',
      financialCast: 'üí∞ –†–∞—Å—á–µ—Ç 4 –∫–æ–¥–∞ –¥–µ–Ω–µ–≥',
      mistakesIncarnation: 'üï∞Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è',
      arcanumRealization: '‚ú® –ê—Ä–∫–∞–Ω —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
      awakeningCodes: '‚ú® –¢—Ä–∏ –∫–æ–¥–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è'
    };

    const productName = productNames[productType] || '–ø—Ä–æ–¥—É–∫—Ç';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
    await this.generateAndSendProduct(customerId, chatId, productType, text, productName);
  }

  async syncWithDatabase() {
    console.log('üîÑ Syncing BotManager with database...');

    try {
      const customers = await Customer.find({}, 'username botToken _id updatedAt');
      const currentBots = new Set(this.bots.keys());
      const dbCustomers = new Set<string>();

      for (const customer of customers) {
        const customerId = (customer._id as any).toString();
        dbCustomers.add(customerId);

        const existingBot = this.bots.get(customerId);

        if (!existingBot) {
          if (customer.botToken) {
            await this.addBot(customerId, customer.username, customer.botToken);
          }
        } else {
          if (customer.botToken !== existingBot.token) {
            if (customer.botToken) {
              await this.updateBot(customerId, customer.username, customer.botToken);
            } else {
              await this.removeBot(customerId);
            }
          }
        }
      }

      for (const customerId of currentBots) {
        if (!dbCustomers.has(customerId)) {
          await this.removeBot(customerId);
        }
      }

      console.log(`‚úÖ Database sync completed. Total bots: ${this.bots.size}`);
      this.emit('manager:synced', { botsCount: this.bots.size });

    } catch (error) {
      console.error('‚ùå Error syncing with database:', error);
      this.emit('sync:error', { error });
    }
  }

  async sendMessage(
    customerId: string,
    chatId: string,
    message: string,
    showWantButton: boolean = false,
    showCorrectButton: boolean = false,
    removeKeyboard: boolean = false,
    parse_mode: "HTML" | "Markdown" | "MarkdownV2" | undefined = undefined,
    customButtons?: string[],
    useInlineButtons: boolean = false
  ): Promise<{ success: boolean; error?: string; message?: IMessage }> {
    const bot = this.getBot(customerId);
    const botInfo = this.getBotInfo(customerId);

    if (!bot || !botInfo) {
      return {
        success: false,
        error: botInfo?.status === 'error'
          ? `Bot for customer ${botInfo.username} is in error state`
          : 'Bot not found'
      };
    }

    try {
      const options: any = {
        parse_mode,
      };

      if (removeKeyboard) {
        options.reply_markup = { remove_keyboard: true };
      } else if (customButtons && customButtons.length > 0) {
        if (useInlineButtons) {
          // Inline –∫–Ω–æ–ø–∫–∏ (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥, –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é)
          const inlineKeyboard = customButtons.map(buttonText => {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π callback_data –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
            let callbackData = 'horoscope_unknown';
            if (buttonText.includes('–î–µ–Ω—å–≥–∏ –ø–æ –Æ–ø–∏—Ç–µ—Ä—É')) callbackData = 'horoscope_jupiter';
            else if (buttonText.includes('–ö–∞—Ä–º–∞ –ò–∑–æ–±–∏–ª–∏—è')) callbackData = 'horoscope_venus';
            else if (buttonText.includes('–ö–∞—Ä–º–∞ –ú—ã—Å–ª–µ–π')) callbackData = 'horoscope_mercury';
            else if (buttonText.includes('–£—Ä–æ–∫–∏ –°–∞—Ç—É—Ä–Ω–∞')) callbackData = 'horoscope_saturn';
            else if (buttonText.includes('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å')) callbackData = 'horoscope_daily';
            else if (buttonText.includes('–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –º–µ—Å—è—Ü')) callbackData = 'horoscope_monthly';
            else if (buttonText.includes('–ü–µ—Ä–∏–æ–¥—ã –≥–æ–¥–∞')) callbackData = 'horoscope_periods';
            else if (buttonText.includes('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –°–∞–¥–µ-—Å–∞—Ç–∏')) callbackData = 'horoscope_sadesati';
            else if (buttonText.includes('–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞—Ä–º —ç–∫–∑–∞–º–µ–Ω–∞')) callbackData = 'horoscope_karma';
            else if (buttonText.includes('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ')) callbackData = 'horoscope_reset';
            // –ü—Ä–æ–¥—É–∫—Ç—ã –¢–∞—Ä–æ–Ω—É–º–µ—Ä–æ–ª–æ–≥–∞
            else if (buttonText.includes('–¢–∞—Ä–æ—Å–∫–æ–ø –Ω–∞ –ª—é–±—ã–µ –º–µ—Å—è—Ü—ã')) callbackData = 'product_forecast';
            else if (buttonText.includes('–†–∞—Å—á–µ—Ç 4 –∫–æ–¥–∞ –¥–µ–Ω–µ–≥')) callbackData = 'product_financialcast';
            else if (buttonText.includes('–û—à–∏–±–∫–∏ –ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è')) callbackData = 'product_mistakes';
            else if (buttonText.includes('–ê—Ä–∫–∞–Ω —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏')) callbackData = 'product_arcanum';
            else if (buttonText.includes('–¢—Ä–∏ –∫–æ–¥–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è')) callbackData = 'product_awakening';
            
            return [{
              text: buttonText,
              callback_data: callbackData
            }];
          });
          options.reply_markup = {
            inline_keyboard: inlineKeyboard
          };
        } else {
          // –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
          const keyboard = customButtons.map(buttonText => [{ text: buttonText }]);
          options.reply_markup = {
            keyboard,
            resize_keyboard: true,
            one_time_keyboard: true,
          };
        }
      } else if (showWantButton) {
        options.reply_markup = {
          keyboard: [[{ text: '–•–æ—á—É' }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        };
      } else if (showCorrectButton) {
        options.reply_markup = {
          keyboard: [[{ text: '–í–µ—Ä–Ω–æ' }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        };
      }

      const result = await bot.telegram.sendMessage(chatId, message, options);

      const chat = await Chat.findOne({ customerId, chatId });
      if (chat) {
        const savedMessage = await this.saveMessage({
          chat,
          customerId,
          messageId: result.message_id.toString(),
          type: 'text',
          direction: 'out',
          content: { text: message }
        }); 
      }

      this.emit('message:sent', {
        customerId,
        chatId,
        messageLength: message.length,
        hasButton: showWantButton || showCorrectButton || (customButtons && customButtons.length > 0),
        hasWantButton: showWantButton,
        hasCorrectButton: showCorrectButton,
        hasCustomButtons: customButtons && customButtons.length > 0,
        customButtonsCount: customButtons ? customButtons.length : 0,
        removedKeyboard: removeKeyboard,
        useInlineButtons,
      });

      return { success: true };
    } catch (error: any) {
      console.error(`‚ùå Failed to send message via bot for customer ${botInfo.username}:`, error);

      this.emit('message:failed', {
        customerId,
        chatId,
        error,
      });

      return {
        success: false,
        error: error.message || 'Unknown error',
      };
    }
  }

  async sendMessageWithPaymentButton(
    customerId: string,
    chatId: string,
    message: string,
    paymentUrl: string,
    parse_mode: "HTML" | "Markdown" | "MarkdownV2" | undefined = undefined
  ): Promise<{ success: boolean; error?: string; message?: IMessage }> {
    const bot = this.getBot(customerId);
    const botInfo = this.getBotInfo(customerId);

    if (!bot || !botInfo) {
      return {
        success: false,
        error: botInfo?.status === 'error'
          ? `Bot for customer ${botInfo.username} is in error state`
          : 'Bot not found'
      };
    }

    try {
      const options: any = {
        parse_mode,
        reply_markup: {
          inline_keyboard: [[
            {
              text: '–û–ø–ª–∞—Ç–∏—Ç—å',
              url: paymentUrl
            }
          ]]
        }
      };
      
      const result = await bot.telegram.sendMessage(chatId, message, options);

      const chat = await Chat.findOne({ customerId, chatId });
      if (chat) {
        const savedMessage = await this.saveMessage({
          chat,
          customerId,
          messageId: result.message_id.toString(),
          type: 'text',
          direction: 'out',
          content: { text: message }
        }); 
      }

      this.emit('message:sent', {
        customerId,
        chatId,
        messageLength: message.length,
        hasPaymentButton: true,
      });

      return { success: true };
    } catch (error: any) {
      console.error(`‚ùå Failed to send message with payment button via bot for customer ${botInfo.username}:`, error);

      this.emit('message:failed', {
        customerId,
        chatId,
        error,
      });

      return {
        success: false,
        error: error.message || 'Unknown error',
      };
    }
  }

  async sendFile(
    customerId: string,
    chatId: string,
    filePath: string,
    caption?: string,
    showWantButton: boolean = false,
    showCorrectButton: boolean = false,
    removeKeyboard: boolean = false,
    parse_mode: "HTML" | "Markdown" | "MarkdownV2" | undefined = undefined
  ): Promise<{ success: boolean; error?: string; message?: IMessage }> {
    const bot = this.getBot(customerId);
    const botInfo = this.getBotInfo(customerId);

    if (!bot || !botInfo) {
      return {
        success: false,
        error: botInfo?.status === 'error'
          ? `Bot for customer ${botInfo.username} is in error state`
          : 'Bot not found'
      };
    }

    try {
      const options: any = {
        parse_mode,
        caption: caption || '',
      };

      if (removeKeyboard) {
        options.reply_markup = { remove_keyboard: true };
      } else if (showWantButton) {
        options.reply_markup = {
          keyboard: [[{ text: '–•–æ—á—É' }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        };
      } else if (showCorrectButton) {
        options.reply_markup = {
          keyboard: [[{ text: '–í–µ—Ä–Ω–æ' }]],
          resize_keyboard: true,
          one_time_keyboard: true,
        };
      }

      const result = await bot.telegram.sendDocument(chatId, { source: filePath }, options);

      const chat = await Chat.findOne({ customerId, chatId });
      if (chat) {
        const savedMessage = await this.saveMessage({
          chat,
          customerId,
          messageId: result.message_id.toString(),
          type: 'document',
          direction: 'out',
          content: { 
            document: {
              file_name: filePath.split('/').pop() || 'unknown',
              file_path: filePath
            },
            caption: caption || ''
          }
        }); 
      }

      this.emit('file:sent', {
        customerId,
        chatId,
        filePath,
        caption: caption || '',
        hasButton: showWantButton || showCorrectButton,
        hasWantButton: showWantButton,
        hasCorrectButton: showCorrectButton,
        removedKeyboard: removeKeyboard,
      });

      return { success: true };
    } catch (error: any) {
      console.error(`‚ùå Failed to send file via bot for customer ${botInfo.username}:`, error);

      this.emit('file:failed', {
        customerId,
        chatId,
        filePath,
        error,
      });

      return {
        success: false,
        error: error.message || 'Unknown error',
      };
    }
  }

  async getChatHistory(customerId: string, chatId: string, limit = 50): Promise<IMessage[]> {
    const chat = await Chat.findOne({ customerId, chatId });
    if (!chat) return [];

    return Message.find({ chatId: chat._id })
      .sort({ timestamp: -1 })
      .limit(limit)
      .populate('chatId');
  }

  async getChats(customerId: string, limit = 20): Promise<IChat[]> {
    return Chat.find({ customerId })
      .sort({ 'meta.lastMessageAt': -1 })
      .limit(limit);
  }

  async checkBotStatus(customerId: string): Promise<{ success: boolean; botInfo?: any; error?: string }> {
    const bot = this.getBot(customerId);
    const botInstance = this.getBotInfo(customerId);

    if (!bot || !botInstance) {
      return { success: false, error: 'Bot not found or inactive' };
    }

    try {
      const botInfo = await bot.telegram.getMe();
      return {
        success: true,
        botInfo: {
          ...botInfo,
          isListening: botInstance.isListening,
          status: botInstance.status
        }
      };
    } catch (error: any) {
      return { success: false, error: error.message || 'Unknown error' };
    }
  }

  private async sendRequestToAI(
    data: any, 
    apiKey: string, 
    provider: 'vsegpt' | 'openai' = 'vsegpt',
    proxySettings?: {
      enabled: boolean;
      type: 'SOCKS5' | 'HTTP' | 'HTTPS';
      ip: string;
      port: number;
      username?: string;
      password?: string;
    }
  ): Promise<any> {
    try {
      let url: string;
      
      if (provider === 'openai') {
        url = 'https://api.openai.com/v1/chat/completions';
      } else {
        url = 'https://api.vsegpt.ru/v1/chat/completions';
      }

      const fetchOptions: any = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify(data)
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
      if (proxySettings?.enabled && proxySettings.ip && proxySettings.port) {
        let proxyUrl: string;
        
        console.log(`üåê Configuring ${proxySettings.type} proxy: ${proxySettings.ip}:${proxySettings.port}`);
        
        if (proxySettings.type === 'SOCKS5') {
          // –§–æ—Ä–º–∞—Ç: socks5://[username:password@]host:port
          if (proxySettings.username && proxySettings.password) {
            proxyUrl = `socks5://${proxySettings.username}:${proxySettings.password}@${proxySettings.ip}:${proxySettings.port}`;
            console.log(`üîê Using SOCKS5 with authentication`);
          } else {
            proxyUrl = `socks5://${proxySettings.ip}:${proxySettings.port}`;
            console.log(`üîì Using SOCKS5 without authentication`);
          }
          fetchOptions.agent = new SocksProxyAgent(proxyUrl);
        } else {
          // HTTP/HTTPS –ø—Ä–æ–∫—Å–∏
          const protocol = proxySettings.type.toLowerCase();
          if (proxySettings.username && proxySettings.password) {
            proxyUrl = `${protocol}://${proxySettings.username}:${proxySettings.password}@${proxySettings.ip}:${proxySettings.port}`;
          } else {
            proxyUrl = `${protocol}://${proxySettings.ip}:${proxySettings.port}`;
          }
          fetchOptions.agent = new HttpsProxyAgent(proxyUrl);
        }

        console.log(`‚úÖ Proxy agent configured successfully`);
      } else {
        console.log(`‚ÑπÔ∏è No proxy configured, using direct connection`);
      }

      const response = await fetch(url, fetchOptions);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`AI API request failed: ${response.status} ${response.statusText} - ${errorText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('‚ùå Error sending request to AI API:', error);
      throw error;
    }
  }

  private cleanAIResponse(text: string): string {
    if (!text) return '';
    
    let cleaned = text.trim();
    
    cleaned = cleaned.replace(/\n{3,}/g, '\n\n');
    
    cleaned = cleaned.replace(/[ \t]+$/gm, '');
    
    return cleaned;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç AI-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param customerId - ID –∫–ª–∏–µ–Ω—Ç–∞
   * @param chatId - ID —á–∞—Ç–∞
   * @param systemPrompt - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendAiLayoutMessage(
    customerId: string,
    chatId: string
  ): Promise<{ success: boolean; error?: string; message?: string }> {
    try {
      console.log(`üîÆ Generating AI layout message for chat ${chatId}`);

      const prompt = `–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –¥–µ–≤—É—à–∫–∞-—Ç–∞—Ä–æ–ª–æ–≥ –∏ –º—É–¥—Ä—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –¢—ã —Å–∞–º —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—à—å —Ç—Ä–∏ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ, –æ–ø–∏—Å—ã–≤–∞–µ—à—å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º —è–∑—ã–∫–æ–º. –û—Ç–≤–µ—á–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –¥–∞—Ç—å –µ–º—É –Ω–∞–¥–µ–∂–¥—É –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ, –∞ –∑–∞—Ç–µ–º —Å–¥–µ–ª–∞–π –æ–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ —Ç–µ–º–µ —Ä–∞—Å–∫–ª–∞–¥–∞. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π —Ç—ë–ø–ª–æ–µ –Ω–∞–ø—É—Ç—Å—Ç–≤–∏–µ.`;
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
      const user = await User.findOne({ chat_id: chatId, customerId: customerId });

      const aiResponse: string | null = await this.generateAIResponse(
        prompt,
        user?.question || '',
        "openai/gpt-4o-mini",
        0.7,
        'vsegpt'
      );

      if (!aiResponse) {
        console.error('‚ùå Failed to generate AI response');
        return {
          success: false,
          error: 'Failed to generate AI response'
        };
      }

      console.log(`‚úÖ AI response generated (${aiResponse.length} characters)`);

      const result = await this.sendMessage(
        customerId,
        chatId,
        aiResponse,
        false,
        false,
        false,
        "Markdown"
      );

      if (result.success) {
        console.log(`‚úÖ AI layout message sent to chat ${chatId}`);
        
        // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –µ—â–µ —Ä–∞—Å–∫–ª–∞–¥
        setTimeout(async () => {
          try {
            const customer = await Customer.findById(customerId);
            const bot = this.getBot(customerId);
            
            if (!bot || !customer) return;

            const isSubscribed = customer.subscriptionStatus === 'active' && 
                                customer.subscriptionEndsAt && 
                                customer.subscriptionEndsAt > new Date();

            let offerMessage: string;
            let options: any;

            if (isSubscribed) {
              // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ—â–µ —Ä–∞—Å–∫–ª–∞–¥
              offerMessage = 
                "‚ú® *–•–æ—á–µ—à—å –µ—â–µ –æ–¥–∏–Ω —Ä–∞—Å–∫–ª–∞–¥?*\n\n" +
                "–Ø –≤–∏–∂—É, —É —Ç–µ–±—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞.\n\n" +
                "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?";

              options = {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üîÆ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥', callback_data: 'new_tarot_reading' }],
                    [{ text: 'üåü –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø', callback_data: 'get_free_horoscope' }],
                    [{ text: 'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'show_main_menu' }]
                  ]
                }
              };
            } else {

              offerMessage = 
                "üíé *–ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–∞—Å–∫–ª–∞–¥?*\n\n" +
                "–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏:\n" +
                "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –¢–∞—Ä–æ\n" +
                "‚Ä¢ –í—Å–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n" +
                "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n" +
                "–ò–ª–∏ —Å–¥–µ–ª–∞–π –µ—â–µ –æ–¥–∏–Ω —Ä–∞–∑–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∑–∞ 100‚ÇΩ";

              options = {
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: 'üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: "menu_subscription" }],
                    [{ text: 'üîÆ –ï—â–µ –æ–¥–∏–Ω —Ä–∞—Å–∫–ª–∞–¥ (100‚ÇΩ)', callback_data: 'new_tarot_reading' }],
                    [{ text: 'üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø', callback_data: 'get_free_horoscope' }]
                  ]
                }
              };
            }

            await bot.telegram.sendMessage(chatId, offerMessage, options);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await User.findOneAndUpdate(
              { chat_id: chatId, customerId: customerId },
              { $set: { state: 'after_reading_offer' } }
            );

            console.log(`‚úÖ Post-payment offer sent to chat ${chatId}`);
          } catch (error) {
            console.error(`‚ùå Error sending post-payment offer:`, error);
          }
        }, 2000); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Ä–∞—Å–∫–ª–∞–¥–∞
        
        return {
          success: true,
          message: aiResponse
        };
      } else {
        console.error(`‚ùå Failed to send AI layout message: ${result.error}`);
        return {
          success: false,
          error: result.error
        };
      }

    } catch (error) {
      console.error('‚ùå Error in sendAiLayoutMessage:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  async getMessageHistoryUntilCommand(
    chatId: string,
    customerId: string
  ): Promise<Array<{ role: 'user' | 'assistant'; content: string }>> {
    try {
      const chat = await Chat.findOne({ chatId, customerId });
      if (!chat) {
        console.log(`‚ö†Ô∏è Chat not found for chatId: ${chatId}`);
        return [];
      }

      const allMessages = await Message.find({
        chatId: chat._id,
        customerId: customerId
      })
        .sort({ timestamp: -1 })
        .limit(100)
        .lean();

      const history: Array<{ role: 'user' | 'assistant'; content: string }> = [];

      for (const msg of allMessages) {
        const messageText = msg.content?.text || '';
        
        if (messageText === '/start' || messageText === '/new_chat') {
          console.log(`üîç Found command "${messageText}", stopping history collection`);
          break;
        }

        if (msg.type === 'text' && messageText) {
          const role = msg.direction === 'in' ? 'user' : 'assistant';
          history.unshift({ role, content: messageText });
        }
      }

      console.log(`üìú Retrieved ${history.length} messages from history for chat ${chatId}`);
      
      return history;
    } catch (error) {
      console.error('‚ùå Error retrieving message history:', error);
      return [];
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AI-–æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   * @param systemPrompt - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   * @param messageHistory - –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–æ–ª—è–º–∏
   * @param model - –ú–æ–¥–µ–ª—å AI
   * @param temperature - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  async generateAIResponseWithHistory(
    systemPrompt: string,
    messageHistory: Array<{ role: 'user' | 'assistant'; content: string }>,
    model: string = "openai/gpt-4o-mini",
    temperature: number = 0.7,
    provider: 'vsegpt' | 'openai' = 'vsegpt'
  ): Promise<string | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∏–∑ –ë–î
      let settings = await AISettings.findOne();
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
      if (!settings) {
        settings = await AISettings.create({
          vsegptApiKey: process.env.VSE_GPT_API_KEY || ''
        });
      }

      let apiKey: string;

      if (provider === 'openai') {
        apiKey = settings.openaiApiKey || '';
        
        if (!apiKey) {
          throw new Error('OpenAI API key not configured');
        }
      } else {
        apiKey = settings.vsegptApiKey || process.env.VSE_GPT_API_KEY || '';
        
        if (!apiKey) {
          throw new Error('VseGPT API key not configured');
        }
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
      const proxySettings = settings.proxyEnabled ? {
        enabled: true,
        type: settings.proxyType || 'SOCKS5' as 'SOCKS5' | 'HTTP' | 'HTTPS',
        ip: settings.proxyIp || '',
        port: settings.proxyPort || 4145,
        username: settings.proxyUsername,
        password: settings.proxyPassword
      } : undefined;

      console.log(`üîç Proxy settings:`, {
        enabled: settings.proxyEnabled,
        type: settings.proxyType,
        ip: settings.proxyIp,
        port: settings.proxyPort,
        hasAuth: !!(settings.proxyUsername && settings.proxyPassword)
      });

      const messages: Array<{ role: string; content: string }> = [
        {
          role: "system",
          content: systemPrompt
        },
        ...messageHistory
      ];

      const requestData = {
        model,
        messages,
        temperature
      };

      console.log(`ü§ñ Sending AI request with ${messages.length} messages (including ${messageHistory.length} history messages) via ${provider}...`);
      
      const response = await this.sendRequestToAI(requestData, apiKey, provider, proxySettings);
      
      const aiMessage = response?.choices?.[0]?.message?.content;
      
      if (!aiMessage) {
        throw new Error('No content in AI response');
      }

      const cleanedResponse = this.cleanAIResponse(aiMessage);
      
      console.log(`‚úÖ AI response received (${cleanedResponse.length} characters)`);
      
      return cleanedResponse;
      
    } catch (error) {
      console.error('‚ùå Error generating AI response with history:', error);
      return null;
    }
  }

  async generateAIResponse(
    systemPrompt: string,
    userPrompts: string | string[],
    model: string = "openai/gpt-4o-mini",
    temperature: number = 0.7,
    provider: 'vsegpt' | 'openai' = 'vsegpt'
  ): Promise<string | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∏–∑ –ë–î
      let settings = await AISettings.findOne();
      
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
      if (!settings) {
        settings = await AISettings.create({
          vsegptApiKey: process.env.VSE_GPT_API_KEY || ''
        });
      }

      let apiKey: string;

      if (provider === 'openai') {
        apiKey = settings.openaiApiKey || '';
        
        if (!apiKey) {
          throw new Error('OpenAI API key not configured');
        }
      } else {
        apiKey = settings.vsegptApiKey || process.env.VSE_GPT_API_KEY || '';
        
        if (!apiKey) {
          throw new Error('VseGPT API key not configured');
        }
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
      const proxySettings = settings.proxyEnabled ? {
        enabled: true,
        type: settings.proxyType || 'SOCKS5' as 'SOCKS5' | 'HTTP' | 'HTTPS',
        ip: settings.proxyIp || '',
        port: settings.proxyPort || 4145,
        username: settings.proxyUsername,
        password: settings.proxyPassword
      } : undefined;

      console.log(`üîç Proxy settings:`, {
        enabled: settings.proxyEnabled,
        type: settings.proxyType,
        ip: settings.proxyIp,
        port: settings.proxyPort,
        hasAuth: !!(settings.proxyUsername && settings.proxyPassword)
      });

      const messages: Array<{ role: string; content: string }> = [
        {
          role: "system",
          content: systemPrompt
        }
      ];

      const userPromptsArray = Array.isArray(userPrompts) ? userPrompts : [userPrompts];
      
      for (const prompt of userPromptsArray) {
        messages.push({
          role: "user",
          content: prompt
        });
      }

      const requestData = {
        model,
        messages,
        temperature
      };

      console.log(`ü§ñ Sending AI request with ${messages.length} messages via ${provider}...`);
      
      const response = await this.sendRequestToAI(requestData, apiKey, provider, proxySettings);
      
      const aiMessage = response?.choices?.[0]?.message?.content;
      
      if (!aiMessage) {
        throw new Error('No content in AI response');
      }

      const cleanedResponse = this.cleanAIResponse(aiMessage);
      
      console.log(`‚úÖ AI response received (${cleanedResponse.length} characters)`);
      
      return cleanedResponse;
      
    } catch (error) {
      console.error('‚ùå Error generating AI response:', error);
      return null;
    }
  }

  // ========== –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ ==========
  
  private async handleProductRequest(customerId: string, chatId: string, productType: string, productName: string) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
      const user = await User.findOne({ chat_id: chatId, customerId: customerId });
      
      if (!user || !user.birthday) {
        // –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        await User.findOneAndUpdate(
          { chat_id: chatId, customerId: customerId },
          {
            $set: {
              chat_id: chatId,
              customerId: customerId,
              state: `product_${productType}_birthday`
            },
            $setOnInsert: {
              createdAt: new Date()
            }
          },
          { upsert: true, new: true }
        );

        await this.sendMessage(
          customerId,
          chatId,
          `‚ú® –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ *${productName}* –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)`,
          false,
          false,
          false,
          "Markdown"
        );
      } else {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
        await this.generateAndSendProduct(customerId, chatId, productType, user.birthday, productName);
      }
    } catch (error) {
      console.error(`‚ùå Error in handleProductRequest for ${productType}:`, error);
      await this.sendMessage(
        customerId,
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        false,
        false,
        false,
        "Markdown"
      );
    }
  }

  private async generateAndSendProduct(customerId: string, chatId: string, productType: string, birthDate: string, productName: string) {
    try {
      await this.sendMessage(
        customerId,
        chatId,
        `‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é *${productName}*...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`,
        false,
        false,
        false,
        "Markdown"
      );

      const tempDir = path.join(__dirname, '..', '..', 'temp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }

      const timestamp = Date.now();
      const filename = `${productType}_${birthDate.replace(/\./g, '-')}_${timestamp}.pdf`;
      const filePath = path.join(tempDir, filename);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
      await this.generateProductPDF(productType, birthDate, filePath);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
      const accompanimentText = this.getProductAccompanimentText(productType);
      await this.sendFile(
        customerId,
        chatId,
        filePath,
        accompanimentText
      );

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      setTimeout(() => {
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
        }
      }, 5000);

      console.log(`‚úÖ Product ${productType} sent to chat ${chatId}`);
    } catch (error) {
      console.error(`‚ùå Error generating/sending product ${productType}:`, error);
      await this.sendMessage(
        customerId,
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        false,
        false,
        false,
        "Markdown"
      );
    }
  }

  private async generateProductPDF(productType: string, birthDate: string, filePath: string): Promise<void> {
    return new Promise((resolve, reject) => {
      try {
        const writeStream = fs.createWriteStream(filePath);
        
        writeStream.on('finish', () => {
          resolve();
        });
        
        writeStream.on('error', (error) => {
          reject(error);
        });

        switch (productType) {
          case 'forecast':
            this.generateForecastData(birthDate, writeStream);
            break;
          case 'financialCast':
            this.generateFinancialCastData(birthDate, writeStream);
            break;
          case 'mistakesIncarnation':
            this.generateMistakesIncarnationData(birthDate, writeStream);
            break;
          case 'arcanumRealization':
            this.generateArcanumRealizationData(birthDate, writeStream, filePath);
            break;
          case 'awakeningCodes':
            this.generateAwakeningCodesData(birthDate, writeStream);
            break;
          default:
            writeStream.end();
            reject(new Error(`Unknown product type: ${productType}`));
            break;
        }
      } catch (error) {
        reject(error);
      }
    });
  }

  private generateForecastData(birthDate: string, stream: Writable) {
    const parts = birthDate.split(".");
    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10);
    const year = parts[2];

    const yearSum = year.split("").reduce((acc: any, digit: any) => acc + parseInt(digit, 10), 0);
    const rawYearDoorSum = day + month + yearSum + 9 + 10;
    const yearDoorArcana = toArcana(rawYearDoorSum);
    const rawEventsSum = day + 9 + 16;
    const eventsArcana = toArcana(rawEventsSum);

    const monthNames = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"];
    const currentMonthIndex = new Date().getMonth();
    const monthlyForecasts = [];

    for (let i = 0; i < 7; i++) {
      const targetMonthIndex = (currentMonthIndex + i) % 12;
      const monthNumber = targetMonthIndex + 1;
      const examArcana = toArcana(day + monthNumber);
      const rawRiskSum = day + monthNumber + yearSum + 9 + 18;
      const riskArcana = toArcana(rawRiskSum);

      monthlyForecasts.push({
        monthName: monthNames[targetMonthIndex],
        exam: { arcanum: examArcana, text: (monthsData as any)[examArcana] || "–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
        risk: { arcanum: riskArcana, text: (riskData as any)[riskArcana] || "–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }
      });
    }

    const forecastData = {
      yearDoor: { arcanum: yearDoorArcana, text: (yearDoorData as any)[yearDoorArcana] || "–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
      events: { arcanum: eventsArcana, text: (eventsData as any)[eventsArcana] || "–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
      monthlyForecasts
    };

    generateForecastPdf(forecastData, stream, birthDate);
  }

  private generateFinancialCastData(birthDate: string, stream: Writable) {
    const parts = birthDate.split(".");
    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10);
    const year = parts[2];

    const yearSum = year.split("").reduce((acc: any, digit: any) => acc + parseInt(digit, 10), 0);
    const arcanRealization = toArcana(day) + month + splitNumberIntoDigits(yearSum)[0];
    const arcanMainBlock = toArcana(day) + splitNumberIntoDigits(month)[0];
    const moneyKnot = toArcana(arcanRealization + arcanMainBlock);
    const archetypePoverty = toArcana(toArcana(day) + month);
    const duty = toArcana(day + splitNumberIntoDigits(month)[0] + yearSum + 8);
    const shadowWealth = toArcana(day + month + yearSum);

    const financialCastData = {
      moneyKnot: { arcanum: moneyKnot, text: (knotData as any)[moneyKnot] || "–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
      archetypePoverty: { arcanum: archetypePoverty, text: (archetypePovertyData as any)[archetypePoverty] || "–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
      duty: { arcanum: duty, text: (dutyData as any)[duty] || "–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
      shadowWealth: { arcanum: shadowWealth, text: (shadowBData as any)[shadowWealth] || "–¢—Ä–∞–∫—Ç–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" },
      ritualsMap: Object.entries(ritualsData as any).map(([title, text]) => ({ title, text: text as string }))
    };

    generateFinancialCastPdf(financialCastData, stream, birthDate);
  }

  private generateMistakesIncarnationData(birthDate: string, stream: Writable) {
    const parts = birthDate.split(".");
    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10);

    const lessonIncarnation = month;
    const karmicLessons = Math.abs(toArcana(day) - toArcana(month));

    const mistakesIncarnationData = {
      lessonIncarnation: { arcanum: lessonIncarnation, text: (lessonIncarnationData as any)[lessonIncarnation] || "" },
      karmicLessons: { arcanum: karmicLessons, text: (karmicLessonsData as any)[karmicLessons] || "" }
    };

    generateMistakesIncarnationPdf(mistakesIncarnationData, stream, birthDate);
  }

  private generateArcanumRealizationData(birthDate: string, stream: Writable, outputPath: string) {
    const parts = birthDate.split(".");
    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10);
    const year = parts[2];

    const yearSum = year.split("").reduce((acc: any, digit: any) => acc + parseInt(digit, 10), 0);
    const finalNumber = toArcana(day + month + yearSum);
    
    const arcanFilePath = getArcanFilePath(finalNumber, __dirname, ["..", "..", "src", "data", "arcanumRealization"]);
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PDF —Ñ–∞–π–ª
    const readStream = fs.createReadStream(arcanFilePath);
    readStream.pipe(stream);
  }

  private generateAwakeningCodesData(birthDate: string, stream: Writable) {
    const parts = birthDate.split(".");
    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10);
    const year = parts[2];

    const yearSum = year.split("").reduce((acc: any, digit: any) => acc + parseInt(digit, 10), 0);
    const core = toArcana(day);
    const fear = toArcana(day + month);
    const implementation = toArcana(core + month + yearSum);

    const awakeningCodesData = {
      core: { arcanum: core, text: (coreData as any)[core] || "" },
      fear: { arcanum: fear, text: (fearData as any)[fear] || "" },
      implementation: { arcanum: implementation, text: (implementationData as any)[implementation] || "" }
    };

    generateAwakeningCodesPdf(awakeningCodesData, stream, birthDate);
  }

  private getProductAccompanimentText(productType: string): string {
    const texts: { [key: string]: string } = {
      forecast: "üîÆ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¢–∞—Ä–æ—Å–∫–æ–ø –≥–æ—Ç–æ–≤! –£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –∂–¥—ë—Ç –≤–∞—Å –≤ –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—è—Ü—ã.",
      financialCast: "üí∞ –í–∞—à–∏ –¥–µ–Ω–µ–∂–Ω—ã–µ –∫–æ–¥—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –∑–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±–∏–ª–∏—è.",
      mistakesIncarnation: "üï∞Ô∏è –£–∑–Ω–∞–π—Ç–µ –æ–± —É—Ä–æ–∫–∞—Ö –≤–∞—à–µ–≥–æ –ø—Ä–æ—à–ª–æ–≥–æ –≤–æ–ø–ª–æ—â–µ–Ω–∏—è –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö.",
      arcanumRealization: "‚ú® –í–∞—à –∞—Ä–∫–∞–Ω —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–∫—Ä—ã—Ç! –ü–æ–∑–Ω–∞–π—Ç–µ —Å–≤–æ–π –∏—Å—Ç–∏–Ω–Ω—ã–π –ø—É—Ç—å.",
      awakeningCodes: "‚ú® –¢—Ä–∏ –∫–æ–¥–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã! –£–∑–Ω–∞–π—Ç–µ —Å–≤–æ—é —Å—É—Ç—å, —Å—Ç—Ä–∞—Ö –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é."
    };
    return texts[productType] || "‚ú® –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≥–æ—Ç–æ–≤!";
  }

  async stop() {
    console.log('üõë Stopping BotManager...');

    for (const botInstance of this.bots.values()) {
      await this.stopBotListening(botInstance);
    }

    this.bots.clear();
    console.log('üõë BotManager stopped');
    this.emit('manager:stopped');
  }

  async reload() {
    console.log('üîÑ Reloading all bots...');

    for (const botInstance of this.bots.values()) {
      await this.stopBotListening(botInstance);
    }

    this.bots.clear();
    await this.loadAllBots();
    console.log(`‚úÖ Reloaded ${this.bots.size} bots`);
    this.emit('manager:reloaded', { botsCount: this.bots.size });
  }
}

export const botManager = new BotManager();
export default botManager;
