import { EventEmitter } from 'events';
import User from '../models/user.model';
import { Message } from '../models/messages.model';
import { Chat } from '../models/chat.model';
import DailyMessageLog from '../models/dailyMessageLog.model';
import { botManager } from './botManager.service';
import mongoose from 'mongoose';

interface DailyMessagingConfig {
    enabled: boolean;
    minHour: number; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–∞—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (0-23)
    maxHour: number; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —á–∞—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (0-23)
}

class DailyMessagingService extends EventEmitter {
    private config: DailyMessagingConfig;
    private intervalId: NodeJS.Timeout | null = null;
    private isRunning: boolean = false;
    private lastSentDate: string | null = null;

    constructor() {
        super();
        this.config = {
            enabled: false,
            minHour: 9, // –° 9 —É—Ç—Ä–∞
            maxHour: 21, // –î–æ 9 –≤–µ—á–µ—Ä–∞
        };
        console.log('üìÖ DailyMessagingService initialized');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
     * @param customerId - ID –∫–∞—Å—Ç–æ–º–µ—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
     * @param chatId - ID —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω - –∏—â–µ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
     */
    async getAllUsers(customerId?: string, chatId?: string): Promise<Array<{ customerId: string; chatId: string; customerName: string }>> {
        try {
            let query: any = {};
            
            if (customerId) {
                const mongoose = require('mongoose');
                query.customerId = new mongoose.Types.ObjectId(customerId);
            }
            
            if (chatId) {
                query.chat_id = chatId;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
            const users = await User.find(query, 'chat_id customerId')
                .populate('customerId', 'username')
                .lean();
                
            console.log('Query:', query);
            console.log('Found users:', users.length);
            
            const result = users.map((user: any) => ({
                customerId: user.customerId?._id?.toString() ?? '',
                chatId: user.chat_id,
                customerName: user.customerId?.username ?? 'Unknown'
            }));
        
            console.log(`üìä Found ${result.length} users for daily messaging`);
            return result;
        } catch (error) {
            console.error('‚ùå Error getting users:', error);
            throw error;
        }
    }
      

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
     */
    async getUserChatHistory(customerId: string, chatId: string): Promise<string[]> {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º customerId –≤ ObjectId –¥–ª—è –ø–æ–∏—Å–∫–∞
            const mongoose = require('mongoose');
            const customerObjectId = new mongoose.Types.ObjectId(customerId);
            
            const chat = await Chat.findOne({ customerId: customerObjectId, chatId });
            if (!chat) {
                return [];
            }

            const messages = await Message.find({ chatId: chat._id })
                .sort({ timestamp: -1 })
                .lean();

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userMessages = messages
                .filter(msg => msg.direction === 'in' && msg.content?.text)
                .map(msg => msg.content.text)
                .filter((text): text is string => text !== undefined)

            return userMessages;
        } catch (error) {
            console.error(`‚ùå Error getting chat history for ${chatId}:`, error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async getSentMessagesHistory(customerId: string, chatId: string, limit: number = 10): Promise<string[]> {
        try {
            const customerObjectId = new mongoose.Types.ObjectId(customerId);
            
            const logs = await DailyMessageLog.find({ 
                customerId: customerObjectId, 
                chatId 
            })
            .sort({ sentAt: -1 })
            .limit(limit)
            .lean();

            return logs.map(log => log.message);
        } catch (error) {
            console.error(`‚ùå Error getting sent messages history for ${chatId}:`, error);
            return [];
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async saveSentMessageLog(
        customerId: string, 
        chatId: string, 
        message: string, 
        userMessages: string[]
    ): Promise<void> {
        try {
            const customerObjectId = new mongoose.Types.ObjectId(customerId);
            
            await DailyMessageLog.create({
                customerId: customerObjectId,
                chatId,
                message,
                userMessages,
                sentAt: new Date()
            });

            console.log(`üìù Saved message log for ${chatId}`);
        } catch (error) {
            console.error(`‚ùå Error saving message log for ${chatId}:`, error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π API –∫–ª—é—á–∞ –∏ JSON —Ç–µ–ª–∞
    // –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fetch (–∏–ª–∏ axios, –µ—Å–ª–∏ fetch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    // –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä —Å fetch (node-fetch –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π fetch –≤ Node 18+)
    // –í–ê–ñ–ù–û: –∏–º–ø–æ—Ä—Ç fetch –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, import fetch from 'node-fetch';)

    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    // const response = await this.sendRequestToServer('https://example.com/api', { key: 'value' }, 'YOUR_API_KEY');

    async sendRequestToVseGPT(data: any, apiKey: string): Promise<any> {
        try {
            const response = await fetch("https://api.vsegpt.ru/v1/chat/completions", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Request failed: ${response.status} ${response.statusText} - ${errorText}`);
            }

            return await response.json();
        } catch (error) {
            console.error('‚ùå Error sending request to server:', error);
            throw error;
        }
    }

    /**
     * –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
     */
    async generatePersonalizedMessage(userMessages: string[], customerId: string, chatId: string): Promise<string> {
        if (userMessages.length === 0) {
            const tarotInvitations = [
                "üîÆ –ö–∞—Ä—Ç—ã —Ç–∞—Ä–æ —à–µ–ø—á—É—Ç –≤–∞—à–µ –∏–º—è... –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Å–∫—Ä—ã–≤–∞—é—Ç –∑–≤–µ–∑–¥—ã?",
                "‚ú® –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å –æ—Å–æ–±–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –µ–≥–æ —É—Å–ª—ã—à–∞—Ç—å?",
                "üåô –õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ —è—Ä–∫–∞—è... –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ—Ä–∞ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É?",
                "üåü –ó–≤–µ–∑–¥—ã –≤—ã—Å—Ç—Ä–æ–∏–ª–∏—Å—å –≤ –æ—Å–æ–±—ã–π —É–∑–æ—Ä –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç?",
                "üîÆ –¢–∞—Ä–æ –∫–∞—Ä—Ç—ã –∂–¥—É—Ç –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞... –ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–æ–ª–Ω—É–µ—Ç —Å–µ–≥–æ–¥–Ω—è?",
                "‚ú® –≠–Ω–µ—Ä–≥–∏—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–∞. –ì–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã?",
                "üåô –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–∞–π–Ω—ã –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ. –û —á–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?",
                "üåü –°—É–¥—å–±–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å?",
                "üîÆ –¢–∞—Ä–æ –∫–∞—Ä—Ç—ã –∑–æ–≤—É—Ç –≤–∞—Å –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞–º —Å—É–¥—å–±—ã. –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
                "‚ú® –°–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –≥–∞–¥–∞–Ω–∏–π. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"
            ];
            
            const randomIndex = Math.floor(Math.random() * tarotInvitations.length);
            return tarotInvitations[randomIndex];
        }

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const sentMessagesHistory = await this.getSentMessagesHistory(customerId, chatId, 5);
            
            console.log('User messages:', userMessages.join(', '));
            console.log('Sent messages history:', sentMessagesHistory.join(', '));
            
            const prompt = {
                model: "openai/gpt-4o-mini",
                messages: [
                  {
                    role: "system",
                    content: `–¢—ã ‚Äî –¥–µ–≤—É—à–∫–∞ üë©, –ª—ë–≥–∫–∏–π –∏ –¥—Ä—É–∂–µ—Å–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. 
              –û–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω—É–∂–Ω–æ–π —Ñ–æ—Ä–º–µ ("–¢—ã –≥–æ–≤–æ—Ä–∏–ª..." –∏–ª–∏ "–¢—ã –ø–∏—Å–∞–ª–∞...").  
              
              –¢–≤–æ—è –∑–∞–¥–∞—á–∞: –≤–∑—è—Ç—å –æ–¥–Ω—É —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–¥–∞—Ç—å –ø–æ –Ω–µ–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å. 
              –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–∏–º, —á—Ç–æ–±—ã –Ω–∞ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∏—Ç—å "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".  
              
              –§–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞:
              - –ù–∞—á–∞–ª–æ —Å –æ—Ç—Å—ã–ª–∫–æ–π –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ("–¢—ã –≥–æ–≤–æ—Ä–∏–ª –ø—Ä–æ ...", "–ü–æ–º–Ω—é, —Ç—ã –ø–∏—Å–∞–ª –ø—Ä–æ ...", "–¢—ã —É–ø–æ–º–∏–Ω–∞–ª –ø—Ä–æ ..."). 
              - –ó–∞—Ç–µ–º –ø—Ä–æ—Å—Ç–æ–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å ("... —É–¥–∞–ª–æ—Å—å?", "... –ø–æ–ª—É—á–∏–ª–æ—Å—å?", "... —ç—Ç–æ –µ—â—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ?", "... —Ç—ã –¥–æ–≤–æ–ª–µ–Ω?").  
              
              –ü—Ä–∞–≤–∏–ª–∞:
              - –õ—ë–≥–∫–∏–π, –¥—Ä—É–∂–µ—Å–∫–∏–π —Ç–æ–Ω.  
              - –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å.  
              - –ù–µ —É–ø–æ–º–∏–Ω–∞–π –∫–∞—Ä–º—É, —ç–∑–æ—Ç–µ—Ä–∏–∫—É, –º–∏—Å—Ç–∏–∫—É.  
              - –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–¥–∞–≤–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ (—Å–ø–∏—Å–æ–∫ –Ω–∏–∂–µ).  
              - –í—ã–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º –≤–æ–ø—Ä–æ—Å, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.`
                  },
                  {
                    role: "user",
                    content: `–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userMessages.join(', ')}
              
              –†–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –∏—Ö):
              ${sentMessagesHistory.length > 0 ? sentMessagesHistory.join('\n') : '–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤'}`
                  }
                ]
              };
              
                                                   
              

            const response = await this.sendRequestToVseGPT(prompt, process.env.VSE_GPT_API_KEY || '');
            return response.choices[0].message.content;
        } catch (error) {
            console.error('‚ùå Error generating AI message, using fallback:', error);
            
            const tarotInvitations = [
                "üîÆ –ö–∞—Ä—Ç—ã —Ç–∞—Ä–æ —à–µ–ø—á—É—Ç –≤–∞—à–µ –∏–º—è... –ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Å–∫—Ä—ã–≤–∞—é—Ç –∑–≤–µ–∑–¥—ã?",
                "‚ú® –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –≤–∞—Å –æ—Å–æ–±–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ. –•–æ—Ç–∏—Ç–µ –µ–≥–æ —É—Å–ª—ã—à–∞—Ç—å?",
                "üåô –õ—É–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å–æ–±–µ–Ω–Ω–æ —è—Ä–∫–∞—è... –ú–æ–∂–µ—Ç –±—ã—Ç—å, –ø–æ—Ä–∞ —É–∑–Ω–∞—Ç—å —Å–≤–æ—é —Å—É–¥—å–±—É?"
            ];
            
            const randomIndex = Math.floor(Math.random() * tarotInvitations.length);
            return tarotInvitations[randomIndex];
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    async sendPersonalizedMessage(
        customerId: string, 
        chatId: string, 
        customerName: string
    ): Promise<{ success: boolean; error?: string }> {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userMessages = await this.getUserChatHistory(customerId, chatId);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const personalizedMessage = await this.generatePersonalizedMessage(userMessages, customerId, chatId);
            
            console.log(`üì® Sending personalized message to ${chatId} (${customerName}): "${personalizedMessage}"`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ BotManager
            const result = await botManager.sendMessage(customerId, chatId, personalizedMessage);
            
            if (result.success) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await this.saveSentMessageLog(customerId, chatId, personalizedMessage, userMessages);
                
                this.emit('message:sent', { 
                    customerId, 
                    chatId, 
                    customerName, 
                    message: personalizedMessage,
                    userMessagesCount: userMessages.length
                });
                console.log(`‚úÖ Personalized message sent to ${chatId} (${customerName})`);
            } else {
                this.emit('message:failed', { 
                    customerId, 
                    chatId, 
                    customerName, 
                    error: result.error 
                });
                console.error(`‚ùå Failed to send message to ${chatId} (${customerName}): ${result.error}`);
            }

            return result;
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            console.error(`‚ùå Error sending personalized message to ${chatId}:`, error);
            this.emit('message:error', { customerId, chatId, customerName, error: errorMessage });
            return { success: false, error: errorMessage };
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
     */
    async sendDailyMessagesToAllUsers(): Promise<{
        total: number;
        success: number;
        failed: number;
        results: Array<{ customerId: string; chatId: string; customerName: string; success: boolean; error?: string }>;
    }> {
        try {
            console.log('üìÖ Starting daily messaging to all users...');
            
            const users = await this.getAllUsers(); // –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const results = [];
            let successCount = 0;
            let failedCount = 0;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏
            for (const user of users) {
                const result = await this.sendPersonalizedMessage(
                    user.customerId, 
                    user.chatId, 
                    user.customerName
                );
                
                results.push({
                    customerId: user.customerId,
                    chatId: user.chatId,
                    customerName: user.customerName,
                    success: result.success,
                    error: result.error
                });

                if (result.success) {
                    successCount++;
                } else {
                    failedCount++;
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (100–º—Å)
                await new Promise(resolve => setTimeout(resolve, 100));
            }

            const summary = {
                total: users.length,
                success: successCount,
                failed: failedCount,
                results
            };

            console.log(`üìä Daily messaging completed: ${successCount}/${users.length} successful`);
            this.emit('daily:completed', summary);

            return summary;
        } catch (error) {
            console.error('‚ùå Error in sendDailyMessagesToAllUsers:', error);
            this.emit('daily:error', { error });
            throw error;
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ–≥–æ–¥–Ω—è
     */
    private getRandomTimeToday(): Date {
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —á–∞—Å –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        const randomHour = Math.floor(
            Math.random() * (this.config.maxHour - this.config.minHour + 1) + this.config.minHour
        );
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º–∏–Ω—É—Ç—ã (0-59)
        const randomMinutes = Math.floor(Math.random() * 60);
        
        const randomTime = new Date(today);
        randomTime.setHours(randomHour, randomMinutes, 0, 0);
        
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if (randomTime <= now) {
            randomTime.setDate(randomTime.getDate() + 1);
        }
        
        return randomTime;
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
     */
    startDailyScheduler(): void {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Daily messaging scheduler is already running');
            return;
        }

        if (!this.config.enabled) {
            console.log('‚è∏Ô∏è Daily messaging is disabled, scheduler not started');
            return;
        }

        this.isRunning = true;
        console.log('üöÄ Starting daily messaging scheduler...');

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
        this.scheduleNextDailyMessage();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        this.intervalId = setInterval(() => {
            this.checkDailySchedule();
        }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        this.emit('scheduler:started');
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
     */
    stopDailyScheduler(): void {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è Daily messaging scheduler is not running');
            return;
        }

        this.isRunning = false;

        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }

        console.log('üõë Daily messaging scheduler stopped');
        this.emit('scheduler:stopped');
    }

    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private scheduleNextDailyMessage(): void {
        const nextTime = this.getRandomTimeToday();
        console.log(`‚è∞ Next daily message scheduled for: ${nextTime.toISOString()}`);
        this.emit('message:scheduled', { nextTime });
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private async checkDailySchedule(): Promise<void> {
        const now = new Date();
        const today = now.toDateString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        if (this.lastSentDate === today) {
            return;
        }

        const currentHour = now.getHours();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (currentHour >= this.config.minHour && currentHour <= this.config.maxHour) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 1/60 (—Ä–∞–∑ –≤ —á–∞—Å –≤ —Å—Ä–µ–¥–Ω–µ–º)
            if (Math.random() < (1 / 60)) {
                console.log('üé≤ Random trigger activated for daily messaging!');
                await this.sendDailyMessagesToAllUsers();
                this.lastSentDate = today;
                
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                this.scheduleNextDailyMessage();
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    updateConfig(newConfig: Partial<DailyMessagingConfig>): void {
        const oldConfig = { ...this.config };
        this.config = { ...this.config, ...newConfig };

        console.log('‚öôÔ∏è Daily messaging config updated:', {
            enabled: this.config.enabled,
            minHour: this.config.minHour,
            maxHour: this.config.maxHour
        });

        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å enabled, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if (oldConfig.enabled !== this.config.enabled) {
            if (this.config.enabled) {
                this.startDailyScheduler();
            } else {
                this.stopDailyScheduler();
            }
        }

        this.emit('config:updated', { oldConfig, newConfig: this.config });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    getConfig(): DailyMessagingConfig {
        return { ...this.config };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
     */
    getStatus(): {
        isRunning: boolean;
        enabled: boolean;
        lastSentDate: string | null;
        nextCheckTime: Date;
    } {
        return {
            isRunning: this.isRunning,
            enabled: this.config.enabled,
            lastSentDate: this.lastSentDate,
            nextCheckTime: new Date(Date.now() + 60000) // –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        };
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–π—á–∞—Å
     */
    async sendNow(): Promise<any> {
        console.log('üöÄ Force sending daily messages now...');
        return await this.sendDailyMessagesToAllUsers();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const dailyMessagingService = new DailyMessagingService();
export default dailyMessagingService;
