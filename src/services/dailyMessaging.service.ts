import * as cron from "node-cron";
import { EventEmitter } from "events";

import User from "../models/user.model";
import { DailyMessagingConfig, DailyUser } from "../interfaces/dailyMessaging";
import { toArcana } from "../utils/arcan";
import botManager from "./botManager.service";
import DailyMessagingConfigModel from "../models/dailyMessagingConfig.model";
import DailyMessagingRunModel from "../models/dailyMessagingRun.model";

class DailyMessagingService extends EventEmitter {
  private config: DailyMessagingConfig;
  private cronJob: cron.ScheduledTask | null = null;
  private isRunning: boolean = false;
  private lastSentDate: string | null = null;
  
  // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –º–∏–Ω—É—Ç–∞–º
  private static readonly MINUTES_IN_WINDOW: number = 60;

  constructor() {
    super();
    this.config = {
      enabled: false,
      time: '09:00', // 9 —É—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      timezone: 'Europe/Moscow', // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      maxConcurrency: 3,
      perMessageDelayMs: 0,
      promptSystem: '',
      promptUserTemplate: '',
      model: 'openai/gpt-4o-mini',
      temperature: 0.7,
      sendFormat: 'Markdown'
    };
    console.log('üìÖ DailyMessagingService initialized');
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async initializeFromDatabase(): Promise<void> {
    try {
      const existing = await DailyMessagingConfigModel.findOne({ key: 'default' }).lean();
      if (!existing) {
        const defaults = {
          key: 'default',
          enabled: false,
          time: '09:00',
          timezone: 'Europe/Moscow',
          maxConcurrency: 3,
          perMessageDelayMs: 0,
          promptSystem: this.getDefaultSystemPrompt(),
          promptUserTemplate: this.getDefaultUserTemplate(),
          llmModel: 'openai/gpt-4o-mini',
          temperature: 0.7,
          sendFormat: 'Markdown' as const
        };
        await DailyMessagingConfigModel.create(defaults as any);
        this.config = { ...defaults } as DailyMessagingConfig;
      } else {
        this.config = {
          enabled: existing.enabled,
          time: existing.time,
          timezone: existing.timezone,
          maxConcurrency: existing.maxConcurrency,
          perMessageDelayMs: existing.perMessageDelayMs,
          promptSystem: existing.promptSystem,
          promptUserTemplate: existing.promptUserTemplate,
          model: (existing as any).llmModel,
          temperature: existing.temperature,
          sendFormat: existing.sendFormat as any
        };
      }
      console.log('‚öôÔ∏è Loaded DailyMessaging config from DB');
    } catch (error) {
      console.error('‚ùå Failed to load DailyMessaging config from DB:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
   */
  async getUsersForMessaging(): Promise<DailyUser[]> {
    try {
      // –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–µ –ø—É—Å—Ç–∞—è)
      const users = await User.find({
        birthday: { $exists: true, $nin: [null, ''] }
      }, 'chat_id customerId birthday')
        .populate('customerId', 'username')
        .lean();

      const result: DailyUser[] = users.map((user: any) => ({
        customerId: user.customerId?._id?.toString() ?? '',
        chatId: user.chat_id,
        customerName: user.customerId?.username ?? 'Unknown',
        birthday: user.birthday
      }));

      console.log(`üìÖ Found ${result.length} users for daily messaging`);
      return result;
    } catch (error) {
      console.error('‚ùå Error getting users for daily messaging:', error);
      throw error;
    }
  }

  async sendRequestToVseGPT(data: any, apiKey: string): Promise<any> {
    try {
      const response = await fetch("https://api.vsegpt.ru/v1/chat/completions", {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Request failed: ${response.status} ${response.statusText} - ${errorText}`);
      }

      return await response.json();
    } catch (error) {
      console.error('‚ùå Error sending request to server:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —á–∞—Å –∏ –º–∏–Ω—É—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ç–∞–π–º–∑–æ–Ω–µ
   */
  private getCurrentHourMinuteInTimezone(): { hour: number; minute: number; isoInTz: string } {
    const formatter = new Intl.DateTimeFormat('ru-RU', {
      timeZone: this.config.timezone,
      hour12: false,
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    });
    const parts = formatter.formatToParts(new Date());
    const get = (type: string) => parts.find(p => p.type === type)?.value ?? '00';
    const hour = parseInt(get('hour'), 10);
    const minute = parseInt(get('minute'), 10);
    const isoInTz = `${get('year')}-${get('month')}-${get('day')}T${get('hour')}:${get('minute')}:00`;
    return { hour, minute, isoInTz };
  }

  /**
   * –•–µ—à –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –º–∏–Ω—É—Ç–∞–º –æ–∫–Ω–∞ (0-59)
   */
  private getMinuteBucketForUser(user: DailyUser): number {
    const key = `${user.customerId}:${user.chatId}`;
    let hash = 5381;
    for (let i = 0; i < key.length; i++) {
      hash = ((hash << 5) + hash) + key.charCodeAt(i);
      hash = hash | 0;
    }
    const bucket = Math.abs(hash) % DailyMessagingService.MINUTES_IN_WINDOW;
    return bucket;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async generateDailyMessage(user: DailyUser): Promise<string | null> {
    try {
      const getDigitSum = (dateStr: string) => dateStr.split('.').reduce((sum: number, part: string) => 
        sum + part.split('').reduce((s, d) => s + +d, 0), 0
      );
      
      const today = new Date().toLocaleDateString('ru-RU');
      const numb1 = toArcana(getDigitSum(user.birthday));
      const numb2 = toArcana(getDigitSum(today));
      const sum12 = toArcana(numb1 + numb2);
      
      const arcan = [
        numb2, 
        sum12, 
        toArcana(numb1 + sum12), 
        toArcana(numb2 + sum12), 
        toArcana(sum12 + toArcana(numb1 + sum12) + toArcana(numb2 + sum12))
      ];
      
      const systemPrompt = (this.config as any).promptSystem && (this.config as any).promptSystem.length > 0
        ? (this.config as any).promptSystem as string
        : this.getDefaultSystemPrompt();

      const userTemplate = (this.config as any).promptUserTemplate && (this.config as any).promptUserTemplate.length > 0
        ? (this.config as any).promptUserTemplate as string
        : this.getDefaultUserTemplate();

      const filledUser = userTemplate
        .replace(/\{\{birthday\}\}/g, user.birthday)
        .replace(/\{\{today\}\}/g, today)
        .replace(/\{\{arcan0\}\}/g, String(arcan[0]))
        .replace(/\{\{arcan1\}\}/g, String(arcan[1]))
        .replace(/\{\{arcan2\}\}/g, String(arcan[2]))
        .replace(/\{\{arcan3\}\}/g, String(arcan[3]))
        .replace(/\{\{arcan4\}\}/g, String(arcan[4]));

      const filledSystem = systemPrompt
        .replace(/\{\{birthday\}\}/g, user.birthday)
        .replace(/\{\{today\}\}/g, today)
        .replace(/\{\{arcan0\}\}/g, String(arcan[0]))
        .replace(/\{\{arcan1\}\}/g, String(arcan[1]))
        .replace(/\{\{arcan2\}\}/g, String(arcan[2]))
        .replace(/\{\{arcan3\}\}/g, String(arcan[3]))
        .replace(/\{\{arcan4\}\}/g, String(arcan[4]));

      const model = (this.config as any).model || 'openai/gpt-4o-mini';
      const temperature = (this.config as any).temperature ?? 0.7;

      const prompt = {
        model,
        temperature,
        messages: [
          {
            role: "system",
            content: filledSystem
          },
          {
            role: "user",
            content: filledUser
          }
        ]
      };

      const response = await this.sendRequestToVseGPT(prompt, process.env.VSE_GPT_API_KEY || '');
      const message = this.sanitizeGenerated(response.choices[0].message.content, (this.config as any).sendFormat as any);
      return message;
    } catch (error) {
      console.error('‚ùå Error generating daily message:', error);
      return null;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendDailyMessage(user: DailyUser): Promise<{ success: boolean; error?: string }> {
    try {
      const dailyMessage = await this.generateDailyMessage(user);
      if (!dailyMessage) {
        return { success: false, error: 'Failed to generate daily message' };
      }
      console.log(`üìÖ Sending daily message to ${user.chatId} (${user.customerName})`);
      
      const result = await botManager.sendMessage(
        user.customerId,
        user.chatId,
        dailyMessage,
        false,
        false,
        false,
        ((this.config as any).sendFormat as any) || "Markdown"
      );
      
      if (result.success) {
        this.emit('daily:sent', { 
          customerId: user.customerId, 
          chatId: user.chatId, 
          customerName: user.customerName,
          message: dailyMessage
        });
        console.log(`‚úÖ Daily message sent to ${user.chatId} (${user.customerName})`);
      } else {
        this.emit('daily:failed', { 
          customerId: user.customerId, 
          chatId: user.chatId, 
          customerName: user.customerName,
          error: result.error 
        });
        console.error(`‚ùå Failed to send daily message to ${user.chatId} (${user.customerName}): ${result.error}`);
      }

      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error(`‚ùå Error sending daily message to ${user.chatId}:`, error);
      this.emit('daily:error', { customerId: user.customerId, chatId: user.chatId, customerName: user.customerName, error: errorMessage });
      return { success: false, error: errorMessage };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  async sendDailyMessagesToAll(): Promise<{
    total: number;
    success: number;
    failed: number;
    results: Array<{ customerId: string; chatId: string; customerName: string; success: boolean; error?: string }>;
  }> {
    try {
      console.log('üìÖ Starting daily messaging to all users...');
      
      const users = await this.getUsersForMessaging();
      const results: Array<{ customerId: string; chatId: string; customerName: string; success: boolean; error?: string }> = [];
      let successCount = 0;
      let failedCount = 0;

      for (const user of users) {
        const result = await this.sendDailyMessage(user);
        
        results.push({
          customerId: user.customerId,
          chatId: user.chatId,
          customerName: user.customerName,
          success: result.success,
          error: result.error
        });

        if (result.success) {
          successCount++;
        } else {
          failedCount++;
        }

        await new Promise(resolve => setTimeout(resolve, 200));
      }

      const summary = {
        total: users.length,
        success: successCount,
        failed: failedCount,
        results
      };

      console.log(`üìÖ Daily messaging completed: ${successCount}/${users.length} successful`);
      this.emit('daily:completed', summary);

      return summary;
    } catch (error) {
      console.error('‚ùå Error in sendDailyMessagesToAll:', error);
      this.emit('daily:error', { error });
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á–µ–π bucket —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç–æ–π
   */
  private async sendDailyMessagesForCurrentMinuteBucket(): Promise<void> {
    const { hour, minute, isoInTz } = this.getCurrentHourMinuteInTimezone();
    if (hour !== 9) {
      return;
    }

    const allUsers = await this.getUsersForMessaging();
    const bucketUsers = allUsers.filter(u => this.getMinuteBucketForUser(u) === minute);

    console.log(`üéØ ${bucketUsers.length}/${allUsers.length} users in minute bucket ${minute} at ${isoInTz} (${this.config.timezone})`);

    let successCount = 0;
    let failedCount = 0;

    // –ü—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º concurrency
    const concurrency = Math.max(1, this.config.maxConcurrency);
    const delayMs = Math.max(0, this.config.perMessageDelayMs);
    let index = 0;

    const worker = async () => {
      while (index < bucketUsers.length) {
        const current = index++;
        const user = bucketUsers[current];
        const result = await this.sendDailyMessage(user);
        if (result.success) {
          successCount++;
        } else {
          failedCount++;
        }
        if (delayMs > 0) {
          await new Promise(resolve => setTimeout(resolve, delayMs));
        }
      }
    };

    const workers = Array.from({ length: Math.min(concurrency, bucketUsers.length) }, () => worker());
    await Promise.all(workers);

    console.log(`üìä Minute ${minute}: sent ${successCount} ok, ${failedCount} failed`);
    try {
      await DailyMessagingRunModel.create({
        startedAt: new Date(),
        finishedAt: new Date(),
        total: bucketUsers.length,
        success: successCount,
        failed: failedCount,
        successRate: bucketUsers.length > 0 ? successCount / bucketUsers.length : 0,
        results: [],
        trigger: 'scheduler'
      });
    } catch (e) {
      console.error('‚ùå Failed to save scheduler minute result:', e);
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
   */
  startDailyScheduler(): void {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è Daily messaging scheduler is already running');
      return;
    }

    if (!this.config.enabled) {
      console.log('‚è∏Ô∏è Daily messaging is disabled, scheduler not started');
      return;
    }

    this.isRunning = true;
    console.log('üöÄ Starting daily messaging scheduler...');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫—Ä–æ–Ω –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (—á–∞—Å) 00-59 —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω—ã
    const hour = Number((this.config.time || '09:00').split(':')[0] || 9);
    const cronExpression = `* ${hour} * * *`;

    this.cronJob = cron.schedule(cronExpression, async () => {
      try {
        await this.sendDailyMessagesForCurrentMinuteBucket();
      } catch (error) {
        console.error('‚ùå Error in daily minute cron job:', error);
      }
    }, {
      timezone: this.config.timezone
    });

    console.log(`‚è∞ Daily messages scheduled every minute ${String(hour).padStart(2, '0')}:00‚Äì${String(hour).padStart(2, '0')}:59 (${this.config.timezone})`);
    this.emit('scheduler:started');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤
   */
  stopDailyScheduler(): void {
    if (!this.isRunning) {
      console.log('‚ö†Ô∏è Daily messaging scheduler is not running');
      return;
    }

    this.isRunning = false;

    if (this.cronJob) {
      this.cronJob.stop();
      this.cronJob = null;
    }

    console.log('üõë Daily messaging scheduler stopped');
    this.emit('scheduler:stopped');
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  async updateConfig(newConfig: Partial<DailyMessagingConfig>): Promise<void> {
    const oldConfig = { ...this.config };
    this.config = { ...this.config, ...newConfig };

    console.log('‚öôÔ∏è Daily messaging config updated:', {
      enabled: this.config.enabled,
      time: this.config.time,
      timezone: this.config.timezone
    });

    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å enabled, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    if (oldConfig.enabled !== this.config.enabled) {
      if (this.config.enabled) {
        this.startDailyScheduler();
      } else {
        this.stopDailyScheduler();
      }
    }

    this.emit('config:updated', { oldConfig, newConfig: this.config });

    try {
      await DailyMessagingConfigModel.updateOne({ key: 'default' }, {
        $set: {
          enabled: this.config.enabled,
          time: this.config.time,
          timezone: this.config.timezone,
          maxConcurrency: this.config.maxConcurrency,
          perMessageDelayMs: this.config.perMessageDelayMs,
          promptSystem: (this.config as any).promptSystem || '',
          promptUserTemplate: (this.config as any).promptUserTemplate || '',
          llmModel: (this.config as any).model || 'openai/gpt-4o-mini',
          temperature: (this.config as any).temperature ?? 0.7,
          sendFormat: (this.config as any).sendFormat || 'Markdown'
        }
      }, { upsert: true });
    } catch (error) {
      console.error('‚ùå Failed to persist DailyMessaging config:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  getConfig(): DailyMessagingConfig {
    return { ...this.config };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  getStatus(): {
    isRunning: boolean;
    enabled: boolean;
    time: string;
    timezone: string;
    lastSentDate: string | null;
    nextRun: string | null;
  } {
    const nextRun = this.calculateNextRunISO();
    return {
      isRunning: this.isRunning,
      enabled: this.config.enabled,
      time: this.config.time,
      timezone: this.config.timezone,
      lastSentDate: this.lastSentDate,
      nextRun
    };
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã —Å–µ–π—á–∞—Å
   */
  async sendNow(): Promise<any> {
    console.log('üöÄ Force sending daily messages now...');
    const startedAt = new Date();
    const res = await this.sendDailyMessagesToAll();
    const finishedAt = new Date();
    try {
      await DailyMessagingRunModel.create({
        startedAt,
        finishedAt,
        total: res.total,
        success: res.success,
        failed: res.failed,
        successRate: res.total > 0 ? res.success / res.total : 0,
        results: res.results,
        trigger: 'manual'
      });
    } catch (e) {
      console.error('‚ùå Failed to persist manual run:', e);
    }
    this.lastSentDate = new Date().toISOString();
    return res;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async getMessagingHistory(days: number = 7): Promise<any[]> {
    try {
      const from = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
      const items = await DailyMessagingRunModel.find({ startedAt: { $gte: from } })
        .sort({ startedAt: -1 })
        .limit(500)
        .lean();
      return items.map((i: any) => ({
        startedAt: i.startedAt,
        finishedAt: i.finishedAt,
        total: i.total,
        success: i.success,
        failed: i.failed,
        successRate: i.successRate,
        trigger: i.trigger
      }));
    } catch (error) {
      console.error('‚ùå Error getting messaging history:', error);
      throw error;
    }
  }

  private sanitizeGenerated(text: string, format: 'Markdown' | 'HTML' | string): string {
    if (!text) return '';
    let out = String(text);
    // Remove triple backticks fences
    out = out.replace(/```[\s\S]*?```/g, (m) => m.replace(/```/g, ''));
    out = out.replace(/```/g, '');
    // Remove markdown headings like ### Title
    out = out.replace(/^\s*#{1,6}\s*/gm, '');
    // Remove horizontal rules --- *** ___ lines
    out = out.replace(/^\s*(?:-{3,}|_{3,}|\*{3,})\s*$/gm, '');
    // Collapse excessive blank lines
    out = out.replace(/\n{3,}/g, '\n\n');
    // Trim trailing spaces
    out = out.replace(/[ \t]+$/gm, '');
    return out.trim();
  }

  private escapeHtml(s: string): string {
    return String(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  private escapeMarkdown(s: string): string {
    return String(s).replace(/[*_`\[\]()>#+\-=|{}.!]/g, (ch) => `\\${ch}`);
  }

  private calculateNextRunISO(): string | null {
    try {
      const [hh, mm] = (this.config.time || '09:00').split(':').map((x) => Number(x));
      const now = new Date();
      // Build next run date in timezone by adjusting with Intl parts
      const formatter = new Intl.DateTimeFormat('ru-RU', {
        timeZone: this.config.timezone,
        hour12: false,
        year: 'numeric',
        month: '2-digit',
        day: '2-digit'
      });
      const parts = formatter.formatToParts(now);
      const get = (type: string) => parts.find(p => p.type === type)?.value ?? '00';
      const year = Number(get('year'));
      const month = Number(get('month'));
      const day = Number(get('day'));

      const localTarget = new Date(Date.UTC(year, month - 1, day, hh, Number.isFinite(mm) ? mm : 0, 0));
      const candidate = localTarget;
      if (candidate.getTime() <= now.getTime()) {
        candidate.setUTCDate(candidate.getUTCDate() + 1);
      }
      return candidate.toISOString();
    } catch (e) {
      return null;
    }
  }

  private getDefaultSystemPrompt(): string {
    return `–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å —Å–∏—Å—Ç–µ–º–æ–π –¢–∞—Ä–æ –¢–æ—Ç–∞ –ê–ª–∏—Å—Ç–µ—Ä–∞ –ö—Ä–æ—É–ª–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ 5 —Å—Ç–∞—Ä—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤.

–ò–ù–°–¢–†–£–ö–¶–ò–Ø:
- –í –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({{birthday}}) –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã ({{today}}).
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π –∞—Ä–∫–∞–Ω –≥–ª—É–±–æ–∫–æ, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ö—Ä–æ—É–ª–∏.
- –î–∞–≤–∞–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–∞–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ, —Ç–∞–∫ –∏ challenging –∞—Å–ø–µ–∫—Ç—ã.

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:

üëã –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
   - –£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({{birthday}}) –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É ({{today}}).

1. –≠–ù–ï–†–ì–ò–Ø –î–ù–Ø (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ê—Ä–∫–∞–Ω–∞ {{arcan0}})
   - üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–Ω—è: –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Å–µ—Ç —ç—Ç–æ—Ç –∞—Ä–∫–∞–Ω
   - ‚ö†Ô∏è –í—ã–∑–æ–≤—ã –¥–Ω—è: –∫–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π
   - üîç –ö–ª—é—á–µ–≤–æ–π —Ñ–æ–∫—É—Å: –Ω–∞ —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è

2. –¢–ï–ú–´ –ò –°–û–ë–´–¢–ò–Ø (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ê—Ä–∫–∞–Ω–∞ {{arcan1}})
   - üí´ –í–µ—Ä–æ—è—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏: –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–∏—Ç—å—Å—è –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º —ç—Ç–æ–≥–æ –∞—Ä–∫–∞–Ω–∞
   - üé≠ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ: –∫–∞–∫ —ç—Ç–∏ —Ç–µ–º—ã –º–æ–≥—É—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
   - üå™Ô∏è –°–ª–æ–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã: –∫–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –≤ —ç—Ç–∏—Ö —Å—Ñ–µ—Ä–∞—Ö

3. –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—Ç–µ–∑–∞ –ê—Ä–∫–∞–Ω–æ–≤ {{arcan2}} –∏ {{arcan3}})
   - ‚ù§Ô∏è –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á—É–≤—Å—Ç–≤–∞: –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –æ—Ç —Å–æ—á–µ—Ç–∞–Ω–∏—è —ç—Ç–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤
   - üåà –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏: –∫–∞–∫–∏–µ —Å–≤–µ—Ç–ª—ã–µ —á—É–≤—Å—Ç–≤–∞ –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–∏—Ç—å—Å—è
   - ‚òÅÔ∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã: —Å –∫–∞–∫–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –º–æ–∂–µ—Ç —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è —á–µ–ª–æ–≤–µ–∫
   - ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: –∫–∞–∫ –≥–∞—Ä–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –∞—Ä–∫–∞–Ω–æ–≤

4. –°–û–í–ï–¢ –ò –°–£–¢–¨ –î–ù–Ø (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ê—Ä–∫–∞–Ω–∞ {{arcan4}})
   - üß≠ –ì–ª–∞–≤–Ω—ã–π —É—Ä–æ–∫: –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–Ω—è
   - üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
   - üåü –î—É—Ö–æ–≤–Ω—ã–π —Å–º—ã—Å–ª: –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ

–¢–û–ù –ò –°–¢–ò–õ–¨:
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
- –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–π –≥–ª—É–±–∏–Ω–æ–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å—é

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤, –Ω–æ –Ω–µ –∑–ª–æ—É–ø—Ä—è–±–ª—è–π –∏–º–∏.`;
  }

  private getDefaultUserTemplate(): string {
    return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å–∫–ª–∞–¥ –¥–Ω—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞—Ä–∫–∞–Ω–∞–º –ö—Ä–æ—É–ª–∏:

üé¥ –ê—Ä–∫–∞–Ω 1 (–≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è): {{arcan0}}
üé¥ –ê—Ä–∫–∞–Ω 2 (–¢–µ–º—ã –¥–Ω—è): {{arcan1}}
üé¥ –ê—Ä–∫–∞–Ω 3 (–≠–º–æ—Ü–∏–∏, —á–∞—Å—Ç—å 1): {{arcan2}}
üé¥ –ê—Ä–∫–∞–Ω 4 (–≠–º–æ—Ü–∏–∏, —á–∞—Å—Ç—å 2): {{arcan3}}
üé¥ –ê—Ä–∫–∞–Ω 5 (–°–æ–≤–µ—Ç –¥–Ω—è): {{arcan4}}

–°–æ—Å—Ç–∞–≤—å —Ü–µ–ª–æ—Å—Ç–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–Ω—è.`;
  }
}

export const dailyMessagingService = new DailyMessagingService();
export default dailyMessagingService;
