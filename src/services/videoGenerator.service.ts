import path from 'path';
import fs from 'fs';
import { exec } from 'child_process';
import { promisify } from 'util';
import AISettings from '../models/aiSettings.model';
import Reel from '../models/reel.model';
import { IVideoGenerationProgress } from '../models/reel.model';

const execPromise = promisify(exec);

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∏–∑ –±–ª–æ–∫–æ–≤
 */
class VideoGeneratorService {
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private async updateProgress(reelId: string, progress: Partial<IVideoGenerationProgress>): Promise<void> {
    try {
      await Reel.findByIdAndUpdate(reelId, {
        $set: {
          'generationProgress.currentStep': progress.currentStep,
          'generationProgress.stepProgress': progress.stepProgress,
          'generationProgress.totalProgress': progress.totalProgress,
          'generationProgress.estimatedTimeRemaining': progress.estimatedTimeRemaining,
          'generationProgress.error': progress.error,
          $push: progress.logs ? { 'generationProgress.logs': { $each: progress.logs } } : {}
        }
      });
    } catch (error) {
      console.error('Error updating progress:', error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç TTS –æ–∑–≤—É—á–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI TTS API
   */
  async generateTTS(text: string, blockIndex: number, reelId: string, voiceSpeed: number = 1.0): Promise<string | null> {
    try {
      const settings = await AISettings.findOne();
      const apiKey = settings?.openaiApiKey;
      
      if (!apiKey) {
        console.warn('‚ö†Ô∏è OpenAI API key not configured, using mock TTS');
        return this.generateMockTTS(text, blockIndex, reelId);
      }

      const audioDir = path.join(process.cwd(), 'uploads', 'audio');
      const audioFilename = `tts_${reelId}_block${blockIndex}_${Date.now()}.mp3`;
      const audioPath = path.join(audioDir, audioFilename);
      
      console.log(`üéôÔ∏è Generating TTS with OpenAI for block ${blockIndex}...`);
      
      const response = await fetch('https://api.openai.com/v1/audio/speech', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'tts-1', // –∏–ª–∏ tts-1-hd –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
          voice: 'alloy', // alloy, echo, fable, onyx, nova, shimmer
          input: text,
          speed: Math.max(0.25, Math.min(4.0, voiceSpeed)) // OpenAI –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 0.25-4.0
        })
      });
      
      if (!response.ok) {
        const error = await response.text();
        throw new Error(`OpenAI TTS API error: ${response.status} - ${error}`);
      }
      
      const audioBuffer = await response.arrayBuffer();
      fs.writeFileSync(audioPath, Buffer.from(audioBuffer));
      
      console.log(`‚úÖ TTS generated: ${audioFilename}`);
      
      return audioPath;
      
    } catch (error) {
      console.error(`‚ùå Error generating TTS for block ${blockIndex}:`, error);
      // Fallback to mock
      return this.generateMockTTS(text, blockIndex, reelId);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç mock TTS —Ñ–∞–π–ª (–∑–∞–≥–ª—É—à–∫–∞) - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç null –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∏—à–∏–Ω—ã
   */
  private generateMockTTS(text: string, blockIndex: number, reelId: string): string | null {
    console.log(`‚ö†Ô∏è Mock TTS for block ${blockIndex}: "${text.substring(0, 30)}..."`);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏—à–∏–Ω—É –≤–º–µ—Å—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –±–ª–æ–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é FFmpeg
   */
  async generateVideo(reel: any): Promise<string> {
    try {
      console.log(`üé¨ Starting video generation for reel ${reel._id}...`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - –Ω–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      await this.updateProgress(reel._id, {
        currentStep: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
        stepProgress: 5,
        totalProgress: 5,
        estimatedTimeRemaining: 180,
        logs: ['üé¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...', 'üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤...']
      });
      
      const outputDir = path.join(process.cwd(), 'uploads', 'videos');
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      
      const outputFilename = `video_${reel._id}_${Date.now()}.mp4`;
      const outputPath = path.join(outputDir, outputFilename);
      
      // –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
      console.log('üéôÔ∏è Step 1: Generating voice-overs...');
      await this.updateProgress(reel._id, {
        currentStep: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏',
        stepProgress: 0,
        totalProgress: 20,
        estimatedTimeRemaining: 150,
        logs: ['üéôÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞...']
      });
      
      const voiceSpeed = reel.audioSettings?.voiceSpeed || 1.0;
      
      for (let i = 0; i < reel.blocks.length; i++) {
        const block = reel.blocks[i];
        const audioPathLocal = block.audioUrl ? this.urlToLocalPath(block.audioUrl) : null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
        await this.updateProgress(reel._id, {
          currentStep: `–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–∑–≤—É—á–∫–∏ –±–ª–æ–∫–∞ ${i + 1}/${reel.blocks.length}`,
          stepProgress: Math.round((i / reel.blocks.length) * 100),
          totalProgress: 20,
          estimatedTimeRemaining: 150 - (i * 10),
          logs: [`üéôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ ${i + 1}: "${block.text.substring(0, 30)}..."`]
        });
        
        if (!audioPathLocal || !fs.existsSync(audioPathLocal)) {
          const audioPath = await this.generateTTS(block.text, i, reel._id, voiceSpeed);
          if (audioPath) {
            block.audioUrl = `/api/uploads/audio/${path.basename(audioPath)}`;
          } else {
            block.audioUrl = null; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏—à–∏–Ω—É –¥–ª—è mock TTS
          }
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º audioUrl –≤ –±–∞–∑–µ
      await reel.save();
      
      // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg
      await this.updateProgress(reel._id, {
        currentStep: '–ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg',
        stepProgress: 100,
        totalProgress: 25,
        estimatedTimeRemaining: 120,
        logs: ['üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FFmpeg...']
      });
      
      const hasFFmpeg = await this.checkFFmpegInstalled();
      
      if (!hasFFmpeg) {
        console.warn('‚ö†Ô∏è FFmpeg not installed, creating mock video');
        await this.updateProgress(reel._id, {
          currentStep: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ',
          stepProgress: 100,
          totalProgress: 100,
          estimatedTimeRemaining: 0,
          logs: ['‚ö†Ô∏è FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ']
        });
        return this.createMockVideo(outputPath, reel);
      }
      
      // –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ –±–ª–æ–∫–æ–≤
      console.log('üé¨ Step 3: Creating video with FFmpeg...');
      await this.updateProgress(reel._id, {
        currentStep: '–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –±–ª–æ–∫–æ–≤',
        stepProgress: 0,
        totalProgress: 80,
        estimatedTimeRemaining: 100,
        logs: ['üé¨ –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –±–ª–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é FFmpeg...']
      });
      
      await this.createVideoWithFFmpeg(reel, outputPath);
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      await this.updateProgress(reel._id, {
        currentStep: '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        stepProgress: 100,
        totalProgress: 100,
        estimatedTimeRemaining: 0,
        logs: ['‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!', 'üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...']
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
      const videoInfo = await this.getVideoInfo(outputPath);
      const actualDuration = videoInfo?.format?.duration ? parseFloat(videoInfo.format.duration) : 0;
      const expectedDuration = reel.blocks.reduce((sum: number, b: any) => sum + (b.duration || 10), 0);
      
      console.log(`\nüìä Final video stats:`);
      console.log(`   Expected duration: ${expectedDuration}s`);
      console.log(`   Actual duration: ${actualDuration.toFixed(2)}s`);
      console.log(`   Difference: ${Math.abs(expectedDuration - actualDuration).toFixed(2)}s`);
      
      console.log(`\n‚úÖ Video generated successfully: ${outputFilename}`);
      return outputPath;
      
    } catch (error) {
      console.error('‚ùå Error in video generation:', error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π
      await this.updateProgress(reel._id, {
        currentStep: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        stepProgress: 0,
        totalProgress: 0,
        estimatedTimeRemaining: 0,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        logs: ['‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ', `–û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`]
      });
      
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ FFmpeg
   */
  private async checkFFmpegInstalled(): Promise<boolean> {
    try {
      await execPromise('ffmpeg -version');
      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç mock –≤–∏–¥–µ–æ (–∑–∞–≥–ª—É—à–∫–∞)
   */
  private createMockVideo(outputPath: string, reel: any): string {
    const mockContent = JSON.stringify({
      message: 'MOCK VIDEO FILE',
      note: 'FFmpeg is required for actual video generation',
      blocks: reel.blocks.length,
      totalDuration: reel.blocks.reduce((sum: number, b: any) => sum + b.duration, 0)
    }, null, 2);
    
    fs.writeFileSync(outputPath, mockContent);
    console.log('‚ö†Ô∏è Created mock video file (install FFmpeg for actual video generation)');
    
    return outputPath;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg
   */
  private async createVideoWithFFmpeg(reel: any, outputPath: string): Promise<void> {
    const tempDir = path.join(process.cwd(), 'temp', `video_${reel._id}`);
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    try {
      const blockVideos: string[] = [];
      
      // –°–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
      console.log(`\nüé¨ Creating ${reel.blocks.length} video blocks...`);
      for (let i = 0; i < reel.blocks.length; i++) {
        const block = reel.blocks[i];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
        await this.updateProgress(reel._id, {
          currentStep: `–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–∞ ${i + 1}/${reel.blocks.length}`,
          stepProgress: Math.round((i / reel.blocks.length) * 100),
          totalProgress: 80,
          estimatedTimeRemaining: 100 - (i * 15),
          logs: [`üé¨ –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ ${i + 1}: "${block.displayText.substring(0, 30)}..."`]
        });
        
        console.log(`\nüìπ Block ${i + 1}/${reel.blocks.length}: "${block.displayText.substring(0, 50)}..." (${block.duration}s, ${block.images?.length || 0} images)`);
        const blockVideoPath = await this.createBlockVideo(block, i, tempDir, reel);
        blockVideos.push(blockVideoPath);
        console.log(`‚úÖ Block ${i + 1} created successfully`);
      }
      console.log(`\n‚úÖ All ${blockVideos.length} blocks created\n`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç—Ç–∞–ø –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
      await this.updateProgress(reel._id, {
        currentStep: '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ',
        stepProgress: 0,
        totalProgress: 95,
        estimatedTimeRemaining: 30,
        logs: ['üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ...']
      });
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –≤ –æ–¥–Ω–æ –≤–∏–¥–µ–æ
      await this.concatenateVideos(blockVideos, outputPath, reel.backgroundMusic, reel.audioSettings, reel.blocks);
      
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      this.cleanupTempFiles(tempDir);
      
    } catch (error) {
      console.error('‚ùå Error creating video with FFmpeg:', error);
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.cleanupTempFiles(tempDir);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞
   */
  private async createBlockVideo(block: any, index: number, tempDir: string, reel: any): Promise<string> {
    const blockOutputPath = path.join(tempDir, `block_${index}.mp4`);
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω
    if (!block.images || block.images.length === 0) {
      await this.createVideoWithBlackBackground(block, blockOutputPath, reel);
    } else {
      await this.createVideoWithImages(block, blockOutputPath, reel);
    }
    
    return blockOutputPath;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç FFmpeg —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private getImageAnimationFilter(animation: string, duration: number): string {
    const frames = duration * 25;
    
    switch (animation) {
      case 'zoom-in':
        // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ (zoom in) - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1.0, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ 1.2
        // –°–Ω–∞—á–∞–ª–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –∑–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º zoompan
        return `scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920,zoompan=z=min(zoom+0.0015\\,1.2):d=${frames}:s=1080x1920:fps=25`;
      
      case 'zoom-out':
        // –û—Ç–¥–∞–ª–µ–Ω–∏–µ (zoom out) - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1.2, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ 1.0
        return `scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920,zoompan=z=max(zoom-0.0015\\,1.0):d=${frames}:s=1080x1920:fps=25`;
      
      case 'pan-left':
        // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ (Ken Burns)
        // –°–Ω–∞—á–∞–ª–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –±–æ–ª—å—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, –∑–∞—Ç–µ–º –∫–∞–¥—Ä–∏—Ä—É–µ–º —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º
        return `scale=1296:1920:force_original_aspect_ratio=increase,crop=1080:1920:(t/${duration})*(iw-1080):(ih-1920)/2`;
      
      case 'pan-right':
        // –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
        return `scale=1296:1920:force_original_aspect_ratio=increase,crop=1080:1920:(iw-1080)-(t/${duration})*(iw-1080):(ih-1920)/2`;
      
      case 'none':
      default:
        // –ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏ –∫–∞–¥—Ä–∏—Ä—É–µ–º –¥–æ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        return 'scale=1080:1920:force_original_aspect_ratio=increase,crop=1080:1920';
    }
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ FFmpeg drawtext
   */
  private escapeFFmpegText(text: string): string {
    return text
      .replace(/\\/g, '\\\\\\\\')   // –û–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏
      .replace(/'/g, "'\\\\''")     // –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
      .replace(/:/g, '\\:')         // –î–≤–æ–µ—Ç–æ—á–∏—è
      .replace(/,/g, '\\,')         // –ó–∞–ø—è—Ç—ã–µ
      .replace(/%/g, '\\%');        // –ü—Ä–æ—Ü–µ–Ω—Ç—ã
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –±–µ–≥—É—â–∏–π)
   */
  private getTextFilter(displayText: string, scrolling: boolean, duration: number, fontPath: string): string {
    const escapedText = this.escapeFFmpegText(displayText);
    const fontSpec = fontPath ? `:fontfile=${fontPath}` : '';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
    let fontSize = 60;
    const textLength = displayText.length;
    if (textLength > 100) {
      fontSize = 45;
    } else if (textLength > 70) {
      fontSize = 50;
    } else if (textLength > 40) {
      fontSize = 55;
    }
    
    // –í–Ω–∏–º–∞–Ω–∏–µ: –æ–ø—Ü–∏—è text_w –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ drawtext –Ω–∞ –Ω–∞—à–µ–π —Å–±–æ—Ä–∫–µ FFmpeg.
    // –ü–æ—ç—Ç–æ–º—É –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë. –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –¥–∞—ë–º –æ–±–≤–æ–¥–∫—É/—Ç–µ–Ω—å –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
    if (scrolling) {
      // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ (fade-in) –∏ –æ–±–≤–æ–¥–∫–∞
      return `drawtext=text='${escapedText}':fontsize=${fontSize}:fontcolor=white:x=(w-text_w)/2:y=h-text_h-80:borderw=3:bordercolor=black@0.8:alpha='if(lt(t\\,0.3)\\,t/0.3\\,1)'${fontSpec}`;
    } else {
      // –°—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ–±–≤–æ–¥–∫–æ–π –∏ —Ç–µ–Ω—å—é
      return `drawtext=text='${escapedText}':fontsize=${fontSize}:fontcolor=white:x=(w-text_w)/2:y=h-text_h-80:borderw=3:bordercolor=black@0.8:shadowx=2:shadowy=2:shadowcolor=black@0.5${fontSpec}`;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
   */
  private getFontPath(): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
    const possibleFonts = [
      '/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf',  // Alpine Linux (Docker)
      '/usr/share/fonts/noto/NotoSans-Regular.ttf',           // Alpine –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
      '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf',      // Debian/Ubuntu
      '/System/Library/Fonts/Helvetica.ttc',                   // MacOS
      'C:/Windows/Fonts/arial.ttf',                           // Windows
      '/Windows/Fonts/arial.ttf'                              // Windows –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
    ];

    for (const fontPath of possibleFonts) {
      if (fs.existsSync(fontPath)) {
        console.log(`‚úÖ Using font: ${fontPath}`);
        return fontPath;
      }
    }

    console.warn('‚ö†Ô∏è No font file found, FFmpeg will use default');
    return ''; // FFmpeg –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –±–ª–æ–∫–∞ —Å —á–µ—Ä–Ω—ã–º —Ñ–æ–Ω–æ–º
   */
  private async createVideoWithBlackBackground(block: any, outputPath: string, reel: any): Promise<void> {
    const audioPath = block.audioUrl ? this.urlToLocalPath(block.audioUrl) : null;
    const fontPath = this.getFontPath();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —ç–∫—Ä–∞–Ω (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –±–µ–≥—É—â–∏–π)
    const textFilter = this.getTextFilter(
      block.displayText, 
      block.scrollingText || false, 
      block.duration, 
      fontPath
    );
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É: 0:v = —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω, 1:a = –∞—É–¥–∏–æ (tts –∏–ª–∏ —Ç–∏—à–∏–Ω–∞)
    const commandParts = ['ffmpeg', '-y'];
    // –í–∏–¥–µ–æ-–≤—Ö–æ–¥ (—á—ë—Ä–Ω—ã–π —Ñ–æ–Ω)
    commandParts.push('-f', 'lavfi', '-i', `color=c=black:s=1080x1920:d=${block.duration}`);
    // –ê—É–¥–∏–æ-–≤—Ö–æ–¥ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏—à–∏–Ω—É –¥–ª—è mock TTS
    commandParts.push('-f', 'lavfi', '-t', block.duration.toString(), '-i', 'anullsrc=channel_layout=stereo:sample_rate=44100');
    // –§–∏–ª—å—Ç—Ä –Ω–∞ –≤–∏–¥–µ–æ
    const filterComplex = `"[0:v]${textFilter}[v]"`;
    commandParts.push('-filter_complex', filterComplex);
    // –ú–∞–ø–ø–∏–Ω–≥
    commandParts.push('-map', '[v]', '-map', '1:a');
    // –ö–æ–¥–µ–∫–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    commandParts.push('-c:v', 'libx264', '-pix_fmt', 'yuv420p', '-r', '25', '-c:a', 'aac', `"${outputPath}"`);
    
    const command = commandParts.join(' ');
    
    console.log(`  ‚ö´ Creating ${block.duration}s video with black background and text`);
    await execPromise(command);
    console.log(`  ‚úÖ Black background video created`);
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç URL –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
   */
  private urlToLocalPath(url: string): string {
    // –£–¥–∞–ª—è–µ–º –¥–æ–º–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å (https://example.com/api/uploads/... ‚Üí /api/uploads/...)
    let relativePath = url.replace(/^https?:\/\/[^\/]+/, '');
    
    // –£–¥–∞–ª—è–µ–º /api/ –ø—Ä–µ—Ñ–∏–∫—Å (/api/uploads/... ‚Üí /uploads/...)
    relativePath = relativePath.replace(/^\/api/, '');
    
    // –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
    relativePath = relativePath.replace(/^\//, '');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å (/uploads/images/... ‚Üí /app/uploads/images/...)
    const localPath = path.join(process.cwd(), relativePath);
    
    console.log(`üîÑ URL to Path: ${url} ‚Üí ${localPath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(localPath)) {
      console.warn(`‚ö†Ô∏è File not found: ${localPath}`);
    }
    
    return localPath;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–µ–æ –±–ª–æ–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (—Å–ª–∞–π–¥—à–æ—É)
   */
  private async createVideoWithImages(block: any, outputPath: string, reel: any): Promise<void> {
    const audioPath = block.audioUrl ? this.urlToLocalPath(block.audioUrl) : null;
    const images = block.images.map((img: string) => this.urlToLocalPath(img));
    
    console.log(`  üì∏ Creating slideshow with ${images.length} images (${block.duration}s total)`);
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–ø–∏—Å–∫–∞ –¥–ª—è FFmpeg concat
    const listPath = path.join(path.dirname(outputPath), `list_${block.order}.txt`);
    
    // –ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è 2 —Å–µ–∫—É–Ω–¥—ã
    const durationPerImage = 2;
    
    console.log(`  ‚è±Ô∏è Duration per image: ${durationPerImage}s`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageVideos: string[] = [];
    const fontPath = this.getFontPath();
    
    for (let i = 0; i < images.length; i++) {
      const imageVideoPath = path.join(path.dirname(outputPath), `img_${block.order}_${i}.mp4`);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const animation = block.imageAnimation || 'zoom-in';
      const animationFilter = this.getImageAnimationFilter(animation, durationPerImage);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –±–µ–≥—É—â–∏–π)
      const textFilter = this.getTextFilter(
        block.displayText,
        block.scrollingText || false,
        durationPerImage,
        fontPath
      );
      
      // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–º–∞–Ω–¥—É
      const videoFilter = `${animationFilter},${textFilter}`;
      
      const imgCommand = [
        'ffmpeg',
        '-y',
        '-loop', '1',
        '-i', `"${images[i]}"`,
        '-t', durationPerImage.toString(),
        '-vf', `"${videoFilter}"`,
        '-c:v', 'libx264',
        '-pix_fmt', 'yuv420p',
        '-r', '25',
        '-an',
        `"${imageVideoPath}"`
      ].join(' ');
      
      console.log(`  üñºÔ∏è  Image ${i + 1}/${images.length}: ${animation} animation (${durationPerImage}s)`);
      await execPromise(imgCommand);
      imageVideos.push(imageVideoPath);
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ –≤–∏–¥–µ–æ
    const concatListContent = imageVideos.map(v => `file '${v}'`).join('\n');
    fs.writeFileSync(listPath, concatListContent);
    
    const concatVideoPath = path.join(path.dirname(outputPath), `concat_${block.order}.mp4`);
    await execPromise(`ffmpeg -y -f concat -safe 0 -i "${listPath}" -c copy "${concatVideoPath}"`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏—à–∏–Ω—É –¥–ª—è mock TTS
    await execPromise(`ffmpeg -y -i "${concatVideoPath}" -f lavfi -t ${block.duration} -i anullsrc=channel_layout=stereo:sample_rate=44100 -c:v copy -c:a aac "${outputPath}"`);
    fs.unlinkSync(concatVideoPath);
    
    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    imageVideos.forEach(v => fs.existsSync(v) && fs.unlinkSync(v));
    fs.existsSync(listPath) && fs.unlinkSync(listPath);
    
    console.log(`  ‚úÖ Slideshow created: ${images.length} images, ${block.duration}s total, with audio`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç FFmpeg xfade —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
   */
  private getTransitionFilter(transition: string): string {
    switch (transition) {
      case 'fade':
        return 'fade';
      case 'dissolve':
        return 'dissolve';
      case 'wipe':
        return 'wiperight';
      case 'none':
      default:
        return null as any; // –ë–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞
    }
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤–∏–¥–µ–æ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (xfade) –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∞—É–¥–∏–æ
   */
  private async concatenateWithTransitions(blockVideos: string[], outputPath: string, blocks: any[]): Promise<void> {
    if (blockVideos.length < 2) {
      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ 1 –±–ª–æ–∫, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
      fs.copyFileSync(blockVideos[0], outputPath);
      console.log(`‚úÖ Single block copied (duration: ${blocks[0].duration}s)`);
      return;
    }

    const transitionDuration = 0.5; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
    const durations: number[] = [];
    let totalDuration = 0;
    for (const block of blocks) {
      const dur = block.duration || 10;
      durations.push(dur);
      totalDuration += dur;
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    const finalDuration = totalDuration - (transitionDuration * (blockVideos.length - 1));
    console.log(`üìä Video stats: ${blockVideos.length} blocks, ${totalDuration}s total, ${finalDuration}s with transitions`);
    
    // –°—Ç—Ä–æ–∏–º filter_complex –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è xfade –º–µ–∂–¥—É –≤—Å–µ–º–∏ –±–ª–æ–∫–∞–º–∏ (–í–ò–î–ï–û)
    let videoFilterComplex = '';
    let currentVideoLabel = '0:v';
    let offset = 0;
    
    for (let i = 0; i < blockVideos.length - 1; i++) {
      const transition = this.getTransitionFilter(blocks[i].transition || 'fade');
      const nextLabel = i === blockVideos.length - 2 ? 'vout' : `v${i}`;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º offset –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
      // Offset = –Ω–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–≥–æ –≤–∏–¥–µ–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      // –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞: duration[0] - transitionDuration
      // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö: –ø—Ä–µ–¥—ã–¥—É—â–∏–π offset + duration[i] - transitionDuration
      if (i === 0) {
        offset = durations[0] - transitionDuration;
      } else {
        offset += durations[i] - transitionDuration;
      }
      
      console.log(`üîÄ Transition ${i + 1}: ${blocks[i].transition || 'fade'} at offset ${offset.toFixed(2)}s`);
      
      if (transition) {
        videoFilterComplex += `[${currentVideoLabel}][${i + 1}:v]xfade=transition=${transition}:duration=${transitionDuration}:offset=${offset}[${nextLabel}]`;
      } else {
        // –ë–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ - –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è
        videoFilterComplex += `[${currentVideoLabel}][${i + 1}:v]concat=n=2:v=1[${nextLabel}]`;
      }
      
      if (i < blockVideos.length - 2) {
        videoFilterComplex += ';';
      }
      
      currentVideoLabel = nextLabel;
    }
    
    // –ê–£–î–ò–û: –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
    // –ü–µ—Ä–µ—Ö–æ–¥—ã –≤–ª–∏—è—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    let audioFilterComplex = '';
    for (let i = 0; i < blockVideos.length; i++) {
      audioFilterComplex += `[${i}:a]`;
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º concat –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    // –î–æ–±–∞–≤–ª—è–µ–º atrim –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –∞—É–¥–∏–æ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    audioFilterComplex += `concat=n=${blockVideos.length}:v=0:a=1[aconcat];`;
    
    // –û–±—Ä–µ–∑–∞–µ–º –∞—É–¥–∏–æ –¥–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤)
    audioFilterComplex += `[aconcat]atrim=end=${finalDuration}[aout]`;
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Ñ–∏–ª—å—Ç—Ä—ã
    const fullFilterComplex = `${videoFilterComplex};${audioFilterComplex}`;
    
    // –°—Ç—Ä–æ–∏–º –∫–æ–º–∞–Ω–¥—É FFmpeg —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –≤—Ö–æ–¥–æ–º
    let command = 'ffmpeg -y';
    blockVideos.forEach(video => {
      command += ` -i "${video}"`;
    });
    
    command += ` -filter_complex "${fullFilterComplex}" -map "[vout]" -map "[aout]" -c:v libx264 -pix_fmt yuv420p -r 25 -c:a aac "${outputPath}"`;
    
    console.log(`üé¨ Concatenating ${blockVideos.length} blocks with transitions and synchronized audio...`);
    await execPromise(command);
    console.log(`‚úÖ Video created with final duration: ~${finalDuration.toFixed(1)}s`);
  }

  /**
   * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –±–ª–æ–∫–∏ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
   */
  private async concatenateVideos(
    blockVideos: string[], 
    outputPath: string, 
    backgroundMusic?: string,
    audioSettings?: any,
    blocks?: any[]
  ): Promise<void> {
    const tempOutputPath = path.join(path.dirname(outputPath), 'temp_concat.mp4');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
    const hasTransitions = blocks && blocks.some(b => b.transition && b.transition !== 'none');
    
    if (hasTransitions && blockVideos.length > 1) {
      console.log('üéûÔ∏è Applying transitions between blocks...');
      await this.concatenateWithTransitions(blockVideos, tempOutputPath, blocks);
    } else {
      // –ü—Ä–æ—Å—Ç–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ)
      const tempConcatList = path.join(path.dirname(outputPath), 'concat_list.txt');
      const concatContent = blockVideos.map(v => `file '${v}'`).join('\n');
      fs.writeFileSync(tempConcatList, concatContent);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º concat demuxer —Å re-encode –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ (copy –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –∫–æ–¥–µ–∫–∏ —Ä–∞–∑–Ω—ã–µ)
      await execPromise(`ffmpeg -y -f concat -safe 0 -i "${tempConcatList}" -c:v libx264 -c:a aac "${tempOutputPath}"`);
      fs.unlinkSync(tempConcatList);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
      const totalDuration = blocks?.reduce((sum, b) => sum + (b.duration || 10), 0) || 0;
      console.log(`‚úÖ All ${blockVideos.length} blocks concatenated without transitions (total: ${totalDuration}s)`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º—É–∑—ã–∫–∏
    const tempInfo = await this.getVideoInfo(tempOutputPath);
    const tempDuration = tempInfo?.format?.duration ? parseFloat(tempInfo.format.duration) : 0;
    console.log(`üìä Temporary video duration: ${tempDuration.toFixed(2)}s`);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞, –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –µ—ë
    if (backgroundMusic) {
      const musicPath = this.urlToLocalPath(backgroundMusic);
      
      if (fs.existsSync(musicPath)) {
        console.log('üéµ Adding background music...');
        
        const voiceVolume = (audioSettings?.voiceVolume || 80) / 100;
        const musicVolume = (audioSettings?.musicVolume || 30) / 100;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∞ (–≥–æ–ª–æ—Å) –≤ –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ —Å–∫–ª–µ–π–∫–∏
        const hasVoice = !!tempInfo?.streams?.some((s: any) => s.codec_type === 'audio');
        
        if (hasVoice) {
          // –ú–∏–∫—Å –≥–æ–ª–æ—Å–∞ –∏ –º—É–∑—ã–∫–∏
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—Ä–µ–∑–∞–Ω–∏—è –º—É–∑—ã–∫–∏
          const videoDuration = tempDuration || 0;
          const filterComplex = `[0:a]volume=${voiceVolume}[voice];[1:a]volume=${musicVolume},atrim=duration=${videoDuration}[music];[voice][music]amix=inputs=2:duration=first[aout]`;
          await execPromise(
            `ffmpeg -y -i "${tempOutputPath}" -i "${musicPath}" -filter_complex "${filterComplex}" -map 0:v -map "[aout]" -c:v libx264 -c:a aac "${outputPath}"`
          );
        } else {
          // –í –≤–∏–¥–µ–æ –Ω–µ—Ç –∞—É–¥–∏–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å xfade –ø–æ –≤–∏–¥–µ–æ). –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º—É–∑—ã–∫—É.
          // –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±—Ä–µ–∑–∞–Ω–∏—è –º—É–∑—ã–∫–∏
          const videoDuration = tempDuration || 0;
          const filterComplex = `[1:a]volume=${musicVolume},atrim=duration=${videoDuration}[aout]`;
          await execPromise(
            `ffmpeg -y -i "${tempOutputPath}" -i "${musicPath}" -filter_complex "${filterComplex}" -map 0:v -map "[aout]" -c:v libx264 -c:a aac "${outputPath}"`
          );
        }
        
        fs.unlinkSync(tempOutputPath);
      } else {
        console.warn('‚ö†Ô∏è Background music file not found, skipping');
        fs.renameSync(tempOutputPath, outputPath);
      }
    } else {
      fs.renameSync(tempOutputPath, outputPath);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const finalInfo = await this.getVideoInfo(outputPath);
    const finalDuration = finalInfo?.format?.duration ? parseFloat(finalInfo.format.duration) : 0;
    console.log(`üìä Final video duration: ${finalDuration.toFixed(2)}s`);
    
    console.log('‚úÖ All blocks concatenated into final video');
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
   */
  private cleanupTempFiles(tempDir: string): void {
    try {
      if (fs.existsSync(tempDir)) {
        fs.rmSync(tempDir, { recursive: true, force: true });
        console.log('üßπ Temp files cleaned up');
      }
    } catch (error) {
      console.error('‚ùå Error cleaning up temp files:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≤–∏–¥–µ–æ
   */
  async generateThumbnail(videoPath: string): Promise<string> {
    try {
      const thumbnailPath = videoPath.replace('.mp4', '_thumb.jpg');
      
      await execPromise(
        `ffmpeg -y -i "${videoPath}" -ss 00:00:01 -vframes 1 -vf "scale=480:-1" "${thumbnailPath}"`
      );
      
      console.log('‚úÖ Thumbnail generated');
      return thumbnailPath;
      
    } catch (error) {
      console.error('‚ùå Error generating thumbnail:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
   */
  async getVideoInfo(videoPath: string): Promise<any> {
    try {
      const { stdout } = await execPromise(
        `ffprobe -v quiet -print_format json -show_format -show_streams "${videoPath}"`
      );
      
      return JSON.parse(stdout);
    } catch (error) {
      console.error('‚ùå Error getting video info:', error);
      return null;
    }
  }
}

export const videoGeneratorService = new VideoGeneratorService();
export default videoGeneratorService;

