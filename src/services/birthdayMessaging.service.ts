import { EventEmitter } from 'events';
import * as cron from 'node-cron';
import User from '../models/user.model';
import { botManager } from './botManager.service';
import mongoose from 'mongoose';
import { toArcana } from '../utils/sendBirthdayMessages';

interface BirthdayMessagingConfig {
    enabled: boolean;
    time: string; // –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "09:00")
    timezone: string; // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Europe/Moscow")
}

interface BirthdayUser {
    customerId: string;
    chatId: string;
    customerName: string;
    birthday: string;
}

class BirthdayMessagingService extends EventEmitter {
    private config: BirthdayMessagingConfig;
    private cronJob: cron.ScheduledTask | null = null;
    private isRunning: boolean = false;
    private lastSentDate: string | null = null;

    constructor() {
        super();
        this.config = {
            enabled: false,
            time: '09:00', // 9 —É—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            timezone: 'Europe/Moscow' // –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };
        console.log('üéÇ BirthdayMessagingService initialized');
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è
     */
    async getUsersWithBirthday(): Promise<BirthdayUser[]> {
        try {
            // –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–µ –ø—É—Å—Ç–∞—è)
            const users = await User.find({
                birthday: { $exists: true, $nin: [null, ''] }
            }, 'chat_id customerId birthday')
                .populate('customerId', 'username')
                .lean();

            const result: BirthdayUser[] = users.map((user: any) => ({
                customerId: user.customerId?._id?.toString() ?? '',
                chatId: user.chat_id,
                customerName: user.customerId?.username ?? 'Unknown',
                birthday: user.birthday
            }));

            console.log(`üéÇ Found ${result.length} users with birthday`);
            return result;
        } catch (error) {
            console.error('‚ùå Error getting users with birthday:', error);
            throw error;
        }
    }
    async sendRequestToVseGPT(data: any, apiKey: string): Promise<any> {
        try {
            const response = await fetch("https://api.vsegpt.ru/v1/chat/completions", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${apiKey}`
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Request failed: ${response.status} ${response.statusText} - ${errorText}`);
            }

            return await response.json();
        } catch (error) {
            console.error('‚ùå Error sending request to server:', error);
            throw error;
        }
    }
    /**
     * –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async generateBirthdayMessage(user: BirthdayUser): Promise<string> {
        try {
            const getDigitSum = (dateStr: string) => dateStr.split('.').reduce((sum: number, part: string) => 
                sum + part.split('').reduce((s, d) => s + +d, 0), 0
            );
            
            const today = new Date().toLocaleDateString('ru-RU');
            const numb1 = toArcana(getDigitSum(user.birthday));
            const numb2 = toArcana(getDigitSum(today));
            const sum12 = toArcana(numb1 + numb2);
            
            const arcan = [
                numb2, 
                sum12, 
                toArcana(numb1 + sum12), 
                toArcana(numb2 + sum12), 
                toArcana(sum12 + toArcana(numb1 + sum12) + toArcana(numb2 + sum12))
            ];
            const prompt = {
                model: "openai/gpt-4o-mini",
                messages: [
                    {
                        role: "system",
                        content: `–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å —Å–∏—Å—Ç–µ–º–æ–π –¢–∞—Ä–æ –¢–æ—Ç–∞ –ê–ª–∏—Å—Ç–µ—Ä–∞ –ö—Ä–æ—É–ª–∏. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—É—é –∏ –ø–æ–ª–µ–∑–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤–µ 5 —Å—Ç–∞—Ä—à–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤.
            
            –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
            - –í –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–¥–µ–ª–∞–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${user.birthday}) –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã (${today}).
            - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π –∞—Ä–∫–∞–Ω –≥–ª—É–±–æ–∫–æ, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ö—Ä–æ—É–ª–∏. 
            - –î–∞–≤–∞–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞—è –∫–∞–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ, —Ç–∞–∫ –∏ challenging –∞—Å–ø–µ–∫—Ç—ã.
            
            –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
            
            üëã –ü–†–ò–í–ï–¢–°–¢–í–ò–ï  
               - –£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${user.birthday}) –∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É (${today}).
            
            1. –≠–ù–ï–†–ì–ò–Ø –î–ù–Ø (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ê—Ä–∫–∞–Ω–∞ ${arcan[0]})
               - üìà –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–Ω—è: –∫–∞–∫–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Å–µ—Ç —ç—Ç–æ—Ç –∞—Ä–∫–∞–Ω
               - ‚ö†Ô∏è –í—ã–∑–æ–≤—ã –¥–Ω—è: –∫–∞–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω—ã —Å —ç—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π
               - üîç –ö–ª—é—á–µ–≤–æ–π —Ñ–æ–∫—É—Å: –Ω–∞ —á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
            
            2. –¢–ï–ú–´ –ò –°–û–ë–´–¢–ò–Ø (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ê—Ä–∫–∞–Ω–∞ ${arcan[1]})
               - üí´ –í–µ—Ä–æ—è—Ç–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏: –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–∏—Ç—å—Å—è –ø–æ–¥ –≤–ª–∏—è–Ω–∏–µ–º —ç—Ç–æ–≥–æ –∞—Ä–∫–∞–Ω–∞
               - üé≠ –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ: –∫–∞–∫ —ç—Ç–∏ —Ç–µ–º—ã –º–æ–≥—É—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å—Å—è –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ
               - üå™Ô∏è –°–ª–æ–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã: –∫–∞–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –≤ —ç—Ç–∏—Ö —Å—Ñ–µ—Ä–∞—Ö
            
            3. –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—Ç–µ–∑–∞ –ê—Ä–∫–∞–Ω–æ–≤ ${arcan[2]} –∏ ${arcan[3]})
               - ‚ù§Ô∏è –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —á—É–≤—Å—Ç–≤–∞: –æ–ø–∏—à–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω –æ—Ç —Å–æ—á–µ—Ç–∞–Ω–∏—è —ç—Ç–∏—Ö –∞—Ä–∫–∞–Ω–æ–≤
               - üåà –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏: –∫–∞–∫–∏–µ —Å–≤–µ—Ç–ª—ã–µ —á—É–≤—Å—Ç–≤–∞ –º–æ–≥—É—Ç –ø—Ä–æ—è–≤–∏—Ç—å—Å—è
               - ‚òÅÔ∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã: —Å –∫–∞–∫–∏–º–∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏ –º–æ–∂–µ—Ç —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è —á–µ–ª–æ–≤–µ–∫
               - ‚öñÔ∏è –ë–∞–ª–∞–Ω—Å: –∫–∞–∫ –≥–∞—Ä–º–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–∏—è–Ω–∏–µ –¥–≤—É—Ö –∞—Ä–∫–∞–Ω–æ–≤
            
            4. –°–û–í–ï–¢ –ò –°–£–¢–¨ –î–ù–Ø (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ê—Ä–∫–∞–Ω–∞ ${arcan[4]})
               - üß≠ –ì–ª–∞–≤–Ω—ã–π —É—Ä–æ–∫: –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ –¥–Ω—è
               - üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
               - üåü –î—É—Ö–æ–≤–Ω—ã–π —Å–º—ã—Å–ª: –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–µ–≥–æ
            
            –¢–û–ù –ò –°–¢–ò–õ–¨:
            - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
            - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π
            - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏
            - –ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —ç–∑–æ—Ç–µ—Ä–∏—á–µ—Å–∫–æ–π –≥–ª—É–±–∏–Ω–æ–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å—é
            
            –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
            –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤, –Ω–æ –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π –∏–º–∏.`
                    },
                    {
                        role: "user",
                        content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å–∫–ª–∞–¥ –¥–Ω—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞—Ä–∫–∞–Ω–∞–º –ö—Ä–æ—É–ª–∏:
            
            üé¥ –ê—Ä–∫–∞–Ω 1 (–≠–Ω–µ—Ä–≥–∏—è –¥–Ω—è): ${arcan[0]}
            üé¥ –ê—Ä–∫–∞–Ω 2 (–¢–µ–º—ã –¥–Ω—è): ${arcan[1]}  
            üé¥ –ê—Ä–∫–∞–Ω 3 (–≠–º–æ—Ü–∏–∏, —á–∞—Å—Ç—å 1): ${arcan[2]}
            üé¥ –ê—Ä–∫–∞–Ω 4 (–≠–º–æ—Ü–∏–∏, —á–∞—Å—Ç—å 2): ${arcan[3]}
            üé¥ –ê—Ä–∫–∞–Ω 5 (–°–æ–≤–µ—Ç –¥–Ω—è): ${arcan[4]}
            
            –°–æ—Å—Ç–∞–≤—å —Ü–µ–ª–æ—Å—Ç–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–Ω—è.`
                    }
                ]
            };            

            const response = await this.sendRequestToVseGPT(prompt, process.env.VSE_GPT_API_KEY || '');
            return response.choices[0].message.content;
        } catch (error) {
            console.error('‚ùå Error generating birthday message:', error);
            return `üéÇ –° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, ${user.customerName}! –ñ–µ–ª–∞–µ–º –≤–∞–º –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –ª—É—á—à–µ–≥–æ! ‚ú®`;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    async sendBirthdayMessage(user: BirthdayUser): Promise<{ success: boolean; error?: string }> {
        try {
            const birthdayMessage = await this.generateBirthdayMessage(user);
            
            console.log(`üéÇ Sending birthday message to ${user.chatId} (${user.customerName}): "${birthdayMessage}"`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ BotManager
            const result = await botManager.sendMessage(user.customerId, user.chatId, birthdayMessage.replace("---", ''), false, false, false, "Markdown");
            
            if (result.success) {
                this.emit('birthday:sent', { 
                    customerId: user.customerId, 
                    chatId: user.chatId, 
                    customerName: user.customerName,
                    message: birthdayMessage
                });
                console.log(`‚úÖ Birthday message sent to ${user.chatId} (${user.customerName})`);
            } else {
                this.emit('birthday:failed', { 
                    customerId: user.customerId, 
                    chatId: user.chatId, 
                    customerName: user.customerName,
                    error: result.error 
                });
                console.error(`‚ùå Failed to send birthday message to ${user.chatId} (${user.customerName}): ${result.error}`);
            }

            return result;
        } catch (error) {
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            console.error(`‚ùå Error sending birthday message to ${user.chatId}:`, error);
            this.emit('birthday:error', { customerId: user.customerId, chatId: user.chatId, customerName: user.customerName, error: errorMessage });
            return { success: false, error: errorMessage };
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è
     */
    async sendBirthdayMessagesToAll(): Promise<{
        total: number;
        success: number;
        failed: number;
        results: Array<{ customerId: string; chatId: string; customerName: string; success: boolean; error?: string }>;
    }> {
        try {
            console.log('üéÇ Starting birthday messaging to all users...');
            
            const users = await this.getUsersWithBirthday();
            const results = [];
            let successCount = 0;
            let failedCount = 0;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –Ω–∏–º–∏
            for (const user of users) {
                const result = await this.sendBirthdayMessage(user);
                
                results.push({
                    customerId: user.customerId,
                    chatId: user.chatId,
                    customerName: user.customerName,
                    success: result.success,
                    error: result.error
                });

                if (result.success) {
                    successCount++;
                } else {
                    failedCount++;
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (200–º—Å)
                await new Promise(resolve => setTimeout(resolve, 200));
            }

            const summary = {
                total: users.length,
                success: successCount,
                failed: failedCount,
                results
            };

            console.log(`üéÇ Birthday messaging completed: ${successCount}/${users.length} successful`);
            this.emit('birthday:completed', summary);

            return summary;
        } catch (error) {
            console.error('‚ùå Error in sendBirthdayMessagesToAll:', error);
            this.emit('birthday:error', { error });
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
     */
    startBirthdayScheduler(): void {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è Birthday messaging scheduler is already running');
            return;
        }

        if (!this.config.enabled) {
            console.log('‚è∏Ô∏è Birthday messaging is disabled, scheduler not started');
            return;
        }

        this.isRunning = true;
        console.log('üöÄ Starting birthday messaging scheduler...');

        // –°–æ–∑–¥–∞–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        const [hours, minutes] = this.config.time.split(':');
        const cronExpression = `${minutes} ${hours} * * *`; // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

        this.cronJob = cron.schedule(cronExpression, async () => {
            console.log('üéÇ Cron job triggered - sending birthday messages...');
            try {
                await this.sendBirthdayMessagesToAll();
            } catch (error) {
                console.error('‚ùå Error in birthday cron job:', error);
            }
        }, {
            timezone: this.config.timezone
        });

        console.log(`‚è∞ Birthday messages scheduled for ${this.config.time} ${this.config.timezone}`);
        this.emit('scheduler:started');
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π
     */
    stopBirthdayScheduler(): void {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è Birthday messaging scheduler is not running');
            return;
        }

        this.isRunning = false;

        if (this.cronJob) {
            this.cronJob.stop();
            this.cronJob = null;
        }

        console.log('üõë Birthday messaging scheduler stopped');
        this.emit('scheduler:stopped');
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    updateConfig(newConfig: Partial<BirthdayMessagingConfig>): void {
        const oldConfig = { ...this.config };
        this.config = { ...this.config, ...newConfig };

        console.log('‚öôÔ∏è Birthday messaging config updated:', {
            enabled: this.config.enabled,
            time: this.config.time,
            timezone: this.config.timezone
        });

        // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å enabled, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if (oldConfig.enabled !== this.config.enabled) {
            if (this.config.enabled) {
                this.startBirthdayScheduler();
            } else {
                this.stopBirthdayScheduler();
            }
        }

        this.emit('config:updated', { oldConfig, newConfig: this.config });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
     */
    getConfig(): BirthdayMessagingConfig {
        return { ...this.config };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
     */
    getStatus(): {
        isRunning: boolean;
        enabled: boolean;
        time: string;
        timezone: string;
        lastSentDate: string | null;
    } {
        return {
            isRunning: this.isRunning,
            enabled: this.config.enabled,
            time: this.config.time,
            timezone: this.config.timezone,
            lastSentDate: this.lastSentDate
        };
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å
     */
    async sendNow(): Promise<any> {
        console.log('üöÄ Force sending birthday messages now...');
        return await this.sendBirthdayMessagesToAll();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const birthdayMessagingService = new BirthdayMessagingService();
export default birthdayMessagingService;
