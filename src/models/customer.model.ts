import { Schema, model, Document } from 'mongoose';

export interface ICustomer extends Document {
  username: string;
  password?: string;
  botToken: string;
  
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
  tariff?: 'basic' | 'pro';
  subscriptionStatus?: 'active' | 'inactive' | 'expired';
  subscriptionEndsAt?: Date;

  currentPrice?: number;
  basePrice?: number;
  cardNumber?: string;
  cardHolderName?: string;
  otherCountries?: string;
  sendTo?: string;
  paymentInstructions?: string;
  createdAt: Date;
  updatedAt: Date;
}

const customerSchema = new Schema<ICustomer>({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  botToken: { type: String, required: true },

  // –°—Ö–µ–º–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
  tariff: { type: String, enum: ['basic', 'pro'], default: "none" },
  subscriptionStatus: { type: String, enum: ['active', 'inactive', 'expired'], default: 'inactive' },
  subscriptionEndsAt: { type: Date, default: null },

  currentPrice: { type: Number },
  basePrice: { type: Number },
  cardNumber: { type: String },
  cardHolderName: { type: String },
  otherCountries: { type: String },
  sendTo: { type: String },
  paymentInstructions: { type: String },
}, {
  timestamps: true,
});

// Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–æ—Ç–æ–≤
customerSchema.post('save', async function(doc: ICustomer) {
  try {
    // –ò–º–ø–æ—Ä—Ç BotManager —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const { botManager } = await import('../services/botManager.service');
    
    console.log(`üìù Customer saved: ${doc.username}`);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º BotManager –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await botManager.handleCustomerChange('save', doc);
  } catch (error) {
    console.error('‚ùå Error in customer save middleware:', error);
  }
});

customerSchema.post('findOneAndUpdate', async function(doc: ICustomer) {
  try {
    if (doc) {
      const { botManager } = await import('../services/botManager.service');
      
      console.log(`üìù Customer updated: ${doc.username}`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º BotManager –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      await botManager.handleCustomerChange('update', doc);
    }
  } catch (error) {
    console.error('‚ùå Error in customer update middleware:', error);
  }
});

customerSchema.post('findOneAndDelete', async function(doc: ICustomer) {
  try {
    if (doc) {
      const { botManager } = await import('../services/botManager.service');
      
      console.log(`üóëÔ∏è Customer deleted: ${doc.username}`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º BotManager –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
      await botManager.handleCustomerChange('delete', doc);
    }
  } catch (error) {
    console.error('‚ùå Error in customer delete middleware:', error);
  }
});

const Customer = model<ICustomer>('Customer', customerSchema);

export default Customer; 