import { Request, Response } from 'express';
import Reel from '../models/reel.model';
import { catchAsync } from '../lib/catchAsync';
import { AuthRequest } from '../interfaces/authRequest';
import AISettings from '../models/aiSettings.model';
import videoGeneratorService from '../services/videoGenerator.service';
import imageGeneratorService from '../services/imageGenerator.service';
import queueService from '../services/queue.service';
import path from 'path';
import fs from 'fs';
const { SocksProxyAgent } = require('socks-proxy-agent');
const { HttpsProxyAgent } = require('https-proxy-agent');

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
async function sendRequestToAI(
  data: any, 
  apiKey: string, 
  provider: 'vsegpt' | 'openai' = 'vsegpt',
  proxySettings?: {
    enabled: boolean;
    type: 'SOCKS5' | 'HTTP' | 'HTTPS';
    ip: string;
    port: number;
    username?: string;
    password?: string;
  }
): Promise<any> {
  try {
    let url: string;
    
    if (provider === 'openai') {
      url = 'https://api.openai.com/v1/chat/completions';
    } else {
      url = 'https://api.vsegpt.ru/v1/chat/completions';
    }

    const fetchOptions: any = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify(data)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω
    if (proxySettings?.enabled && proxySettings.ip && proxySettings.port) {
      let proxyUrl: string;
      
      console.log(`üåê Configuring ${proxySettings.type} proxy: ${proxySettings.ip}:${proxySettings.port}`);
      
      if (proxySettings.type === 'SOCKS5') {
        if (proxySettings.username && proxySettings.password) {
          proxyUrl = `socks5://${proxySettings.username}:${proxySettings.password}@${proxySettings.ip}:${proxySettings.port}`;
        } else {
          proxyUrl = `socks5://${proxySettings.ip}:${proxySettings.port}`;
        }
        fetchOptions.agent = new SocksProxyAgent(proxyUrl);
      } else {
        const protocol = proxySettings.type.toLowerCase();
        if (proxySettings.username && proxySettings.password) {
          proxyUrl = `${protocol}://${proxySettings.username}:${proxySettings.password}@${proxySettings.ip}:${proxySettings.port}`;
        } else {
          proxyUrl = `${protocol}://${proxySettings.ip}:${proxySettings.port}`;
        }
        fetchOptions.agent = new HttpsProxyAgent(proxyUrl);
      }
    }

    const response = await fetch(url, fetchOptions);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`AI API request failed: ${response.status} ${response.statusText} - ${errorText}`);
    }

    return await response.json();
  } catch (error) {
    console.error('‚ùå Error sending request to AI API:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò
async function generateScenarioWithAI(prompt: string): Promise<string> {
  try {
    let settings = await AISettings.findOne();
    
    if (!settings) {
      settings = await AISettings.create({
        vsegptApiKey: process.env.VSE_GPT_API_KEY || ''
      });
    }

    const apiKey = settings.vsegptApiKey || process.env.VSE_GPT_API_KEY || '';
    
    if (!apiKey) {
      throw new Error('VseGPT API key not configured');
    }

    const proxySettings = settings.proxyEnabled ? {
      enabled: true,
      type: settings.proxyType || 'SOCKS5' as 'SOCKS5' | 'HTTP' | 'HTTPS',
      ip: settings.proxyIp || '',
      port: settings.proxyPort || 4145,
      username: settings.proxyUsername,
      password: settings.proxyPassword
    } : undefined;

    const systemPrompt = `–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤–∏–¥–µ–æ (—Ä–∏–ª—Å–∞).

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞!

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è:

# üé¨ –ö–û–ù–¶–ï–ü–¶–ò–Ø

**–û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è:** [2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –≥–ª–∞–≤–Ω–æ–π –∏–¥–µ–µ –∏ –º–µ—Å—Å–µ–¥–∂–µ]

**–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:** [–ö—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç —ç—Ç–æ –≤–∏–¥–µ–æ]

**–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω:** [–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∏–¥–µ–æ]

**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** [15-60 —Å–µ–∫—É–Ω–¥]

---

# üìπ –í–ò–ó–£–ê–õ–¨–ù–´–ô –†–Ø–î

## –ö–∞–¥—Ä 1 (0-3 —Å–µ–∫)
**–í–∏–∑—É–∞–ª:** [–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤–∏–¥–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ]

**–î–µ–π—Å—Ç–≤–∏–µ:** [–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç]

## –ö–∞–¥—Ä 2 (3-7 —Å–µ–∫)
**–í–∏–∑—É–∞–ª:** [–û–ø–∏—Å–∞–Ω–∏–µ]

**–î–µ–π—Å—Ç–≤–∏–µ:** [–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç]

## –ö–∞–¥—Ä 3 (7-10 —Å–µ–∫)
**–í–∏–∑—É–∞–ª:** [–û–ø–∏—Å–∞–Ω–∏–µ]

**–î–µ–π—Å—Ç–≤–∏–µ:** [–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç]

[–ü—Ä–æ–¥–æ–ª–∂–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏...]

---

# üéôÔ∏è –¢–ï–ö–°–¢ –ò –û–ó–í–£–ß–ö–ê

**–ì–æ–ª–æ—Å –∑–∞ –∫–∞–¥—Ä–æ–º:**
- [0-3 —Å–µ–∫]: "–¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Ñ—Ä–∞–∑—ã"
- [3-7 —Å–µ–∫]: "–¢–µ–∫—Å—Ç –≤—Ç–æ—Ä–æ–π —Ñ—Ä–∞–∑—ã"
- [7-10 —Å–µ–∫]: "–¢–µ–∫—Å—Ç —Ç—Ä–µ—Ç—å–µ–π —Ñ—Ä–∞–∑—ã"

**–¢–µ–∫—Å—Ç–æ–≤—ã–µ overlay:**
- "–ö–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ 1" (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ 2 —Å–µ–∫)
- "–ö–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ 2" (–ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ 5 —Å–µ–∫)

---

# üéµ –ú–£–ó–´–ö–ê –ò –ó–í–£–ö–ò

**–ú—É–∑—ã–∫–∞:** [–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è –º—É–∑—ã–∫–∏, —Ç–µ–º–ø, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ]

**–ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:**
- [–¢–∞–π–º–∏–Ω–≥]: [–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞]
- [–¢–∞–π–º–∏–Ω–≥]: [–û–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞]

---

# ‚ú® –ú–û–ù–¢–ê–ñ –ò –≠–§–§–ï–ö–¢–´

**–ü–µ—Ä–µ—Ö–æ–¥—ã:**
- [–ú–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ 1-2]: [–¢–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞]
- [–ú–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ 2-3]: [–¢–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞]

**–í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:**
- [–°–ø–∏—Å–æ–∫ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å —Ç–∞–π–º–∏–Ω–≥–æ–º]

**–¶–≤–µ—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è:** [–û–±—â–∏–π —Å—Ç–∏–ª—å]

---

# üí° –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

- [–°–æ–≤–µ—Ç 1]
- [–°–æ–≤–µ—Ç 2]
- [–°–æ–≤–µ—Ç 3]

–ü–∏—à–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –¥–µ—Ç–∞–ª—å–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –°—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É.`;

    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: prompt }
    ];

    const requestData = {
      model: 'openai/gpt-4o-mini',
      messages,
      temperature: 0.8,
      max_tokens: 2000
    };

    console.log(`ü§ñ Generating scenario with AI...`);
    
    const response = await sendRequestToAI(requestData, apiKey, 'vsegpt', proxySettings);
    
    const scenario = response?.choices?.[0]?.message?.content;
    
    if (!scenario) {
      throw new Error('No content in AI response');
    }

    console.log(`‚úÖ Scenario generated successfully (${scenario.length} characters)`);
    
    return scenario.trim();
    
  } catch (error) {
    console.error('‚ùå Error generating scenario with AI:', error);
    throw error;
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∏–ª—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const getUserReels = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const reels = await Reel.find({ userId })
    .sort({ createdAt: -1 })
    .lean();

  res.status(200).json(reels);
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∏–ª—Å
export const createReel = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;

  const { title, prompt } = req.body;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  if (!title || !prompt) {
    return res.status(400).json({ error: 'Title and prompt are required' });
  }

  const reel = await Reel.create({
    userId,
    title,
    prompt,
    status: 'draft',
  });

  res.status(201).json(reel);
};

// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–∏–ª—Å
export const getReel = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  const { id } = req.params;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const reel = await Reel.findOne({ _id: id, userId }).lean();

  if (!reel) {
    return res.status(404).json({ error: 'Reel not found' });
  }

  res.status(200).json(reel);
};

// –û–±–Ω–æ–≤–∏—Ç—å —Ä–∏–ª—Å
export const updateReel = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  const { id } = req.params;
  const { title, prompt, scenario, videoUrl, status } = req.body;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const updates: any = {};
  if (title !== undefined) updates.title = title;
  if (prompt !== undefined) updates.prompt = prompt;
  if (scenario !== undefined) updates.scenario = scenario;
  if (videoUrl !== undefined) updates.videoUrl = videoUrl;
  if (status !== undefined) updates.status = status;

  const reel = await Reel.findOneAndUpdate(
    { _id: id, userId },
    updates,
    { new: true, runValidators: true }
  );

  if (!reel) {
    return res.status(404).json({ error: 'Reel not found' });
  }

  res.status(200).json(reel);
};

// –£–¥–∞–ª–∏—Ç—å —Ä–∏–ª—Å
export const deleteReel = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  
  const { id } = req.params;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const reel = await Reel.findOneAndDelete({ _id: id, userId });

  if (!reel) {
    return res.status(404).json({ error: 'Reel not found' });
  }

  res.status(200).json({ message: 'Reel deleted successfully' });
};

// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò
export const generateVideoBlocks = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  const { id } = req.params;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const reel = await Reel.findOne({ _id: id, userId });

  if (!reel) {
    return res.status(404).json({ error: 'Reel not found' });
  }

  if (!reel.prompt) {
    return res.status(400).json({ error: 'Prompt is required to generate video blocks' });
  }

  try {
    console.log(`üé¨ Generating video blocks for reel ${id}...`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è 5 –±–ª–æ–∫–æ–≤
    const blocksData = await generateVideoBlocksWithAI(reel.prompt);
    
    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    const blocks = JSON.parse(blocksData);
    
    console.log(`üìã Parsed blocks:`, JSON.stringify(blocks, null, 2));
    
    // –î–æ–±–∞–≤–ª—è–µ–º ID –∏ order –∫ –∫–∞–∂–¥–æ–º—É –±–ª–æ–∫—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    const formattedBlocks = blocks.map((block: any, index: number) => {
      // Fallback –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –ò–ò –∏—Ö –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª
      const fallbackImagePrompts = [
        `–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –±–ª–æ–∫–∞ ${index + 1}`,
        `–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º–∞–º–∏ –¥–ª—è –±–ª–æ–∫–∞ ${index + 1}`,
        `–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è —Å —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –¥–ª—è –±–ª–æ–∫–∞ ${index + 1}`,
        `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º –¥–ª—è –±–ª–æ–∫–∞ ${index + 1}`,
        `–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏ –¥–ª—è –±–ª–æ–∫–∞ ${index + 1}`
      ];
      
      const finalImagePrompts = block.imagePrompts && block.imagePrompts.length > 0 ? block.imagePrompts : fallbackImagePrompts;
      
      if (!block.imagePrompts || block.imagePrompts.length === 0) {
        console.log(`‚ö†Ô∏è Block ${index + 1}: Using fallback image prompts`);
      } else {
        console.log(`‚úÖ Block ${index + 1}: Using AI-generated image prompts`);
      }
      
      return {
        id: `block_${Date.now()}_${index}`,
        text: block.voiceText || block.text || '',
        displayText: block.displayText || block.text || '',
        duration: block.duration || 10,
        images: [],
        imagePrompts: finalImagePrompts,
        imageAnimation: 'zoom-in',                                    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é zoom-in (zoom-in –∏–ª–∏ swipe)
        transition: 'fade',                                           // –í—Å–µ–≥–¥–∞ fade –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏
        scrollingText: false,                                         // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        audioUrl: undefined,
        audioType: 'ai',                                              // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é AI –æ–∑–≤—É—á–∫–∞
        order: index + 1
      };
    });

    reel.blocks = formattedBlocks;
    reel.status = 'blocks_created';
    await reel.save();

    console.log(`‚úÖ Video blocks generated and saved for reel ${id}`);
    
    res.status(200).json(reel);
  } catch (error: any) {
    console.error(`‚ùå Error generating video blocks for reel ${id}:`, error);
    res.status(500).json({ 
      error: 'Failed to generate video blocks', 
      details: error.message 
    });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –ò–ò
async function generateVideoBlocksWithAI(prompt: string): Promise<string> {
  try {
    let settings = await AISettings.findOne();
    
    if (!settings) {
      settings = await AISettings.create({
        vsegptApiKey: process.env.VSE_GPT_API_KEY || ''
      });
    }

    const apiKey = settings.vsegptApiKey || process.env.VSE_GPT_API_KEY || '';
    
    if (!apiKey) {
      throw new Error('VseGPT API key not configured');
    }

    const proxySettings = settings.proxyEnabled ? {
      enabled: true,
      type: settings.proxyType || 'SOCKS5' as 'SOCKS5' | 'HTTP' | 'HTTPS',
      ip: settings.proxyIp || '',
      port: settings.proxyPort || 4145,
      username: settings.proxyUsername,
      password: settings.proxyPassword
    } : undefined;

    const systemPrompt = `–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏—Ö, –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ –≤ —Å—Ç–∏–ª–µ Reels/TikTok. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ø–ª—è—é—â–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ 5 –±–ª–æ–∫–æ–≤ –ø–æ 10 —Å–µ–∫—É–Ω–¥ –∫–∞–∂–¥—ã–π, –≥–¥–µ –∫–∞–∂–¥—ã–π –±–ª–æ–∫ ‚Äî –¥–∏–Ω–∞–º–∏—á–Ω—ã–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –ª–µ–≥–∫–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞ —Å–ª—É—Ö.
‚ö°Ô∏è–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
[
{
"voiceText": "–¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –≥–æ–ª–æ—Å–æ–º (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è —Ä–µ—á—å —Å —ç–º–æ—Ü–∏—è–º–∏, –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –∏ –∂–∏–≤—ã–º–∏ —Ñ—Ä–∞–∑–∞–º–∏, –∫–∞–∫ –±—É–¥—Ç–æ –¥–∏–∫—Ç–æ—Ä –≥–æ–≤–æ—Ä–∏—Ç –ø—Ä—è–º–æ –≤ –∫–∞–º–µ—Ä—É)",
"displayText": "–ö–æ—Ä–æ—Ç–∫–∏–π, —Ü–µ–ø–ª—è—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∞ (3‚Äì7 —Å–ª–æ–≤)",
"duration": 10,
"imagePrompts": [
"–î–µ—Ç–∞–ª—å–Ω–æ–µ, –≤–∏–∑—É–∞–ª—å–Ω–æ –º–æ—â–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 9:16)",
"–î–µ—Ç–∞–ª—å–Ω–æ–µ, –≤–∏–∑—É–∞–ª—å–Ω–æ –º–æ—â–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
"–î–µ—Ç–∞–ª—å–Ω–æ–µ, –≤–∏–∑—É–∞–ª—å–Ω–æ –º–æ—â–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
"–î–µ—Ç–∞–ª—å–Ω–æ–µ, –≤–∏–∑—É–∞–ª—å–Ω–æ –º–æ—â–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
"–î–µ—Ç–∞–ª—å–Ω–æ–µ, –≤–∏–∑—É–∞–ª—å–Ω–æ –º–æ—â–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—è—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
]
},
... (–≤—Å–µ–≥–æ 5 –±–ª–æ–∫–æ–≤)
]

üî• –ü—Ä–∞–≤–∏–ª–∞:

* –†–æ–≤–Ω–æ 5 –±–ª–æ–∫–æ–≤.
* –ö–∞–∂–¥—ã–π voiceText ‚Äî –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, –¥–∏–Ω–∞–º–∏—á–Ω–∞—è —Ä–µ—á—å, –¥–ª–∏–Ω–æ–π –æ–∫–æ–ª–æ 10 —Å–µ–∫—É–Ω–¥ (–ø—Ä–∏–º–µ—Ä–Ω–æ 25‚Äì30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–µ—Å—å —Ä–æ–ª–∏–∫).
* –î–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–∏: —É–¥–∏–≤–ª–µ–Ω–∏–µ, –º–æ—Ç–∏–≤–∞—Ü–∏—é, –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã, –ø–∞—É–∑—ã, –æ–±—Ä—ã–≤—ã, —á—Ç–æ–±—ã –∑–≤—É—á–∞–ª–æ –∂–∏–≤–æ.
* –ö–∞–∂–¥—ã–π –±–ª–æ–∫ ‚Äî –∑–∞–∫–æ–Ω—á–µ–Ω–Ω–∞—è, –ø–æ–Ω—è—Ç–Ω–∞—è –º—ã—Å–ª—å, –ª–æ–≥–∏—á–Ω–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.
* displayText ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è, –±—Ä–æ—Å–∫–∞—è —Ñ—Ä–∞–∑–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º—É –±–ª–æ–∫–∞ (3‚Äì7 —Å–ª–æ–≤).
* imagePrompts ‚Äî —Ä–æ–≤–Ω–æ 5 –¥–µ—Ç–∞–ª—å–Ω—ã—Ö, —è—Ä–∫–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π —Å—Ü–µ–Ω, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ (9:16), –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ.
* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —É—Å–∏–ª–∏–≤–∞—Ç—å —Å–º—ã—Å–ª voiceText: —ç–º–æ—Ü–∏–∏, –¥–≤–∏–∂–µ–Ω–∏—è, –¥–∏–Ω–∞–º–∏–∫—É, –∫–æ–Ω—Ç—Ä–∞—Å—Ç.
* –¢–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –æ—Ç –∏–Ω—Ç—Ä–∏–≥—É—é—â–µ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∫ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–º—É —Ñ–∏–Ω–∞–ª—É.

üí° –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è voiceText:

* "–¢—ã –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∑–∞–¥—É–º—ã–≤–∞–ª—Å—è, –ø–æ—á–µ–º—É —É –æ–¥–Ω–∏—Ö –≤—Å—ë –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∞ –¥—Ä—É–≥–∏–µ —Ç–æ–ø—á—É—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ? –°–µ–π—á–∞—Å —Ä–∞—Å—Å–∫–∞–∂—É —Å–µ–∫—Ä–µ—Ç."
* "–í–æ—Ç –≤ —á—ë–º —Ñ–∏—à–∫–∞ ‚Äî –Ω–µ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞. –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏. –ü—Ä—è–º–æ —Å–µ–≥–æ–¥–Ω—è."
* "–≠—Ç–∞ –ø—Ä–∏–≤—ã—á–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞ –º–æ—é –∂–∏–∑–Ω—å. –°–µ—Ä—å—ë–∑–Ω–æ. –ò –æ–Ω–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–∞—è, —á—Ç–æ —Ç—ã –æ—Ñ–∏–≥–µ–µ—à—å."

üì± –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö displayText:

* "–ù–∞—á–Ω–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"
* "3 —à–∞–≥–∞ –∫ —Ü–µ–ª–∏"
* "–¢–≤–æ–π –∑–Ω–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å"
* "–°–µ–∫—Ä–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
* "–ü–æ—á–µ–º—É —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ –º–µ—Å—Ç–µ"

üé® –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö imagePrompts:

* "–î–∏–Ω–∞–º–∏—á–Ω—ã–π –≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂ –Ω–∞ –∑–∞–∫–∞—Ç–µ, –¥–≤–∏–∂–µ–Ω–∏–µ –º–∞—à–∏–Ω, –º—è–≥–∫–∏–µ —Ç—ë–ø–ª—ã–µ —Ç–æ–Ω–∞, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è"
* "–ß–µ–ª–æ–≤–µ–∫ —Å–º–æ—Ç—Ä–∏—Ç –≤ –æ–∫–Ω–æ –æ—Ñ–∏—Å–∞, —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ª—É—á–∏, –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å—Ç–µ–∫–ª–µ, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å"
* "–ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω —ç–º–æ—Ü–∏–π ‚Äî —É–¥–∏–≤–ª–µ–Ω–∏–µ, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —Ä–µ—à–∏–º–æ—Å—Ç—å, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ"
* "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤ –¥–≤–∏–∂–µ–Ω–∏–∏, –Ω–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞, –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã —Å–∏–Ω–µ–≥–æ –∏ –ø—É—Ä–ø—É—Ä–Ω–æ–≥–æ"
* "–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Å—Ü–µ–Ω–∞ —Å—Ç–∞—Ä—Ç–∞ ‚Äî —á–µ–ª–æ–≤–µ–∫ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω–∞ —Ä–∞—Å—Å–≤–µ—Ç–µ, –º—è–≥–∫–∏–π —Å–≤–µ—Ç, —Ä–µ–∞–ª–∏–∑–º"

–û—Ç–≤–µ—á–∞–π –°–¢–†–û–ì–û JSON –º–∞—Å—Å–∏–≤–æ–º, –±–µ–∑ markdown, —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ!
`;

    const messages = [
      { role: 'system', content: systemPrompt },
      { role: 'user', content: prompt }
    ];

    const requestData = {
      model: 'openai/gpt-4o-mini',
      messages,
      temperature: 0.7,
      max_tokens: 1500
    };

    console.log(`ü§ñ Generating video blocks with AI...`);
    
    const response = await sendRequestToAI(requestData, apiKey, 'vsegpt', proxySettings);
    
    let blocksData = response?.choices?.[0]?.message?.content;
    
    if (!blocksData) {
      throw new Error('No content in AI response');
    }

    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    blocksData = blocksData.trim();
    blocksData = blocksData.replace(/```json\n?/g, '').replace(/```\n?/g, '');
    blocksData = blocksData.trim();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
    JSON.parse(blocksData);

    console.log(`‚úÖ Video blocks generated successfully`);
    
    return blocksData;
    
  } catch (error) {
    console.error('‚ùå Error generating video blocks with AI:', error);
    throw error;
  }
}

// –û–±–Ω–æ–≤–∏—Ç—å –±–ª–æ–∫–∏ –≤–∏–¥–µ–æ
export const updateVideoBlocks = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  const { id } = req.params;
  const { blocks, backgroundMusic, audioSettings } = req.body;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const reel = await Reel.findOne({ _id: id, userId });

  if (!reel) {
    return res.status(404).json({ error: 'Reel not found' });
  }

  try {
    if (blocks !== undefined) {
      reel.blocks = blocks;
    }
    if (backgroundMusic !== undefined) {
      reel.backgroundMusic = backgroundMusic;
    }
    if (audioSettings !== undefined) {
      reel.audioSettings = audioSettings;
    }

    await reel.save();

    console.log(`‚úÖ Video blocks updated for reel ${id}`);
    
    res.status(200).json(reel);
  } catch (error: any) {
    console.error(`‚ùå Error updating video blocks for reel ${id}:`, error);
    res.status(500).json({ 
      error: 'Failed to update video blocks', 
      details: error.message 
    });
  }
};

// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
export const generateFinalVideo = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  const { id } = req.params;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const reel = await Reel.findOne({ _id: id, userId });

  if (!reel) {
    return res.status(404).json({ error: 'Reel not found' });
  }

  if (!reel.blocks || reel.blocks.length === 0) {
    return res.status(400).json({ error: 'No video blocks found. Please create blocks first.' });
  }

  try {
    console.log(`üé¨ Starting video generation for reel ${id}...`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    reel.status = 'video_generating';
    reel.generationProgress = {
      currentStep: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
      stepProgress: 0,
      totalProgress: 0,
      estimatedTimeRemaining: 180, // 3 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      logs: ['üé¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...'],
      error: undefined
    };
    await reel.save();

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å
    videoGeneratorService.queueVideoGeneration(reel, 1).catch(error => {
      console.error(`‚ùå Error queuing video generation for reel ${id}:`, error);
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      reel.status = 'blocks_created';
      reel.generationProgress = {
        currentStep: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å',
        stepProgress: 0,
        totalProgress: 0,
        estimatedTimeRemaining: 0,
        logs: ['‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å'],
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
      reel.save().catch(saveError => {
        console.error(`‚ùå Error saving reel status after queue failure:`, saveError);
      });
    });

    // –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å
    res.status(202).json({ 
      message: 'Video generation started',
      reelId: reel._id,
      estimatedTime: '2-5 minutes',
      progress: reel.generationProgress
    });
    
  } catch (error: any) {
    console.error(`‚ùå Error starting video generation for reel ${id}:`, error);
    res.status(500).json({ 
      error: 'Failed to start video generation', 
      details: error.message 
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
export const getVideoGenerationProgress = async (req: AuthRequest, res: Response) => {
  try {
    const { id } = req.params;
    const userId = req.user?.customerId;

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const reel = await Reel.findOne({ _id: id, userId });
    if (!reel) {
      return res.status(404).json({ error: 'Reel not found' });
    }

    res.status(200).json({
      status: reel.status,
      progress: reel.generationProgress || {
        currentStep: '–ù–µ –Ω–∞—á–∞—Ç–æ',
        stepProgress: 0,
        totalProgress: 0,
        logs: []
      }
    });

  } catch (error: any) {
    console.error('Error getting video generation progress:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
};

// –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (—Å –æ–ø—Ü–∏–µ–π –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å TTS)
export const regenerateFinalVideo = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  const { id } = req.params;
  const { forceTTS } = req.body || {};

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const reel = await Reel.findOne({ _id: id, userId });

  if (!reel) {
    return res.status(404).json({ error: 'Reel not found' });
  }

  if (!reel.blocks || reel.blocks.length === 0) {
    return res.status(400).json({ error: 'No video blocks found. Please create blocks first.' });
  }

  try {
    console.log(`‚ôªÔ∏è Regenerating video for reel ${id}... forceTTS=${!!forceTTS}`);

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –æ–∑–≤—É—á–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å
    if (forceTTS && Array.isArray(reel.blocks)) {
      reel.blocks = reel.blocks.map((b: any) => ({ ...b, audioUrl: undefined }));
    }

    // –ù–ï –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    // if (Array.isArray(reel.blocks)) {
    //   reel.blocks = reel.blocks.map((b: any) => ({ ...b, images: [] }));
    // }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π url –≤–∏–¥–µ–æ
    reel.videoUrl = undefined as any;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    reel.status = 'video_generating';
    reel.generationProgress = {
      currentStep: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
      stepProgress: 0,
      totalProgress: 0,
      estimatedTimeRemaining: 180,
      logs: [
        '‚ôªÔ∏è –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ...', 
        forceTTS ? 'üéôÔ∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –æ–∑–≤—É—á–∫—É' : 'üéôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –æ–∑–≤—É—á–∫—É',
        'üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      ],
      error: undefined
    };
    await reel.save();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    generateVideoAsync(reel).catch(error => {
      console.error(`‚ùå Error in async video regeneration for reel ${id}:`, error);
    });

    return res.status(202).json({
      message: 'Video regeneration started',
      reelId: reel._id,
      estimatedTime: '2-5 minutes',
      progress: reel.generationProgress
    });
  } catch (error: any) {
    console.error(`‚ùå Error starting video regeneration for reel ${id}:`, error);
    return res.status(500).json({ error: 'Failed to start video regeneration', details: error.message });
  }
};

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function generateImagesAsync(reel: any) {
  try {
    console.log(`üé® Starting parallel image generation for reel ${reel._id}...`);
    console.log(`üìä Reel blocks count: ${reel.blocks?.length || 0}`);
    
    if (reel.blocks) {
      reel.blocks.forEach((block: any, index: number) => {
        console.log(`üìù Block ${index + 1}: imagePrompts = ${block.imagePrompts?.length || 0}`);
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    reel.status = 'generating_images';
    await reel.save();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º imageGeneratorService –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await imageGeneratorService.generateImagesForReel(reel);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–∏–ª—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    await reel.save();
    
    console.log(`‚úÖ Images generated successfully for reel ${reel._id}`);
    
  } catch (error) {
    console.error(`‚ùå Error generating images for reel ${reel._id}:`, error);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      reel.status = 'blocks_created'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å—Ç–∞—Ç—É—Å—É
      await reel.save();
    } catch (saveError) {
      console.error(`‚ùå Error saving reel status after image generation failure:`, saveError);
    }
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function generateVideoAsync(reel: any) {
  try {
    console.log(`üé¨ Starting parallel video generation for reel ${reel._id}...`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
    reel.status = 'video_generating';
    await reel.save();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º videoGeneratorService –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const videoPath = await videoGeneratorService.generateVideo(reel);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∏–ª—Å —Å URL –≤–∏–¥–µ–æ
    reel.videoUrl = `/api/uploads/videos/${path.basename(videoPath)}`;
    reel.status = 'video_created';
    reel.generationProgress = {
      currentStep: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ',
      stepProgress: 100,
      totalProgress: 100,
      estimatedTimeRemaining: 0,
      logs: ['‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!'],
      error: undefined
    };
    await reel.save();
    
    console.log(`‚úÖ Video generated successfully for reel ${reel._id}: ${reel.videoUrl}`);
    
  } catch (error) {
    console.error(`‚ùå Error generating video for reel ${reel._id}:`, error);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      reel.status = 'blocks_created'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å—Ç–∞—Ç—É—Å—É
      reel.generationProgress = {
        currentStep: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ',
        stepProgress: 0,
        totalProgress: 0,
        estimatedTimeRemaining: 0,
        logs: ['‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ'],
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
      await reel.save();
    } catch (saveError) {
      console.error(`‚ùå Error saving reel status after video generation failure:`, saveError);
    }
  }
}

// –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–º–ø—Ç—É
export const regenerateImage = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  const { prompt, blockIndex, promptIndex } = req.body;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  if (!prompt) {
    return res.status(400).json({ error: 'Prompt is required' });
  }

  try {
    console.log(`üé® Regenerating image for prompt: "${prompt.substring(0, 50)}..."`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const images = await imageGeneratorService.generateImagesForBlock([prompt], blockIndex || 0, `temp_${Date.now()}`);
    
    if (images.length > 0) {
      res.status(200).json({ 
        imageUrl: images[0],
        message: 'Image regenerated successfully'
      });
    } else {
      res.status(500).json({ error: 'Failed to generate image' });
    }
    
  } catch (error: any) {
    console.error(`‚ùå Error regenerating image:`, error);
    res.status(500).json({ 
      error: 'Failed to regenerate image', 
      details: error.message 
    });
  }
};

// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ä–∏–ª—Å–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
export const generateScenario = async (req: AuthRequest, res: Response) => {
  const userId = req.user?.customerId;
  const { id } = req.params;

  if (!userId) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const reel = await Reel.findOne({ _id: id, userId });

  if (!reel) {
    return res.status(404).json({ error: 'Reel not found' });
  }

  if (!reel.prompt) {
    return res.status(400).json({ error: 'Prompt is required to generate scenario' });
  }

  try {
    console.log(`üé¨ Generating scenario for reel ${id}...`);
    
    const scenario = await generateScenarioWithAI(reel.prompt);
    
    reel.scenario = scenario;
    reel.status = 'scenario_generated';
    await reel.save();

    console.log(`‚úÖ Scenario generated and saved for reel ${id}`);
    
    res.status(200).json(reel);
  } catch (error: any) {
    console.error(`‚ùå Error generating scenario for reel ${id}:`, error);
    res.status(500).json({ 
      error: 'Failed to generate scenario', 
      details: error.message 
    });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export const getQueueStats = async (req: AuthRequest, res: Response) => {
  try {
    const stats = queueService.getStats();
    res.status(200).json(stats);
  } catch (error: any) {
    console.error('Error getting queue stats:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤
export const getThreadPoolStats = async (req: AuthRequest, res: Response) => {
  try {
    const threadPoolService = require('../services/threadPool.service').default;
    const stats = threadPoolService.getStats();
    res.status(200).json(stats);
  } catch (error: any) {
    console.error('Error getting thread pool stats:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
};

// –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
export const cancelGenerationTask = async (req: AuthRequest, res: Response) => {
  try {
    const { taskId } = req.params;
    const userId = req.user?.customerId;

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const cancelled = queueService.cancelTask(taskId);
    
    if (cancelled) {
      res.status(200).json({ message: 'Task cancelled successfully' });
    } else {
      res.status(404).json({ error: 'Task not found or already completed' });
    }
  } catch (error: any) {
    console.error('Error cancelling task:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
};

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞
export const generateBlockImages = async (req: AuthRequest, res: Response) => {
  try {
    const { id, blockIndex } = req.params;
    const { imageCount } = req.body;
    const userId = req.user?.customerId;

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const reel = await Reel.findOne({ _id: id, userId });
    if (!reel) {
      return res.status(404).json({ error: 'Reel not found' });
    }

    const blockIdx = parseInt(blockIndex);
    if (!reel.blocks || blockIdx < 0 || blockIdx >= reel.blocks.length) {
      return res.status(400).json({ error: 'Invalid block index' });
    }

    const block = reel.blocks[blockIdx];
    if (!block.imagePrompts || block.imagePrompts.length === 0) {
      return res.status(400).json({ error: 'No image prompts found for this block' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ª–∏ —É–∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
    if (block.imageGenerationStatus === 'generating') {
      return res.status(400).json({ error: 'Images are already being generated for this block' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
    const targetImageCount = imageCount || block.imagePrompts.length;
    if (targetImageCount !== block.imagePrompts.length) {
      // –û–±—Ä–µ–∑–∞–µ–º –∏–ª–∏ –¥—É–±–ª–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –¥–æ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const adjustedPrompts = [];
      for (let i = 0; i < targetImageCount; i++) {
        adjustedPrompts.push(block.imagePrompts[i % block.imagePrompts.length]);
      }
      block.imagePrompts = adjustedPrompts;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    block.imageGenerationStatus = 'generating';
    block.imageGenerationProgress = 0;
    await reel.save();

    console.log(`üé® Starting image generation for block ${blockIdx} of reel ${id} (${targetImageCount} images)`);
    console.log(`üîç Reel ID for generation: ${reel._id} (type: ${typeof reel._id})`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ
    imageGeneratorService.generateImagesForBlock(
      block.imagePrompts, 
      blockIdx, 
      String(reel._id),
      targetImageCount
    ).then(async (images) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º findByIdAndUpdate –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await Reel.findByIdAndUpdate(
        reel._id,
        {
          $set: {
            [`blocks.${blockIdx}.images`]: images,
            [`blocks.${blockIdx}.imageGenerationStatus`]: 'completed',
            [`blocks.${blockIdx}.imageGenerationProgress`]: 100
          }
        },
        { new: true }
      );
      
      console.log(`‚úÖ Image generation completed for block ${blockIdx}: ${images.length} images`);
    }).catch(async (error) => {
      console.error(`‚ùå Image generation failed for block ${blockIdx}:`, error);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º findByIdAndUpdate –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏
      await Reel.findByIdAndUpdate(
        reel._id,
        {
          $set: {
            [`blocks.${blockIdx}.imageGenerationStatus`]: 'failed',
            [`blocks.${blockIdx}.imageGenerationError`]: error.message
          }
        },
        { new: true }
      );
    });

    res.status(202).json({ 
      message: 'Image generation started',
      blockIndex: blockIdx,
      targetImageCount,
      status: 'generating'
    });

  } catch (error: any) {
    console.error('Error generating block images:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –±–ª–æ–∫–∞
export const updateBlockPrompts = async (req: AuthRequest, res: Response) => {
  try {
    const { id, blockIndex } = req.params;
    const { imagePrompts } = req.body;
    const userId = req.user?.customerId;

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const reel = await Reel.findOne({ _id: id, userId });
    if (!reel) {
      return res.status(404).json({ error: 'Reel not found' });
    }

    const blockIdx = parseInt(blockIndex);
    if (!reel.blocks || blockIdx < 0 || blockIdx >= reel.blocks.length) {
      return res.status(400).json({ error: 'Invalid block index' });
    }

    if (!imagePrompts || !Array.isArray(imagePrompts)) {
      return res.status(400).json({ error: 'imagePrompts must be an array' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç—ã –±–ª–æ–∫–∞
    await Reel.findByIdAndUpdate(
      reel._id,
      {
        $set: {
          [`blocks.${blockIdx}.imagePrompts`]: imagePrompts
        }
      },
      { new: true }
    );

    console.log(`‚úÖ Updated prompts for block ${blockIdx} of reel ${id}: ${imagePrompts.length} prompts`);

    res.status(200).json({ 
      message: 'Block prompts updated successfully',
      blockIndex: blockIdx,
      imagePrompts
    });

  } catch (error: any) {
    console.error('Error updating block prompts:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ –±–ª–æ–∫–∞
export const updateBlock = async (req: AuthRequest, res: Response) => {
  try {
    const { id, blockIndex } = req.params;
    const { blockData } = req.body;
    const userId = req.user?.customerId;

    console.log(`üîç updateBlock called with id: ${id}, blockIndex: ${blockIndex}, userId: ${userId}`);

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    if (!id || typeof id !== 'string' || id.length !== 24) {
      console.error(`‚ùå Invalid reel ID: ${id}`);
      return res.status(400).json({ error: 'Invalid reel ID format' });
    }

    const reel = await Reel.findOne({ _id: id, userId });
    if (!reel) {
      console.error(`‚ùå Reel not found: ${id} for user: ${userId}`);
      return res.status(404).json({ error: 'Reel not found' });
    }

    console.log(`‚úÖ Found reel: ${reel._id}`);

    const blockIdx = parseInt(blockIndex);
    if (isNaN(blockIdx) || !reel.blocks || blockIdx < 0 || blockIdx >= reel.blocks.length) {
      console.error(`‚ùå Invalid block index: ${blockIndex}, blocks length: ${reel.blocks?.length || 0}`);
      console.error(`‚ùå Available block indices: 0-${(reel.blocks?.length || 1) - 1}`);
      return res.status(400).json({ error: 'Invalid block index' });
    }

    console.log(`‚úÖ Block index ${blockIdx} is valid. Block exists:`, !!reel.blocks[blockIdx]);
    console.log(`üîç Block ${blockIdx} content:`, reel.blocks[blockIdx]);

    if (!blockData) {
      return res.status(400).json({ error: 'blockData is required' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
    const updateFields: any = {};
    Object.keys(blockData).forEach(key => {
      updateFields[`blocks.${blockIdx}.${key}`] = blockData[key];
    });

    console.log(`üîÑ Updating block ${blockIdx} with fields:`, Object.keys(updateFields));

    const updateResult = await Reel.findByIdAndUpdate(
      reel._id,
      { $set: updateFields },
      { new: true }
    );

    console.log(`‚úÖ Update result:`, updateResult ? 'Success' : 'Failed');
    console.log(`üîç Updated block ${blockIdx}:`, updateResult?.blocks?.[blockIdx]);

    console.log(`‚úÖ Updated block ${blockIdx} of reel ${id}:`, Object.keys(blockData));

    res.status(200).json({ 
      message: 'Block updated successfully',
      blockIndex: blockIdx,
      updatedFields: Object.keys(blockData)
    });

  } catch (error: any) {
    console.error('Error updating block:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
};

// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è –±–ª–æ–∫–∞
export const uploadBlockAudio = async (req: AuthRequest, res: Response) => {
  try {
    const { id, blockIndex } = req.params;
    const userId = req.user?.customerId;

    if (!userId) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    if (!id || typeof id !== 'string' || id.length !== 24) {
      return res.status(400).json({ error: 'Invalid reel ID format' });
    }

    const reel = await Reel.findOne({ _id: id, userId });
    if (!reel) {
      return res.status(404).json({ error: 'Reel not found' });
    }

    const blockIdx = parseInt(blockIndex);
    if (isNaN(blockIdx) || !reel.blocks || blockIdx < 0 || blockIdx >= reel.blocks.length) {
      return res.status(400).json({ error: 'Invalid block index' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    if (!req.file) {
      return res.status(400).json({ error: 'Audio file is required' });
    }

    const audioFile = req.file;
    if (!audioFile.buffer) {
      return res.status(400).json({ error: 'Invalid audio file' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    const allowedMimeTypes = ['audio/mpeg', 'audio/mp3', 'audio/wav', 'audio/m4a', 'audio/ogg', 'audio/webm'];
    if (!allowedMimeTypes.includes(audioFile.mimetype)) {
      return res.status(400).json({ error: 'Invalid audio file format. Allowed formats: MP3, WAV, M4A, OGG, WEBM' });
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞—É–¥–∏–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    const audioDir = path.join(process.cwd(), 'uploads', 'audio');
    if (!fs.existsSync(audioDir)) {
      fs.mkdirSync(audioDir, { recursive: true });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileExtension = audioFile.originalname.split('.').pop() || 'mp3';
    const uniqueFileName = `audio_${id}_block${blockIdx}_${Date.now()}.${fileExtension}`;
    const filePath = path.join(audioDir, uniqueFileName);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    fs.writeFileSync(filePath, audioFile.buffer);

    // –§–æ—Ä–º–∏—Ä—É–µ–º URL
    const audioUrl = `/api/uploads/audio/${uniqueFileName}`;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∞—É–¥–∏–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const oldBlock = reel.blocks[blockIdx];
    if (oldBlock?.uploadedAudioUrl) {
      const oldAudioPath = path.join(audioDir, path.basename(oldBlock.uploadedAudioUrl.replace('/api/uploads/audio/', '')));
      if (fs.existsSync(oldAudioPath)) {
        fs.unlinkSync(oldAudioPath);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫
    await Reel.findByIdAndUpdate(
      reel._id,
      {
        $set: {
          [`blocks.${blockIdx}.uploadedAudioUrl`]: audioUrl,
          [`blocks.${blockIdx}.audioType`]: 'user'
        }
      },
      { new: true }
    );

    console.log(`‚úÖ Audio uploaded for block ${blockIdx} of reel ${id}: ${audioUrl}`);

    res.status(200).json({
      message: 'Audio uploaded successfully',
      audioUrl,
      blockIndex: blockIdx
    });

  } catch (error: any) {
    console.error('Error uploading block audio:', error);
    res.status(500).json({ error: error.message || 'Internal server error' });
  }
};
