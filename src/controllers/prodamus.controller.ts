import { Request, Response } from "express";

import { AuthRequest } from "../interfaces/authRequest";
import { createProdamusPayLink } from "../utils/prodamus";
import User from "../models/user.model";
import Customer from "../models/customer.model";
import Payment from "../models/payment.model";
import botManager from "../services/botManager.service";

export const getLinkProdamusBasic = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { user } = req;
    
    if (!user || user.role !== 'customer' || !user.customerId) {
      res.status(403).json({ message: 'Forbidden: Only customers can access their profile' });
      return;
    }

    const link = createProdamusPayLink("astroxenia", {
      customer_extra: user.customerId,
      subscription: 2473695,
      urlReturn: "https://botprorok.ru/",
      urlSuccess: "https://botprorok.ru/notification/success"
    });

    res.status(200).json({
      message: 'Customer profile data',
      link: link
    });
  } catch (error) {
    res.status(500).json({ message: 'Error fetching profile', error });
  }
};

export const getLinkProdamusPro = async (req: AuthRequest, res: Response): Promise<void> => {
  try {
    const { user } = req;
    
    if (!user || user.role !== 'customer' || !user.customerId) {
      res.status(403).json({ message: 'Forbidden: Only customers can access their profile' });
      return;
    }

    const link = createProdamusPayLink("astroxenia", {
      customer_extra: user.customerId,
      subscription: 2474522,
      urlReturn: "https://botprorok.ru",
      urlSuccess: "https://botprorok.ru/notification/success"
    });

    res.status(200).json({
      message: 'Customer profile data',
      link: link
    });
  } catch (error) {
    console.error('Error getting customer profile:', error);
    res.status(500).json({ message: 'Error fetching profile', error });
  }
};

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Prodamus
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É
 */
export const handleProdamusWebhook = async (req: Request, res: Response) => {
  try {
    const data = req.body;
    console.log("üì© Prodamus webhook received:", JSON.stringify(data, null, 2));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
    const isSubscription = data["subscription[id]"] !== undefined;
    const isTarotPayment = data._param_user !== undefined && data._param_customer_id !== undefined;

    console.log(`üîç Payment type detection: subscription=${isSubscription}, tarot=${isTarotPayment}`);

    if (isSubscription) {
      console.log("üîÑ Processing as subscription payment");
      return await processSubscriptionPayment(data, res);
    } else if (isTarotPayment) {
      console.log("üîÆ Processing as tarot reading payment");
      return await processTarotPayment(data, res);
    } else {
      console.error("‚ùå Unknown payment type:", data);
      return res.status(400).json({ error: "Unknown payment type" });
    }
  } catch (error) {
    console.error("‚ùå Error in handleProdamusWebhook:", error);
    return res.status(500).json({ 
      error: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", 
      details: error instanceof Error ? error.message : 'Unknown error' 
    });
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 */
const processSubscriptionPayment = async (data: any, res: Response) => {
  try {
    console.log("üì© Processing subscription payment");

    const customerId = data.customer_extra;
    console.log(`Customer ID: ${customerId}`);
    
    if (!customerId) {
      return res.status(400).json({ error: "customer_extra is required" });
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ
    let tariff: "basic" | "pro" | undefined;
    if (String(data["subscription[id]"]) === "2473695") tariff = "basic";
    if (String(data["subscription[id]"]) === "2474522") tariff = "pro";

    console.log(`Tariff: ${tariff}`);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const status =
      data.payment_status === "success" && data["subscription[active_user]"] === "1"
        ? "active"
        : "inactive";

    console.log(`Status: ${status}`);

    // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    const subscriptionEndsAt = data["subscription[date_next_payment]"]
      ? new Date(data["subscription[date_next_payment]"])
      : null;

    console.log(`Subscription ends at: ${subscriptionEndsAt}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const customer = await Customer.findByIdAndUpdate(
      customerId,
      {
        $set: {
          tariff,
          subscriptionStatus: status,
          subscriptionEndsAt,
        },
      },
      { new: true }
    );

    if (!customer) {
      return res.status(404).json({ error: "Customer not found" });
    }

    console.log(`‚úÖ Customer subscription updated: ${customer.username}`);

    return res.status(200).json({ success: true, customer });
  } catch (error) {
    console.error("‚ùå Error in processSubscriptionPayment:", error);
    return res.status(400).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", details: error });
  }
};

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ
 */
const processTarotPayment = async (data: any, res: Response) => {
  try {
    console.log("üí≥ Processing tarot payment");

    const chatId = data._param_user;
    const customerId = data._param_customer_id;
    const botParam = data._param_bot;
    const username = data._param_username;
    const paymentStatus = data.payment_status;
    const orderId = data.order_num;
    const amount = data.sum;

    console.log(`üìù Payment details: chatId=${chatId}, customerId=${customerId}, status=${paymentStatus}, amount=${amount}, order=${orderId}`);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!chatId || !customerId) {
      console.error('‚ùå Missing required parameters: chatId or customerId');
      return res.status(400).json({ error: "chatId and customerId are required" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã
    if (paymentStatus !== "success") {
      console.log(`‚ö†Ô∏è Payment not successful: ${paymentStatus}`);
      return res.status(200).json({ success: true, message: "Payment status is not success" });
    }

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–ª–∏–µ–Ω—Ç–∞
    const user = await User.findOne({ chat_id: chatId, customerId: customerId });
    
    if (!user) {
      console.error(`‚ùå User not found: chatId=${chatId}, customerId=${customerId}`);
      return res.status(404).json({ error: "User not found" });
    }

    const customer = await Customer.findById(customerId);
    
    if (!customer) {
      console.error(`‚ùå Customer not found: ${customerId}`);
      return res.status(404).json({ error: "Customer not found" });
    }

    console.log(`‚úÖ Payment successful for user ${chatId}, customer ${customer.username}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
    try {
      await Payment.create({
        amount: parseFloat(amount) || 0,
        bot_name: botParam || 'unknown',
        username: username || 'unknown',
        type: 'tarot_reading',
      });
      console.log(`üíæ Tarot payment saved to database: ${amount} RUB for chat ${chatId}`);
    } catch (paymentError) {
      console.error("‚ùå Error saving tarot payment:", paymentError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await User.findOneAndUpdate(
      { chat_id: chatId, customerId: customerId },
      {
        $set: {
          state: 'paid_waiting_question',
          lastPaymentDate: new Date(),
          lastPaymentAmount: parseFloat(amount) || 0
        }
      }
    );

    console.log(`‚úÖ User state updated to 'paid_waiting_question'`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–∫–ª–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (botManager) {
      try {
        await botManager.sendAiLayoutMessage(
          customerId,
          chatId
        );
        
        console.log(`‚úÖ AI layout message sent to chat ${chatId}`);
      } catch (aiError) {
        console.error(`‚ùå Error sending AI layout message:`, aiError);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const bot = botManager.getBot(customerId);
        if (bot) {
          await bot.telegram.sendMessage(
            chatId,
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç.",
            { parse_mode: 'Markdown' }
          );
        }
      }
    } else {
      console.error('‚ùå BotManager instance not found');
      return res.status(500).json({ error: "BotManager not available" });
    }

    return res.status(200).json({ 
      success: true, 
      message: "Payment processed successfully",
      data: {
        orderId,
        chatId,
        amount,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    console.error("‚ùå Error in processTarotPayment:", error);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    try {
      const chatId = data._param_user;
      const customerId = data._param_customer_id;
      
      if (chatId && customerId && botManager) {
        const bot = botManager.getBot(customerId);
        if (bot) {
          await bot.telegram.sendMessage(
            chatId,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—ã–ª —Å–ø–∏—Å–∞–Ω, –Ω–æ —Ä–∞—Å–∫–ª–∞–¥ –Ω–µ –ø—Ä–∏—à–µ–ª, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            { parse_mode: 'Markdown' }
          );
        }
      }
    } catch (notificationError) {
      console.error("‚ùå Error sending error notification:", notificationError);
    }
    
    return res
      .status(500)
      .json({ 
        error: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", 
        details: error instanceof Error ? error.message : 'Unknown error' 
      });
  }
};

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ handleProdamusWebhook
 * –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export const updateProdamusSubscription = handleProdamusWebhook;

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ handleProdamusWebhook
 * –û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export const handleTarotPaymentWebhook = handleProdamusWebhook;
