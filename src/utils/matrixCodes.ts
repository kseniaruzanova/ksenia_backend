export interface MatrixCodes {
  richCodes: string[];
  marriageCodes: string[];
  profitableMarriageCodes: string[];
  childIssueCodes: string[];
  oncologyCodes: string[];
  accidentCodes: string[];
  foreignMarriageCodes: string[];
  instabilityCodes: string[];
  psychProblemsCodes: string[];
  lonelinessCodes: string[];
}

function makeSet(list: string[]): Set<string> {
  return new Set(list.map(item => item.split('-').sort((a, b) => parseInt(a) - parseInt(b)).join(',')));
}

const richCodes = makeSet([
  "4-3", "4-7", "4-11", "4-15", "4-19",
  "4-21", "10-3", "10-7", "10-11", "10-15",
  "10-19", "10-21", "20-3", "20-7", "20-11",
  "20-15", "20-19", "20-21",

  "4-10-20", "4-3-7", "4-3-11", "4-3-15", "4-3-19",
  "4-3-21", "4-7-11", "4-7-15", "4-7-19", "4-7-21",
  "4-11-15", "4-11-19", "4-11-21", "4-15-19", "4-15-21",
  "4-19-21",

  "10-3-7", "10-3-11", "10-3-15", "10-3-19", "10-3-21",
  "10-7-11", "10-7-15", "10-7-19", "10-7-21", "10-11-15",
  "10-11-19", "10-11-21", "10-15-19", "10-15-21", "10-19-21",

  "20-3-7", "20-3-11", "20-3-15", "20-3-19", "20-3-21",
  "20-7-11", "20-7-15", "20-7-19", "20-7-21", "20-11-15",
  "20-11-19", "20-11-21", "20-15-19", "20-15-21", "20-19-21",

  "4-10-3", "4-10-7", "4-10-11", "4-10-15", "4-10-19",
  "4-10-21", "4-20-3", "4-20-7", "4-20-11", "4-20-15",
  "4-20-19", "4-20-21", "10-20-3", "10-20-7", "10-20-11",
  "10-20-15", "10-20-19", "10-20-21"
]);

const marriageCodes = new Set([
  "3,18", "3,19", "3,20", "4,18", "4,19", "4,20",
  "5,18", "5,19", "5,20", "6,18", "6,19", "6,20",
  "3,18,19", "3,18,20", "3,19,20",
  "4,18,19", "4,18,20", "4,19,20",
  "5,18,19", "5,18,20", "5,19,20",
  "6,18,19", "6,18,20", "6,19,20",
  "3,4,18", "3,4,19", "3,4,20",
  "3,5,18", "3,5,19", "3,5,20",
  "3,6,18", "3,6,19", "3,6,20",
  "4,5,18", "4,5,19", "4,5,20",
  "4,6,18", "4,6,19", "4,6,20",
  "5,6,18", "5,6,19", "5,6,20"
]);

const profitableMarriageCodes = new Set([
  "3,15", "3,10", "3,7", "4,15", "4,10", "4,7",
  "5,15", "5,10", "5,7", "6,15", "6,10", "6,7",
  "18,15", "18,10", "18,7", "19,15", "19,10", "19,7",
  "20,15", "20,10", "20,7",
  "3,15,10", "3,15,7", "3,10,7",
  "4,15,10", "4,15,7", "4,10,7",
  "5,15,10", "5,15,7", "5,10,7",
  "6,15,10", "6,15,7", "6,10,7",
  "18,15,10", "18,15,7", "18,10,7",
  "19,15,10", "19,15,7", "19,10,7",
  "20,15,10", "20,15,7", "20,10,7",
  "3,4,15", "3,4,10", "3,4,7",
  "3,5,15", "3,5,10", "3,5,7",
  "3,6,15", "3,6,10", "3,6,7",
  "3,18,15", "3,18,10", "3,18,7",
  "3,19,15", "3,19,10", "3,19,7",
  "3,20,15", "3,20,10", "3,20,7",
  "4,5,15", "4,5,10", "4,5,7",
  "4,6,15", "4,6,10", "4,6,7",
  "4,18,15", "4,18,10", "4,18,7",
  "4,19,15", "4,19,10", "4,19,7",
  "4,20,15", "4,20,10", "4,20,7",
  "5,6,15", "5,6,10", "5,6,7",
  "5,18,15", "5,18,10", "5,18,7",
  "5,19,15", "5,19,10", "5,19,7",
  "5,20,15", "5,20,10", "5,20,7",
  "6,18,15", "6,18,10", "6,18,7",
  "6,19,15", "6,19,10", "6,19,7",
  "6,20,15", "6,20,10", "6,20,7",
  "18,19,15", "18,19,10", "18,19,7",
  "18,20,15", "18,20,10", "18,20,7",
  "19,20,15", "19,20,10", "19,20,7"
]);

const childIssueCodes = makeSet([
  "2-9", "2-12", "2-13", "2-15", "2-16", "2-20",
  "3-9", "3-12", "3-13", "3-15", "3-16", "3-20",
  "18-9", "18-12", "18-13", "18-15", "18-16", "18-20",
  "19-9", "19-12", "19-13", "19-15", "19-16", "19-20",
  "2-9-12", "2-9-13", "2-9-15", "2-9-16", "2-9-20",
  "2-12-13", "2-12-15", "2-12-16", "2-12-20",
  "2-13-15", "2-13-16", "2-13-20",
  "2-15-16", "2-15-20", "2-16-20",
  "3-9-12", "3-9-13", "3-9-15", "3-9-16", "3-9-20",
  "3-12-13", "3-12-15", "3-12-16", "3-12-20",
  "3-13-15", "3-13-16", "3-13-20",
  "3-15-16", "3-15-20", "3-16-20",
  "18-9-12", "18-9-13", "18-9-15", "18-9-16", "18-9-20",
  "18-12-13", "18-12-15", "18-12-16", "18-12-20",
  "18-13-15", "18-13-16", "18-13-20", "18-15-16", "18-15-20", "18-16-20",
  "19-9-12", "19-9-13", "19-9-15", "19-9-16", "19-9-20",
  "19-12-13", "19-12-15", "19-12-16", "19-12-20",
  "19-13-15", "19-13-16", "19-13-20",
  "19-15-16", "19-15-20", "19-16-20",
  "2-3-9", "2-3-12", "2-3-13", "2-3-15", "2-3-16", "2-3-20",
  "2-18-9", "2-18-12", "2-18-13", "2-18-15", "2-18-16", "2-18-20",
  "2-19-9", "2-19-12", "2-19-13", "2-19-15", "2-19-16", "2-19-20",
  "3-18-9", "3-18-12", "3-18-13", "3-18-15", "3-18-16", "3-18-20",
  "3-19-9", "3-19-12", "3-19-13", "3-19-15", "3-19-16", "3-19-20",
  "18-19-9", "18-19-12", "18-19-13", "18-19-15", "18-19-16", "18-19-20"
]);

const oncologyCodes = makeSet([
  "12-12", "12-13", "12-15", "12-16", "18-13", "18-15", "18-16",
  "9-13", "9-15", "9-16",
  "12-13-15", "12-13-16", "12-15-16", "18-13-15", "18-13-16", "18-15-16",
  "9-13-15", "9-13-16", "9-15-16",
  "12-18-13", "12-18-15", "12-18-16", "12-9-13", "12-9-15", "12-9-16",
  "18-9-13", "18-9-15", "18-9-16"
]);

const accidentCodes = makeSet([
  "7-13", "7-15", "7-16", "7-12", "7-11",
  "10-13", "10-15", "10-16", "10-12", "10-11",
  "21-13", "21-15", "21-16", "21-12", "21-11",
  "22-13", "22-15", "22-16", "22-12", "22-11",
  "1-13", "1-15", "1-16", "1-12", "1-11",
  "7-13-15", "7-13-16", "7-13-12", "7-13-11",
  "7-15-16", "7-15-12", "7-15-11", "7-16-12", "7-16-11", "7-12-11",
  "10-13-15", "10-13-16", "10-13-12", "10-13-11",
  "10-15-16", "10-15-12", "10-15-11", "10-16-12", "10-16-11", "10-12-11",
  "21-13-15", "21-13-16", "21-13-12", "21-13-11",
  "21-15-16", "21-15-12", "21-15-11", "21-16-12", "21-16-11", "21-12-11",
  "22-13-15", "22-13-16", "22-13-12", "22-13-11",
  "22-15-16", "22-15-12", "22-15-11", "22-16-12", "22-16-11", "22-12-11",
  "1-13-15", "1-13-16", "1-13-12", "1-13-11",
  "1-15-16", "1-15-12", "1-15-11", "1-16-12", "1-16-11", "1-12-11",
  "7-10-13", "7-10-15", "7-10-16", "7-10-12", "7-10-11",
  "7-21-13", "7-21-15", "7-21-16", "7-21-12", "7-21-11",
  "7-22-13", "7-22-15", "7-22-16", "7-22-12", "7-22-11",
  "7-1-13", "7-1-15", "7-1-16", "7-1-12", "7-1-11",
  "10-21-13", "10-21-15", "10-21-16", "10-21-12", "10-21-11",
  "10-22-13", "10-22-15", "10-22-16", "10-22-12", "10-22-11",
  "10-1-13", "10-1-15", "10-1-16", "10-1-12", "10-1-11",
  "21-22-13", "21-22-15", "21-22-16", "21-22-12", "21-22-11",
  "21-1-13", "21-1-15", "21-1-16", "21-1-12", "21-1-11",
  "22-1-13", "22-1-15", "22-1-16", "22-1-12", "22-1-11"
]);

const foreignMarriageCodes = makeSet([
  "3-7", "3-10", "3-21", "3-22",
  "4-7", "4-10", "4-21", "4-22",
  "5-7", "5-10", "5-21", "5-22",
  "6-7", "6-10", "6-21", "6-22",
  "3-7-10", "3-7-21", "3-7-22", "3-10-21", "3-10-22",
  "3-21-22", "4-7-10", "4-7-21", "4-7-22", "4-10-21", "4-10-22",
  "4-21-22", "5-7-10", "5-7-21", "5-7-22", "5-10-21", "5-10-22",
  "5-21-22", "6-7-10", "6-7-21", "6-7-22", "6-10-21", "6-10-22",
  "6-21-22", "3-4-7", "3-4-10", "3-4-21", "3-4-22",
  "3-5-7", "3-5-10", "3-5-21", "3-5-22",
  "3-6-7", "3-6-10", "3-6-21", "3-6-22",
  "4-5-7", "4-5-10", "4-5-21", "4-5-22",
  "4-6-7", "4-6-10", "4-6-21", "4-6-22",
  "5-6-7", "5-6-10", "5-6-21", "5-6-22"
]);

const instabilityCodes = makeSet([
  "9-17", "16-20"
]);

const psychProblemsCodes = makeSet([
  "9-17", "9-18", "9-20", "12-17", "12-18",
  "12-20", "13-17", "13-18", "13-20", "15-17",
  "15-18", "15-20", "16-17", "16-18", "16-20",
  "22-17", "22-18", "22-20",

  "9-17-18", "9-17-20", "9-18-20", "12-17-18", "12-17-20",
  "12-18-20", "13-17-18", "13-17-20", "13-18-20", "15-17-18",
  "15-17-20", "15-18-20", "16-17-18", "16-17-20", "16-18-20",
  "22-17-18", "22-17-20", "22-18-20",

  "9-12-17", "9-12-18", "9-12-20", "9-13-17", "9-13-18",
  "9-13-20", "9-15-17", "9-15-18", "9-15-20", "9-16-17",
  "9-16-18", "9-16-20", "9-22-17", "9-22-18", "9-22-20",

  "12-13-17", "12-13-18", "12-13-20", "12-15-17", "12-15-18",
  "12-15-20", "12-16-17", "12-16-18", "12-16-20", "12-22-17",
  "12-22-18", "12-22-20",

  "13-15-17", "13-15-18", "13-15-20", "13-16-17", "13-16-18",
  "13-16-20", "13-22-17", "13-22-18", "13-22-20",

  "15-16-17", "15-16-18", "15-16-20", "15-22-17", "15-22-18",
  "15-22-20", "16-22-17", "16-22-18", "16-22-20"
]);

const lonelinessCodes = makeSet([
  "3-13", "3-16", "3-22", "3-9", "4-13",
  "4-16", "4-22", "4-9", "5-13", "5-16",
  "5-22", "5-9", "6-13", "6-16", "6-22",
  "6-9", "18-13", "18-16", "18-22", "18-9",
  "19-13", "19-16", "19-22", "19-9",

  "3-13-16", "3-13-22", "3-13-9", "3-16-22", "3-16-9",
  "3-22-9", "4-13-16", "4-13-22", "4-13-9", "4-16-22",
  "4-16-9", "4-22-9", "5-13-16", "5-13-22", "5-13-9",
  "5-16-22", "5-16-9", "5-22-9", "6-13-16", "6-13-22",
  "6-13-9", "6-16-22", "6-16-9", "6-22-9", "18-13-16",
  "18-13-22", "18-13-9", "18-16-22", "18-16-9", "18-22-9",
  "19-13-16", "19-13-22", "19-13-9", "19-16-22", "19-16-9",
  "19-22-9",

  "3-4-13", "3-4-16", "3-4-22", "3-4-9", "3-5-13",
  "3-5-16", "3-5-22", "3-5-9", "3-6-13", "3-6-16",
  "3-6-22", "3-6-9", "3-18-13", "3-18-16", "3-18-22",
  "3-18-9", "3-19-13", "3-19-16", "3-19-22", "3-19-9",

  "4-5-13", "4-5-16", "4-5-22", "4-5-9", "4-6-13",
  "4-6-16", "4-6-22", "4-6-9", "4-18-13", "4-18-16",
  "4-18-22", "4-18-9", "4-19-13", "4-19-16", "4-19-22",
  "4-19-9",

  "5-6-13", "5-6-16", "5-6-22", "5-6-9", "5-18-13",
  "5-18-16", "5-18-22", "5-18-9", "5-19-13", "5-19-16",
  "5-19-22", "5-19-9",

  "6-18-13", "6-18-16", "6-18-22", "6-18-9", "6-19-13",
  "6-19-16", "6-19-22", "6-19-9",

  "18-19-13", "18-19-16", "18-19-22", "18-19-9"
]);

/**
 * Нормализует комбинацию чисел в строку с сортировкой
 */
function normalizeCombo(arr: number[]): string {
  const sorted = arr.map(String).sort((a, b) => Number(a) - Number(b));
  return sorted.join(',');
}

/**
 * Проверяет и добавляет найденные коды в соответствующие множества
 */
function checkAndAdd(
  comboStr: string,
  foundSets: {
    richCodes: Set<string>;
    marriageCodes: Set<string>;
    profitableMarriageCodes: Set<string>;
    childIssueCodes: Set<string>;
    oncologyCodes: Set<string>;
    accidentCodes: Set<string>;
    foreignMarriageCodes: Set<string>;
    instabilityCodes: Set<string>;
    psychProblemsCodes: Set<string>;
    lonelinessCodes: Set<string>;
  }
): void {
  if (richCodes.has(comboStr)) foundSets.richCodes.add(comboStr);
  if (marriageCodes.has(comboStr)) foundSets.marriageCodes.add(comboStr);
  if (profitableMarriageCodes.has(comboStr)) foundSets.profitableMarriageCodes.add(comboStr);
  if (childIssueCodes.has(comboStr)) foundSets.childIssueCodes.add(comboStr);
  if (oncologyCodes.has(comboStr)) foundSets.oncologyCodes.add(comboStr);
  if (accidentCodes.has(comboStr)) foundSets.accidentCodes.add(comboStr);
  if (foreignMarriageCodes.has(comboStr)) foundSets.foreignMarriageCodes.add(comboStr);
  if (instabilityCodes.has(comboStr)) foundSets.instabilityCodes.add(comboStr);
  if (psychProblemsCodes.has(comboStr)) foundSets.psychProblemsCodes.add(comboStr);
  if (lonelinessCodes.has(comboStr)) foundSets.lonelinessCodes.add(comboStr);
}

/**
 * Анализирует матрицу и находит все коды в соседних ячейках
 * @param matrix - матрица чисел для анализа
 * @returns объект с найденными кодами
 */
export function analyzeMatrixCodes(matrix: number[][]): MatrixCodes {
  const foundSets = {
    richCodes: new Set<string>(),
    marriageCodes: new Set<string>(),
    profitableMarriageCodes: new Set<string>(),
    childIssueCodes: new Set<string>(),
    oncologyCodes: new Set<string>(),
    accidentCodes: new Set<string>(),
    foreignMarriageCodes: new Set<string>(),
    instabilityCodes: new Set<string>(),
    psychProblemsCodes: new Set<string>(),
    lonelinessCodes: new Set<string>()
  };

  // Проверяем соседние клетки по горизонтали и вертикали для 2 или 3 чисел
  for (let r = 0; r < matrix.length; r++) {
    for (let c = 0; c < matrix[r].length; c++) {
      const curr = matrix[r][c];
      if (curr === null || curr === undefined) continue;

      // Проверяем пары и тройки по горизонтали
      if (c + 1 < matrix[r].length) {
        const pair = normalizeCombo([curr, matrix[r][c + 1]]);
        checkAndAdd(pair, foundSets);
      }
      if (c + 2 < matrix[r].length) {
        const triple = normalizeCombo([curr, matrix[r][c + 1], matrix[r][c + 2]]);
        checkAndAdd(triple, foundSets);
      }

      // Проверяем пары и тройки по вертикали
      if (r + 1 < matrix.length) {
        const pair = normalizeCombo([curr, matrix[r + 1][c]]);
        checkAndAdd(pair, foundSets);
      }
      if (r + 2 < matrix.length) {
        const triple = normalizeCombo([curr, matrix[r + 1][c], matrix[r + 2][c]]);
        checkAndAdd(triple, foundSets);
      }
    }
  }

  // Преобразуем множества в массивы строк в формате "x-y-z"
  const formatCodes = (foundSet: Set<string>): string[] => {
    if (foundSet.size === 0) return [];
    return Array.from(foundSet).map(combo => combo.split(',').join('-'));
  };

  return {
    richCodes: formatCodes(foundSets.richCodes),
    marriageCodes: formatCodes(foundSets.marriageCodes),
    profitableMarriageCodes: formatCodes(foundSets.profitableMarriageCodes),
    childIssueCodes: formatCodes(foundSets.childIssueCodes),
    oncologyCodes: formatCodes(foundSets.oncologyCodes),
    accidentCodes: formatCodes(foundSets.accidentCodes),
    foreignMarriageCodes: formatCodes(foundSets.foreignMarriageCodes),
    instabilityCodes: formatCodes(foundSets.instabilityCodes),
    psychProblemsCodes: formatCodes(foundSets.psychProblemsCodes),
    lonelinessCodes: formatCodes(foundSets.lonelinessCodes)
  };
}

